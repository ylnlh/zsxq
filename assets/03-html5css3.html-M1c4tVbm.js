import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as l,c as d,a as n,d as s,b as t,w as r,f as a}from"./app-tt0ZouaX.js";const p={},c=a('<p>​</p><h1 id="day02-移动web开发-h5c3" tabindex="-1"><a class="header-anchor" href="#day02-移动web开发-h5c3" aria-hidden="true">#</a> day02 - 移动web开发_H5C3</h1><h2 id="_1-1-学习目标" tabindex="-1"><a class="header-anchor" href="#_1-1-学习目标" aria-hidden="true">#</a> 1.1. 学习目标</h2><ul><li>理解 <ul><li>3d转换的中的3d移动，3d旋转</li><li>动画属性的设置和使用</li><li>animate.css动画库的使用</li></ul></li><li>应用 <ul><li>实现3d立方体</li><li>实现3d轮播图</li><li>无缝滚动</li><li>正在等待图标的制作</li><li>自己实现animate.css</li></ul></li></ul><h2 id="_1-1-3d转换-变换" tabindex="-1"><a class="header-anchor" href="#_1-1-3d转换-变换" aria-hidden="true">#</a> 1.1. 3D转换（变换）</h2>',5),u=n("strong",null,"坐标系",-1),h=n("strong",null,"位置和形状",-1),g=a(`<h3 id="_1-1-1-3维坐标系" tabindex="-1"><a class="header-anchor" href="#_1-1-1-3维坐标系" aria-hidden="true">#</a> 1.1.1. 3维坐标系</h3><p>3维坐标系其实就是指立体空间，立体空间是由3个轴共同组成的</p><ul><li>x轴 水平向右</li><li>y轴 垂直向下</li><li>z轴 垂直屏幕 由屏幕里面指向屏幕的外面</li></ul><h3 id="_1-1-2-3d移动-translate3d" tabindex="-1"><a class="header-anchor" href="#_1-1-2-3d移动-translate3d" aria-hidden="true">#</a> 1.1.2. 3d移动 translate3d</h3><p>3d移动在2d移动的基础上多加了一个可以移动的方向，就是z轴方向</p><p><strong>语法：</strong></p><ol><li>transform:<strong>translate3d</strong>(x,y,z) 其中 <strong>x y z</strong> 分别指要移动的轴的方向的距离</li><li>translform:<strong>translateX</strong>(100px) 仅仅是移动在x轴上移动</li><li>translform:<strong>translateY</strong>(100px) 仅仅是移动在Y轴上移动</li><li>translform:<strong>translateZ</strong>(100px) 仅仅是移动在Z轴上移动</li></ol><p><strong>注意</strong>:</p><p>因为z轴是垂直屏幕，由里指向外面，所以 默认是看不到元素在z轴的方向上移动，想要看到，可以使用下面的 <strong>视距</strong> 属性设置</p><h3 id="_1-1-3-视距-perspertive-了解" tabindex="-1"><a class="header-anchor" href="#_1-1-3-视距-perspertive-了解" aria-hidden="true">#</a> 1.1.3. 视距 perspertive 了解</h3><p>人在看物体时，有个规律，如 <strong>远的物体看起来小</strong> <strong>近的物体看起来大</strong></p><p><strong>perspertive</strong> 就是用来设置 <strong>人</strong> 和 <strong>物体</strong> 的距离</p><p>如 我们想要看到 物体 在z轴上的移动 的 <strong>远大近小</strong> 效果时</p><ol><li>设置物体的 <code>translateZ</code> 一般大于 0 如 <code>transform:translateZ(100px)</code></li><li>设置 人和物体的距离 - 视距 这个值规定要设置给<strong>物体的父元素</strong> <code>perspertive:1000px</code></li><li>动态改变物体的 <code>translateZ</code> 即可观察效果</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>    <span class="token comment">/* 父元素 */</span>
    <span class="token selector">body</span> <span class="token punctuation">{</span>
      <span class="token comment">/* 视距 */</span>
      <span class="token property">perspective</span><span class="token punctuation">:</span> 1000px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 目标 */</span>
    <span class="token selector">div</span> <span class="token punctuation">{</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>
      <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>
      <span class="token comment">/* z轴的移动 */</span>
      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>0px<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-1-3-1-小结" tabindex="-1"><a class="header-anchor" href="#_1-1-3-1-小结" aria-hidden="true">#</a> 1.1.3.1. 小结</h4><ol><li>translateZ的值和perspertive都要大于0 否则容易出现兼容性问题</li></ol><h3 id="_1-1-4-3d旋转-rotate3d" tabindex="-1"><a class="header-anchor" href="#_1-1-4-3d旋转-rotate3d" aria-hidden="true">#</a> 1.1.4. 3d旋转 rotate3d</h3><p>3d旋转指可以让元素在3维平面内沿着 <strong>x轴，y轴，z轴或者自定义轴</strong>进行旋转 对于元素旋转的方向的判断 我们需要先学习一个<strong>左手准则</strong></p><h4 id="_1-1-4-1-左手准则" tabindex="-1"><a class="header-anchor" href="#_1-1-4-1-左手准则" aria-hidden="true">#</a> 1.1.4.1. 左手准则</h4><p>比如要判断某元素沿着x轴是怎么旋转的</p><ol><li>左手的手拇指指向 x轴的正方向</li><li>其余手指的弯曲方向就是该元素沿着x轴旋转的方向了</li></ol><h4 id="_1-1-4-2-例子1" tabindex="-1"><a class="header-anchor" href="#_1-1-4-2-例子1" aria-hidden="true">#</a> 1.1.4.2. 例子1</h4><p>我现在想让元素沿着 x轴正方向旋转90度</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>    <span class="token comment">/* 沿着x轴正方向旋转90度 deg为单位 */</span>
      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过自己的代码测试 让物体沿着y轴 z轴旋转，加深了解。</p><h4 id="_1-1-4-3-语法" tabindex="-1"><a class="header-anchor" href="#_1-1-4-3-语法" aria-hidden="true">#</a> 1.1.4.3. 语法</h4><ol><li><code>transform:rotateX(45deg);</code> 沿着x轴正方向旋转 45度</li><li><code>transform:rotateY(45deg)</code> 沿着y轴正方向旋转 45deg</li><li><code>transform:rotateZ(45deg)</code> 沿着Z轴正方向旋转 45deg</li><li><code>transform:rotate3d(x,y,z,deg)</code> 沿着自定义轴旋转 deg为角度 了解即可</li></ol><h3 id="_1-1-5-3d缩放-scale3d-了解" tabindex="-1"><a class="header-anchor" href="#_1-1-5-3d缩放-scale3d-了解" aria-hidden="true">#</a> 1.1.5. 3D缩放 scale3d 了解</h3>`,29),m=a(`<h4 id="_1-1-5-1-语法" tabindex="-1"><a class="header-anchor" href="#_1-1-5-1-语法" aria-hidden="true">#</a> 1.1.5.1. 语法</h4><ol><li><code>transform: scale3d(1 ,1,2);</code> 宽，高 缩放一倍，厚度放大两倍</li><li><code>transform: scaleX(1)</code> 只缩放宽</li><li><code>transform: scaleY(1)</code> 只缩放高</li><li><code>transform: scaleZ(1)</code> 只缩放厚</li></ol><h3 id="_1-1-6-视距原点-perspective-origin-了解" tabindex="-1"><a class="header-anchor" href="#_1-1-6-视距原点-perspective-origin-了解" aria-hidden="true">#</a> 1.1.6. 视距原点 perspective-origin 了解</h3><p>回顾<strong>视距</strong>知识点，</p><p>视距可以设置 <strong>人 和 物体</strong> 之间的距离 也就是z轴方向的距离</p><p>而 <strong>视距原点</strong> 可以设置 人 站在x轴和y轴的位置。</p><ol><li>视距原点和视距一样，也是设置给要观察元素的<strong>父元素</strong>上</li><li>perspective-origin:center center; 默认值是<strong>元素的中心点</strong></li><li>perspective-origin:10px； 指定了一个参数的时候，第二个参数默认为center 也就是50%；</li><li>perspective-origin:10% %； 百分比都是相对于自身的宽度和高度</li></ol><h3 id="_1-1-7-转换样式-transform-style-了解" tabindex="-1"><a class="header-anchor" href="#_1-1-7-转换样式-transform-style-了解" aria-hidden="true">#</a> 1.1.7. 转换样式 transform-style 了解</h3><p>结合3d立方体案例理解，控制<strong>子元素</strong>是否开启3维立体环境</p><ul><li><code>transform-style: flat;</code> 平面模式 - 不开启3维立体环境</li><li><code>transform-style: preserve-3d;</code> 3维立体环境</li></ul><h3 id="_1-1-8-3d转换总结" tabindex="-1"><a class="header-anchor" href="#_1-1-8-3d转换总结" aria-hidden="true">#</a> 1.1.8. 3D转换总结</h3><ol><li><p>百分比单位都是相对于自身</p></li><li><p>视距、视距原点、转换样式 这三个属性都是给<strong>父元素</strong>添加的</p><p>​</p></li></ol><h2 id="_1-2-css3兼容处理" tabindex="-1"><a class="header-anchor" href="#_1-2-css3兼容处理" aria-hidden="true">#</a> 1.2. css3兼容处理</h2><p>css3涉及到较多的新属性，某些低版本（如ie8以及以下）的浏览器对css3的支持程度不够，因此需要做以下处理</p><p>添加对应的浏览器的前缀 常见前缀如下</p><ul><li>谷歌 -webkit</li><li>火狐 -moz</li><li>IE -ms</li></ul><p>如对 <code>border-radius</code> 进行兼容性处理</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>      <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 30px 10px<span class="token punctuation">;</span>
      <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> 30px 10px<span class="token punctuation">;</span>
      <span class="token property">-ms-border-radius</span><span class="token punctuation">:</span> 30px 10px<span class="token punctuation">;</span>
	  // border-radius 一定要放在最后
      <span class="token property">border-radius</span><span class="token punctuation">:</span> 30px 10px<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果发现添加前缀也解决不了兼容性问题，那么就不要使用该css3属性</p>`,19);function v(_,b){const e=o("RouterLink");return l(),d("div",null,[c,n("p",null,[s("3d转换是改变标签在3"),u,s("上的"),h,s("的一种技术 以下知识点最好结合 "),t(e,{to:"/pages/front-end/h5c3/3d%E6%BC%94%E7%A4%BA%E5%B7%A5%E5%85%B7.html"},{default:r(()=>[s("3d模型工具来理解")]),_:1})]),g,n("p",null,[s("3d缩放 可以控制元素 在 x轴，y轴，z轴上的缩放，也可以理解为 宽，高，厚度的缩放。 结合"),t(e,{to:"/pages/front-end/h5c3/3d%E6%BC%94%E7%A4%BA%E5%B7%A5%E5%85%B7.html"},{default:r(()=>[s("3d模型工具学习")]),_:1})]),m])}const f=i(p,[["render",v],["__file","03-html5css3.html.vue"]]);export{f as default};
