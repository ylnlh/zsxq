import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o,c as l,a as n,d as a,b as p,f as s}from"./app-rpFDZqdF.js";const i={},d=s(`<p>​</p><h4 id="小程序基础第三天" tabindex="-1"><a class="header-anchor" href="#小程序基础第三天" aria-hidden="true">#</a> 小程序基础第三天</h4><hr><h5 id="一、数据绑定" tabindex="-1"><a class="header-anchor" href="#一、数据绑定" aria-hidden="true">#</a> 一、数据绑定</h5><h6 id="_001-如何定义页面的数据" tabindex="-1"><a class="header-anchor" href="#_001-如何定义页面的数据" aria-hidden="true">#</a> 001 - 如何定义页面的数据</h6><ul><li>小程序每个页面，是由 4 部分组成，其中 <code>.js</code> 文件内可以定义页面的数据、生命周期函数、其他业务逻辑</li><li>如果要在 <code>.js</code> 文件内定义页面的数据，只需把数据定义在 <code>data</code> 节点下即可</li></ul><h6 id="_002-mustache-语法格式" tabindex="-1"><a class="header-anchor" href="#_002-mustache-语法格式" aria-hidden="true">#</a> 002 - <code>Mustache</code> 语法格式</h6><blockquote><p>把 <code>data</code> 中的数据绑定到页面中渲染，使用 <code>Mustache</code> 语法(双大括号) 将变量包裹起来即可</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>{{ info }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>Mustache</code> 语法的主要场景 <ul><li>绑定内容</li><li>绑定属性</li><li>运算(三元表达式、算术运算、逻辑判断、字符串运算、数据路径运算)</li></ul></li></ul><h6 id="_003-案例代码" tabindex="-1"><a class="header-anchor" href="#_003-案例代码" aria-hidden="true">#</a> 003 - 案例代码</h6><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 页面结构 --&gt;</span>

<span class="token comment">&lt;!-- 绑定内容和属性 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item-{{id}}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ info }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 算数运算 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>{{ 1 + 1 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 三元表达式 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>{{ id == 10 ? &quot;正确&quot; : &quot;错误&quot; }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 页面数据</span>

<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  	<span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token string">&#39;i miss you&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="二、小程序中的事件" tabindex="-1"><a class="header-anchor" href="#二、小程序中的事件" aria-hidden="true">#</a> 二、小程序中的事件</h5><h6 id="_001-什么是事件" tabindex="-1"><a class="header-anchor" href="#_001-什么是事件" aria-hidden="true">#</a> 001 - 什么是事件</h6><ul><li>事件是视图层到逻辑层的通讯方式</li><li>事件可以将用户的行为反馈到逻辑层中进行处理</li><li>事件可以绑定到组件上，当组件触发事件，就会执行逻辑层中对应的事件处理函数</li><li>事件对象可以携带额外信息，如： <code>id</code>、<code>dataset</code>、 <code>touches</code></li></ul><h6 id="_002-bindtap-绑定触摸事件" tabindex="-1"><a class="header-anchor" href="#_002-bindtap-绑定触摸事件" aria-hidden="true">#</a> 002 - <code>bindtap</code> 绑定触摸事件</h6><ul><li>在小程序中，不存在网页中的 <code>onclick</code> 鼠标点击事件，而是通过 <code>tap</code> 事件来响应触摸行为</li><li>在小程序中，可以通过 <code>input</code> 事件来响应文本框内的输入事件</li><li>使用 <code>bindinput</code> 为文本框绑定输入事件</li></ul><h6 id="_003-data-和-文本框之间的数据同步" tabindex="-1"><a class="header-anchor" href="#_003-data-和-文本框之间的数据同步" aria-hidden="true">#</a> 003 - <code>data</code> 和 文本框之间的数据同步</h6><ul><li>在文本框的 <code>input</code> 事件处理函数中，通过事件参数 <code>event</code> ，能够访问到文本框的最新值</li><li>语法结构 <code>event.detail.value</code></li><li>通过 <code>this.setData(dataObject)</code> 方法，可以把页面中的 <code>data</code> 数据重新赋值</li></ul><h6 id="_004-案例代码" tabindex="-1"><a class="header-anchor" href="#_004-案例代码" aria-hidden="true">#</a> 004 - 案例代码</h6><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 页面结构 --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>handle<span class="token punctuation">&#39;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>warn<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>我是按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">bindinput</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>inputHandle<span class="token punctuation">&#39;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>输入框<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">bindinput</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>datasync<span class="token punctuation">&#39;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>{{ msg }}<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 页面逻辑</span>

<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
   
  <span class="token function-variable function">handle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;按钮绑定的事件&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function-variable function">inputHandle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 数据同步演示</span>
  <span class="token function-variable function">datasync</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// coding...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="三、小程序中的事件传参" tabindex="-1"><a class="header-anchor" href="#三、小程序中的事件传参" aria-hidden="true">#</a> 三、小程序中的事件传参</h5><h6 id="_001-不能再绑定事件的同时传递参数" tabindex="-1"><a class="header-anchor" href="#_001-不能再绑定事件的同时传递参数" aria-hidden="true">#</a> 001 - 不能再绑定事件的同时传递参数</h6><ul><li>小程序的事件传参比较特殊，不能在为组件绑定事件的同时，为事件处理函数传递参数</li><li>小程序会把 <code>bindtap</code> 后指定的值，统一当做事件名称来处理</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 错误做法</span>
<span class="token operator">&lt;</span>button bindtap<span class="token operator">=</span><span class="token string">&#39;eventHandle(123)&#39;</span> type<span class="token operator">=</span><span class="token string">&#39;primary&#39;</span> data<span class="token operator">-</span>info<span class="token operator">=</span><span class="token string">&#39;info&#39;</span><span class="token operator">&gt;</span>传递参数<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_002-通过-data-自定义属性传参" tabindex="-1"><a class="header-anchor" href="#_002-通过-data-自定义属性传参" aria-hidden="true">#</a> 002 - 通过 <code>data-*</code> 自定义属性传参</h6><ul><li>如果要在组件触发事件处理函数的时候，传递参数，可以为组件提供 <code>data-*</code> 自定义属性传参</li></ul><h6 id="_003-获取-data-自定义属性中传递的参数" tabindex="-1"><a class="header-anchor" href="#_003-获取-data-自定义属性中传递的参数" aria-hidden="true">#</a> 003 - 获取 <code>data-*</code> 自定义属性中传递的参数</h6><ul><li>通过事件参数 <code>event-target-dataset.参数名</code>，能够获取 <code>data-*</code> 自定义属性传递到事件处理函数中的参数</li></ul><h6 id="_004-案例代码-1" tabindex="-1"><a class="header-anchor" href="#_004-案例代码-1" aria-hidden="true">#</a> 004 - 案例代码</h6><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 页面结构 --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>eventHandle<span class="token punctuation">&#39;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>primary<span class="token punctuation">&#39;</span></span> <span class="token attr-name">data-info</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>info<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>传递参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 页面逻辑</span>

<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    
  <span class="token function-variable function">eventHandle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>info<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
   
  <span class="token comment">// coding...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="四、-wxs-脚本简介" tabindex="-1"><a class="header-anchor" href="#四、-wxs-脚本简介" aria-hidden="true">#</a> 四、 <code>WXS</code> 脚本简介</h5><h6 id="_001-什么是-wxs" tabindex="-1"><a class="header-anchor" href="#_001-什么是-wxs" aria-hidden="true">#</a> 001 - 什么是 <code>wxs</code></h6><ul><li><code>wxs</code> 是小程序的一套脚本语言，结合 <code>wxml</code> ，可以构建出页面的结构</li></ul><h6 id="_002-wxs-的注意事项" tabindex="-1"><a class="header-anchor" href="#_002-wxs-的注意事项" aria-hidden="true">#</a> 002 - <code>wxs</code> 的注意事项</h6><ul><li>没有兼容性 <ul><li><code>wxs</code> 不依赖于运行时的基础库版本，可以在所有版本的小程序中运行</li></ul></li><li>与 <code>javascript</code> 不同 <ul><li><code>wxs</code> 与 <code>javascript</code> 是不同的语言，有自己的语法，并不和 <code>javascript</code> 一致</li></ul></li><li>隔离性 <ul><li><code>wxs</code> 的运行环境和其他 <code>javascript</code> 代码是隔离的</li><li><code>wxs</code> 中不能调用其他 <code>javascript</code> 文件中定义的函数，也不能调用小程序提供的<code>API</code></li></ul></li><li>不能作为事件回调 <ul><li><code>wxs</code> 函数不能作为组件的事件回调</li></ul></li><li><code>iOS</code>设备上比 <code>javascript</code> 运行快 <ul><li>由于运行环境的差异，在 <code>iOS</code> 设备上小程序内的 <code>wxs</code> 会比 <code>javascript</code> 代码快 2 ~ 20 倍。</li><li>在 <code>android</code> 设备上二者运行效率无差异</li></ul></li></ul><h6 id="_003-wxs-遵循-commonjs-模块化规范" tabindex="-1"><a class="header-anchor" href="#_003-wxs-遵循-commonjs-模块化规范" aria-hidden="true">#</a> 003 - <code>wxs</code> 遵循 <code>CommonJS</code> 模块化规范</h6><blockquote><p><code>CommonJS</code> 是 <code>javascript</code> 的模块化规范之一，小程序的脚本语言 <code>wxs</code> 遵循了 <code>CommonJS</code> 规范，因此，使用 <code>wxs</code> 时的体验和使用 <code>node.js</code> 的体验比较相似。</p></blockquote><ul><li><code>module</code> 对象 <ul><li>每个 <code>wxs</code> 都是独立的模块，每个模块均有一个内置的 module 对象，每个模块都有自己独立的作用域。</li></ul></li><li><code>module.exports</code><ul><li>由于 <code>wxs</code> 拥有独立作用域，所以在一个模块里面定义的变量与函数，默认为私有的，对其他模块不可见，</li><li>通过 <code>module.exports</code> 属性，可以对外共享本模块的私有变量与函数。</li></ul></li><li>require函数 <ul><li>在 <code>wxs</code> 模块中引用其他 <code>wxs</code> 文件模块，可以使用 <code>require</code> 函数。</li></ul></li></ul><hr><h5 id="五、-wxs-基础语法" tabindex="-1"><a class="header-anchor" href="#五、-wxs-基础语法" aria-hidden="true">#</a> 五、 <code>wxs</code> 基础语法</h5><h6 id="_001-使用-module-exports-向外共享成员" tabindex="-1"><a class="header-anchor" href="#_001-使用-module-exports-向外共享成员" aria-hidden="true">#</a> 001 - 使用 <code>module.exports</code> 向外共享成员</h6><ul><li>通过 module.exports 属性，可以对外共享本模块的私有变量与函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> “‘hello world’ from wxs”<span class="token punctuation">;</span> <span class="token comment">// 定义私有变量 foo</span>
<span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 定义私有函数 bar</span>
  <span class="token keyword">return</span> d
<span class="token punctuation">}</span>

<span class="token comment">// 通过 modules.exports 向外共享私有成员</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">FOO</span><span class="token operator">:</span> foo<span class="token punctuation">,</span> <span class="token comment">// 向外共享私有变量 foo</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> ba<span class="token punctuation">,</span> <span class="token comment">// 向外共享私有函数 bar</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// module.exports 中挂载 msg 变量</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>msg <span class="token operator">=</span> “some msg”

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_002-使用-require-引入其它-wxs-模块-以及注意事项" tabindex="-1"><a class="header-anchor" href="#_002-使用-require-引入其它-wxs-模块-以及注意事项" aria-hidden="true">#</a> 002 - 使用 <code>require</code> 引入其它 <code>wxs</code> 模块 以及注意事项</h6><ul><li>在 <code>wxs</code> 模块中引用其他 <code>wxs</code> 文件模块，可以使用 require 函数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用 require 导入 tools.wxs 脚本</span>
<span class="token keyword">var</span> tools <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./tools.wxs&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 得到的 tools 对象，可以直接访问到 tools.wxs 中向外暴露的变量和方法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tools<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项 ：</strong></p><ul><li>只能引用 <code>wxs</code> 文件模块，且<strong>必须使用相对路径</strong></li><li><code>wxs</code> 模块均为单例</li><li><code>wxs</code> 模块在第一次被引用时，会自动初始化为单例对象。</li><li>多个页面，多个地方，多次引用，使用的都是同一个 <code>wxs</code> 模块对象。</li><li>如果一个 <code>wxs</code> 模块在定义之后，一直没有被引用，则该模块不会被解析与运行。</li></ul><h6 id="_003-支持的数据类型" tabindex="-1"><a class="header-anchor" href="#_003-支持的数据类型" aria-hidden="true">#</a> 003 - 支持的数据类型</h6><ul><li><code>WXS</code> 语言目前共有以下8种数据类型： <ul><li><code>number</code> 数值类型</li><li><code>string</code> 字符串类型</li><li><code>boolean</code> 布尔类型</li><li><code>object</code> 对象类型</li><li><code>function</code> 函数类型</li><li><code>array</code> 数组类型</li><li><code>date</code> 日期类型</li><li><code>regexp</code> 正则</li></ul></li></ul><p><strong>注意事项</strong></p><p>注意：由于<code>wxs</code> 与 <code>javascript</code> 是不同的语言，有自己的语法，并不和 <code>javascript</code> 一致，</p><p>所以在使用以上8种数据类型的时候，一定要先翻阅官方文档，再进行使用！</p>`,60),u={href:"https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxs/06datatype.html",target:"_blank",rel:"noopener noreferrer"},r=s(`<hr><h5 id="六、内嵌-wxs-脚本" tabindex="-1"><a class="header-anchor" href="#六、内嵌-wxs-脚本" aria-hidden="true">#</a> 六、内嵌 <code>wxs</code> 脚本</h5><h6 id="_001-使用规则" tabindex="-1"><a class="header-anchor" href="#_001-使用规则" aria-hidden="true">#</a> 001 - 使用规则</h6><ul><li><code>wxs</code> 代码可以编写在 <code>wxml</code> 文件中的 <code>&lt;wxs&gt;&lt;/wxs&gt;</code> 标签内，就像 <code>javascript</code> 代码可以编写在 <code>html</code> 文件中的 <code>&lt;script&gt;&lt;/script&gt;</code> 标签内一样。</li><li><code>wxml</code> 文件中的每个 <code>&lt;wxs&gt;&lt;/wxs&gt;</code> 标签，<strong>必须提供一个 <code>module</code> 属性</strong>，用来指定当前 <code>&lt;wxs&gt;&lt;/wxs&gt;</code> 标签的模块名。在单个 <code>wxml</code> 文件内，建议其值唯一。</li><li>module 属性值的命名必须符合下面两个规则：</li><li>首字符必须是：字母（a-z A-Z），下划线（_）</li><li>剩余字符可以是：字母（a-z A-Z），下划线（_）， 数字（0-9）</li></ul><h6 id="_002-案例代码" tabindex="-1"><a class="header-anchor" href="#_002-案例代码" aria-hidden="true">#</a> 002 - 案例代码</h6><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>{{ info.msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>wxs</span> <span class="token attr-name">module</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>info<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>
  var msg = &#39;我在等风来&#39;

  module.exports = {
    msg: msg
  }
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>wxs</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="七、外联-wxs-脚本文件" tabindex="-1"><a class="header-anchor" href="#七、外联-wxs-脚本文件" aria-hidden="true">#</a> 七、外联 <code>wxs</code> 脚本文件</h5><h6 id="_001-使用规则-1" tabindex="-1"><a class="header-anchor" href="#_001-使用规则-1" aria-hidden="true">#</a> 001 - 使用规则</h6><ul><li><code>wxs</code> 代码可以编写在以 <code>.wxs</code> 为后缀名的文件内，就像 j<code>avascript</code> 代码可以编写在以 <code>.js</code> 为后缀名文件中一样。</li><li>在 <code>wxml</code> 中如果要引入外联的 <code>wxs</code> 脚本，必须为 <code>&lt;wxs&gt;&lt;/wxs&gt;</code> 标签添加 <code>module</code> 和 <code>src</code> 属性。 <ul><li><code>module</code> 用来为 <code>&lt;wxs&gt;&lt;/wxs&gt;</code> 标签指定模块名，作为当前页面访问这个模块的标识名称；</li><li><code>src</code> 用来指定当前 <code>&lt;wxs&gt;&lt;/wxs&gt;</code> 标签要引入的脚本路径，必须是相对路径；</li></ul></li></ul><h6 id="_002-案例代码-1" tabindex="-1"><a class="header-anchor" href="#_002-案例代码-1" aria-hidden="true">#</a> 002 - 案例代码</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .wxs 文件</span>

<span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">&#39;风铃响,故人归&#39;</span>
<span class="token keyword">var</span> <span class="token function-variable function">handle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> params
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">msg</span><span class="token operator">:</span> msg<span class="token punctuation">,</span>
  <span class="token literal-property property">handle</span><span class="token operator">:</span> handle
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>wxs</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>./ling.wxs<span class="token punctuation">&#39;</span></span> <span class="token attr-name">module</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>feng<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>wxs</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>{{ feng.msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>{{ feng.handle(&#39;我在等风&#39;) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：在 <code>wxs</code>中不要使用高级的<code>JS</code>语法</strong></p><hr><h5 id="八、条件渲染" tabindex="-1"><a class="header-anchor" href="#八、条件渲染" aria-hidden="true">#</a> 八、条件渲染</h5><h6 id="_001-wx-if" tabindex="-1"><a class="header-anchor" href="#_001-wx-if" aria-hidden="true">#</a> 001 - <code>wx:if</code></h6><ul><li>在小程序中，使用 <code>wx:if=&quot;{{condition}}&quot; </code>来判断是否需要渲染该代码块</li><li>也可以用 <code>wx:elif</code> 和 <code>wx:else</code> 来添加一个 else 块</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>{{id &lt; 10}}<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>elif</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>{{id == 10}}<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>else</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>{{id &gt; 10}}<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>CSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_002-block-wx-if" tabindex="-1"><a class="header-anchor" href="#_002-block-wx-if" aria-hidden="true">#</a> 002 - <code>block wx:if</code></h6><ul><li>因为 <code>wx:if</code> 是一个控制属性，需要将它添加到一个标签上。</li><li>如果要一次性判断多个组件标签，可以使用一个 <code>&lt;block&gt;&lt;/block&gt;</code> 标签将多个组件包装起来，并在上边使用 <code>wx:if</code> 控制属性。</li><li><strong><code>&lt;block/&gt;</code> 并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。</strong></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>{{ id == 10 }}<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>CSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_003-hidden" tabindex="-1"><a class="header-anchor" href="#_003-hidden" aria-hidden="true">#</a> 003 - hidden</h6><ul><li>使用 <code>hidden=&quot;{{condition}}&quot;</code> 也能控制元素的显示与隐藏</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>{{ id &gt; 10 }}<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>前端三板斧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_004-hidden-和-wx-if-的区别" tabindex="-1"><a class="header-anchor" href="#_004-hidden-和-wx-if-的区别" aria-hidden="true">#</a> 004 - hidden 和 <code>wx:if</code> 的区别</h6><ul><li>被 <code>wx:if</code> 控制的区域，框架有一个局部渲染的过程，会根据控制条件的改变，动态创建或销毁对应的 <code>UI</code>结构。</li><li><code>wx:if</code> 是惰性的，如果在初始渲染条件为 false，框架什么也不做，在条件第一次变成真的时候才开始局部渲染。</li><li>相比之下，hidden 就简单的多，组件始终会被渲染，只是简单的控制显示与隐藏。</li><li><strong>总结：</strong><code>wx:if</code> 有更高的切换消耗而 hidden 有更高的初始渲染消耗。因此，如果需要频繁切换的情景下，用 hidden 更好，如果在运行时条件不大可能改变则 <code>wx:if</code> 较好。</li></ul><h5 id="九、列表渲染" tabindex="-1"><a class="header-anchor" href="#九、列表渲染" aria-hidden="true">#</a> 九、列表渲染</h5><h6 id="_001-wx-for" tabindex="-1"><a class="header-anchor" href="#_001-wx-for" aria-hidden="true">#</a> 001 - wx:for</h6><ul><li>在组件上使用 <code>wx:for</code> 控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。</li><li>默认数组的当前项的下标变量名默认为 <code>index</code>，数组当前项的变量名默认为 <code>item</code>。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>{{ arr }}<span class="token punctuation">&#39;</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>index<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>
  我是{{ item }} -- 索引是 {{ index }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_002-block-wx-for" tabindex="-1"><a class="header-anchor" href="#_002-block-wx-for" aria-hidden="true">#</a> 002 - <code>block wx:for</code></h6><ul><li><code>wx:for</code> 可以用在 <code>&lt;block&gt;&lt;/block&gt;</code> 标签上，以渲染一个包含多节点的结构块。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>{{ arr }}<span class="token punctuation">&#39;</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>index<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>值：{{item}} -- 索引{{index}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_003-指定索引和当前项的变量名" tabindex="-1"><a class="header-anchor" href="#_003-指定索引和当前项的变量名" aria-hidden="true">#</a> 003 - 指定索引和当前项的变量名</h6><ul><li>使用 <code>wx:for-item</code> 可以指定数组当前元素的变量名</li><li>使用 <code>wx:for-index</code> 可以指定数组当前下标的变量名，</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>{{ arr }}<span class="token punctuation">&#39;</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>foritem<span class="token punctuation">&#39;</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>forindex<span class="token punctuation">&#39;</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>index<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>
  我是{{ foritem }} -- 索引是 {{ forindex }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_004-列表渲染中的-wx-key" tabindex="-1"><a class="header-anchor" href="#_004-列表渲染中的-wx-key" aria-hidden="true">#</a> 004 - 列表渲染中的 <code>wx:key</code></h6><ol><li><code>wx:key</code> 的作用说明</li></ol><ul><li><p>如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如 <code>&lt;input/&gt;</code> 中的输入内容，<code>&lt;checkbox/&gt;</code> 的选中状态），需要使用 <code>wx:key</code> 来指定列表中项目的唯一的标识符。</p></li><li><p>当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，<strong>框架会确保他们被重新排序，而不是重新创建</strong>，以确保使组件保持自身的状态，并且提高列表渲染时的效率。</p></li></ul><ol start="2"><li><code>wx:key</code> 的注意事项</li></ol><ul><li><code>key</code> 值必须具有唯一性，且不能动态改变</li><li><code>key</code> 的值必须是数字或字符串</li><li>保留关键字 <code>*this</code> 代表在 <code>for</code> 循环中的 <code>item</code> 本身，它也可以充当 <code>key</code> 值，但是有以下限制：需要 <code>item</code> 本身是一个唯一的字符串或者数字。</li><li>如不提供 <code>wx:key</code>，会报一个 <code>warning</code>， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。</li></ul><h5 id="十、下拉刷新" tabindex="-1"><a class="header-anchor" href="#十、下拉刷新" aria-hidden="true">#</a> 十、下拉刷新</h5><h6 id="_001-下拉刷新的概念以及场景" tabindex="-1"><a class="header-anchor" href="#_001-下拉刷新的概念以及场景" aria-hidden="true">#</a> 001 - 下拉刷新的概念以及场景</h6><ul><li>概念：下拉刷新是移动端更新列表数据的交互行为，用户通过手指在屏幕上自上而下的滑动，可以触发页面的下拉刷新，更新列表数据。</li><li>应用场景：在移动端，数据列表是常见的页面效果，更新列表数据是最基本的页面需求，相比于按钮刷新、定时刷新来说，下拉刷新的用户体验方便友好，已经成为移动端刷新列表数据的最佳解决方案。</li></ul><h6 id="_002-如何启动下拉刷新" tabindex="-1"><a class="header-anchor" href="#_002-如何启动下拉刷新" aria-hidden="true">#</a> 002 - 如何启动下拉刷新</h6><ul><li>在 <code>app.json</code> 的 <code>window</code> 选项中或页面配置中开启 <code>enablePullDownRefresh</code>。</li><li>可以通过 <code>wx.startPullDownRefresh()</code> 触发下拉刷新，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致。</li></ul><p><strong>注意： 一般情况下，推荐在页面配置中为需要的页面单独开启下拉刷新行为</strong></p><h6 id="_003-设置下拉刷新窗口的样式" tabindex="-1"><a class="header-anchor" href="#_003-设置下拉刷新窗口的样式" aria-hidden="true">#</a> 003 - 设置下拉刷新窗口的样式</h6><ul><li>在 <code>app.json</code> 的 <code>window</code> 选项中或页面配置中修改 <code>backgroundColor</code> 和 <code>backgroundTextStyle</code> 选项。</li><li><code>backgroundColor</code> 用来配置下拉刷新窗口的背景颜色，仅支持16进制颜色值</li><li><code>backgroundTextStyle</code> 用来配置下拉刷新 <code>loading</code> 的样式，仅支持 <code>dark</code> 和 <code>light</code></li></ul><h6 id="_004-监听下拉刷新事件" tabindex="-1"><a class="header-anchor" href="#_004-监听下拉刷新事件" aria-hidden="true">#</a> 004 - 监听下拉刷新事件</h6><blockquote><p>需要先开启下拉刷新</p></blockquote><ul><li>为页面添加 <code>onPullDownRefresh()</code> 函数，可以监听用户在当前页面的下拉刷新事件。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 页面相关事件处理函数--监听用户下拉动作
 */</span>
<span class="token function-variable function">onPullDownRefresh</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;触发下拉刷新啦&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_005-停止下拉刷新" tabindex="-1"><a class="header-anchor" href="#_005-停止下拉刷新" aria-hidden="true">#</a> 005 - 停止下拉刷新</h6><ul><li>处理完下拉刷新后，下拉刷新的 loading 效果会一直显示，不会主动消失，</li><li>因此需要手动隐藏下拉刷新的 loading 效果，调用 <code>wx.stopPullDownRefresh()</code> 可以停止当前页面的下拉刷新。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 页面相关事件处理函数--监听用户下拉动作
 */</span>
<span class="token function-variable function">onPullDownRefresh</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;触发下拉刷新啦&#39;</span><span class="token punctuation">)</span>
    
  wx<span class="token punctuation">.</span><span class="token function">stopPullDownRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="十一、-上拉刷新" tabindex="-1"><a class="header-anchor" href="#十一、-上拉刷新" aria-hidden="true">#</a> 十一、 上拉刷新</h5><h6 id="_001-上拉刷新的概念以及场景" tabindex="-1"><a class="header-anchor" href="#_001-上拉刷新的概念以及场景" aria-hidden="true">#</a> 001 - 上拉刷新的概念以及场景</h6><ul><li>概念：在移动端，随着手指不断向上滑动，当内容将要到达屏幕底部的时候，页面会随之不断的加载后续内容，直到没有新内容为止，我们称之为上拉加载更多。上拉加载更多的本质就是数据的分页加载。</li><li>应用场景：在移动端，列表数据的分页加载，首选的实现方式就是上拉加载更多。</li></ul><h6 id="_002-设置上拉刷新的距离" tabindex="-1"><a class="header-anchor" href="#_002-设置上拉刷新的距离" aria-hidden="true">#</a> 002 - 设置上拉刷新的距离</h6><ul><li>在 <code>app.json</code> 的 <code>window</code>选项中或页面配置中设置触底距离 <code>onReachBottomDistance</code>。单位为<code>px</code>，默认触底距离为 <code>50px</code>。</li><li>为页面添加 <code>onReachBottom()</code> 函数，可以监听用户在当前页面的上拉触底事件，从而实现上拉加载更多列表数据的效果。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 页面上拉触底事件的处理函数
 */</span>
<span class="token function-variable function">onReachBottom</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;触发上拉刷新啦&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="十二、-其他事件" tabindex="-1"><a class="header-anchor" href="#十二、-其他事件" aria-hidden="true">#</a> 十二、 其他事件</h5><h6 id="_001-页面滑动事件onpagescroll" tabindex="-1"><a class="header-anchor" href="#_001-页面滑动事件onpagescroll" aria-hidden="true">#</a> 001 - 页面滑动事件<code>onPageScroll</code></h6><ul><li>监听用户滑动页面事件 <ul><li>得到 <code>scrollTop</code>，页面在垂直方向已滚动的距离（单位<code>px</code>）</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">onPageScroll</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_002-分享事件-onshareappmessage" tabindex="-1"><a class="header-anchor" href="#_002-分享事件-onshareappmessage" aria-hidden="true">#</a> 002 - 分享事件 <code>onShareAppMessage</code></h6><ul><li>监听用户点击页面内转发按钮（<code>&lt;button&gt; 组件 open-type=&quot;share&quot;</code>）</li><li>右上角菜单“转发”按钮的行为，并自定义转发内容。</li></ul><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>from</code></td><td style="text-align:center;"><code>String</code></td><td style="text-align:center;">转发事件来源。button：页面内转发按钮；menu：右上角转发菜单</td></tr><tr><td style="text-align:center;"><code>target</code></td><td style="text-align:center;"><code>Object</code></td><td style="text-align:center;">如果 from 值是 button，则 target 是触发这次转发事件的 button，否则为 undefined</td></tr><tr><td style="text-align:center;"><code>webViewUrl</code></td><td style="text-align:center;"><code>String</code></td><td style="text-align:center;">页面中包含web-view组件时，返回当前web-view的url</td></tr></tbody></table><ul><li>自定义转发内容， return 一个 Object 就可以</li></ul><table><thead><tr><th style="text-align:center;">字段</th><th style="text-align:center;">说明</th><th style="text-align:center;">默认值</th></tr></thead><tbody><tr><td style="text-align:center;"><code>title</code></td><td style="text-align:center;">转发标题</td><td style="text-align:center;">当前小程序名称</td></tr><tr><td style="text-align:center;"><code>path</code></td><td style="text-align:center;">转发路径</td><td style="text-align:center;">当前页面 path ，必须是以 / 开头的完整路径</td></tr><tr><td style="text-align:center;"><code>imageUrl</code></td><td style="text-align:center;">自定义图片路径，可以是本地文件路径、代码包文件路径或者网络图片路径。支持<code>PNG</code>及<code>JPG</code>。显示图片长宽比是 5:4。</td><td style="text-align:center;">使用默认截图</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">onShareAppMessage</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>from <span class="token operator">===</span> <span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 来自页面内转发按钮</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>target<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;自定义转发标题&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/page/user?id=123&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_003-点击-tab-时触发事件-ontabitemtap" tabindex="-1"><a class="header-anchor" href="#_003-点击-tab-时触发事件-ontabitemtap" aria-hidden="true">#</a> 003 - 点击 tab 时触发事件 <code>onTabItemTap</code></h6><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>index</code></td><td style="text-align:center;"><code>String</code></td><td style="text-align:center;">被点击 <code>tabItem</code> 的序号，从0开始</td></tr><tr><td style="text-align:center;"><code>pagePath</code></td><td style="text-align:center;"><code>String</code></td><td style="text-align:center;">被点击<code>tabItem</code> 的页面路径</td></tr><tr><td style="text-align:center;"><code>text</code></td><td style="text-align:center;"><code>String</code></td><td style="text-align:center;">被点击 <code>tabItem</code> 的按钮文字</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">onTabItemTap</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>index<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>pagePath<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,77);function k(v,m){const e=c("ExternalLinkIcon");return o(),l("div",null,[d,n("p",null,[n("strong",null,[a("参考文档： "),n("a",u,[a("数据类型"),p(e)])])]),r])}const b=t(i,[["render",k],["__file","03-小程序基础.html.vue"]]);export{b as default};
