import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as d,a as r,F as s,g as l,f as n,h,d as c,t as u}from"./app-tt0ZouaX.js";const o={},v=n(`<p>​</p><h2 id="vue全家桶之组件化开发" tabindex="-1"><a class="header-anchor" href="#vue全家桶之组件化开发" aria-hidden="true">#</a> Vue全家桶之组件化开发</h2><h2 id="contents" tabindex="-1"><a class="header-anchor" href="#contents" aria-hidden="true">#</a> Contents</h2><h1 id="目-◆-组件化开发思想" tabindex="-1"><a class="header-anchor" href="#目-◆-组件化开发思想" aria-hidden="true">#</a> 目 ◆ 组件化开发思想</h1><h5 id="◆-组件注册" tabindex="-1"><a class="header-anchor" href="#◆-组件注册" aria-hidden="true">#</a> ◆ 组件注册</h5><h5 id="◆-vue调试工具用法" tabindex="-1"><a class="header-anchor" href="#◆-vue调试工具用法" aria-hidden="true">#</a> ◆ Vue调试工具用法</h5><h5 id="◆-组件间数据交互" tabindex="-1"><a class="header-anchor" href="#◆-组件间数据交互" aria-hidden="true">#</a> ◆ 组件间数据交互</h5><h5 id="◆-组件插槽" tabindex="-1"><a class="header-anchor" href="#◆-组件插槽" aria-hidden="true">#</a> ◆ 组件插槽</h5><h5 id="◆-基于组件的案例" tabindex="-1"><a class="header-anchor" href="#◆-基于组件的案例" aria-hidden="true">#</a> ◆ 基于组件的案例</h5><h3 id="_1-组件化开发思想" tabindex="-1"><a class="header-anchor" href="#_1-组件化开发思想" aria-hidden="true">#</a> 1. 组件化开发思想</h3><h4 id="_1-1-现实中的组件化思想体现" tabindex="-1"><a class="header-anchor" href="#_1-1-现实中的组件化思想体现" aria-hidden="true">#</a> 1.1 现实中的组件化思想体现</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>⚫ 标准
⚫ 分治
⚫ 重用
⚫ 组合
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-组件化开发思想-1" tabindex="-1"><a class="header-anchor" href="#_1-组件化开发思想-1" aria-hidden="true">#</a> 1. 组件化开发思想</h3><h4 id="_1-2-编程中的组件化思想体现" tabindex="-1"><a class="header-anchor" href="#_1-2-编程中的组件化思想体现" aria-hidden="true">#</a> 1.2 编程中的组件化思想体现</h4><h3 id="_1-组件化开发思想-2" tabindex="-1"><a class="header-anchor" href="#_1-组件化开发思想-2" aria-hidden="true">#</a> 1. 组件化开发思想</h3><h4 id="_1-3-组件化规范-web-components" tabindex="-1"><a class="header-anchor" href="#_1-3-组件化规范-web-components" aria-hidden="true">#</a> 1.3 组件化规范: Web Components</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>⚫ 我们希望尽可能多的重用代码
⚫ 自定义组件的方式不太容易（html、css和js）
⚫ 多次使用组件可能导致冲突
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="官网-https-developer-mozilla-org-zh-cn-docs-web-web-components" tabindex="-1"><a class="header-anchor" href="#官网-https-developer-mozilla-org-zh-cn-docs-web-web-components" aria-hidden="true">#</a> 官网：https://developer.mozilla.org/zh-CN/docs/Web/Web_Components</h4><h4 id="web-components-通过创建封装好功能的定制元素解决上述问题" tabindex="-1"><a class="header-anchor" href="#web-components-通过创建封装好功能的定制元素解决上述问题" aria-hidden="true">#</a> Web Components 通过创建封装好功能的定制元素解决上述问题</h4><h4 id="vue部分实现了上述规范" tabindex="-1"><a class="header-anchor" href="#vue部分实现了上述规范" aria-hidden="true">#</a> Vue部分实现了上述规范</h4><h2 id="contents-1" tabindex="-1"><a class="header-anchor" href="#contents-1" aria-hidden="true">#</a> Contents</h2><h1 id="目-◆-组件化开发思想-1" tabindex="-1"><a class="header-anchor" href="#目-◆-组件化开发思想-1" aria-hidden="true">#</a> 目 ◆ 组件化开发思想</h1><h5 id="◆-组件注册-1" tabindex="-1"><a class="header-anchor" href="#◆-组件注册-1" aria-hidden="true">#</a> ◆ 组件注册</h5><h5 id="◆-vue调试工具用法-1" tabindex="-1"><a class="header-anchor" href="#◆-vue调试工具用法-1" aria-hidden="true">#</a> ◆ Vue调试工具用法</h5><h5 id="◆-组件间数据交互-1" tabindex="-1"><a class="header-anchor" href="#◆-组件间数据交互-1" aria-hidden="true">#</a> ◆ 组件间数据交互</h5><h5 id="◆-组件插槽-1" tabindex="-1"><a class="header-anchor" href="#◆-组件插槽-1" aria-hidden="true">#</a> ◆ 组件插槽</h5><h5 id="◆-基于组件的案例-1" tabindex="-1"><a class="header-anchor" href="#◆-基于组件的案例-1" aria-hidden="true">#</a> ◆ 基于组件的案例</h5><h3 id="_2-组件注册" tabindex="-1"><a class="header-anchor" href="#_2-组件注册" aria-hidden="true">#</a> 2. 组件注册</h3><h4 id="_2-1-全局组件注册语法" tabindex="-1"><a class="header-anchor" href="#_2-1-全局组件注册语法" aria-hidden="true">#</a> 2.1 全局组件注册语法</h4><p>Vue.component(组件名称, { data: 组件数据, template: 组件模板内容 })</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 注册一个名为 button-counter 的新组件
Vue.component(&#39;button-counter&#39;, {
data: function () {
return {
count: 0
}
},
template: &#39;&lt;button v-on:click=&quot;count++&quot;&gt;点击了{{ count }}次.&lt;/button&gt;&#39;
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-组件注册-1" tabindex="-1"><a class="header-anchor" href="#_2-组件注册-1" aria-hidden="true">#</a> 2. 组件注册</h3><h4 id="_2-2-组件用法" tabindex="-1"><a class="header-anchor" href="#_2-2-组件用法" aria-hidden="true">#</a> 2.2 组件用法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;div id=&quot;app&quot;&gt;
&lt;button-counter&gt;&lt;/button-counter&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;div id=&quot;app&quot;&gt;
&lt;button-counter&gt;&lt;/button-counter&gt;
&lt;button-counter&gt;&lt;/button-counter&gt;
&lt;button-counter&gt;&lt;/button-counter&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-组件注册-2" tabindex="-1"><a class="header-anchor" href="#_2-组件注册-2" aria-hidden="true">#</a> 2. 组件注册</h3><h4 id="_2-3-组件注册注意事项" tabindex="-1"><a class="header-anchor" href="#_2-3-组件注册注意事项" aria-hidden="true">#</a> 2.3 组件注册注意事项</h4><h5 id="_1-data必须是一个函数" tabindex="-1"><a class="header-anchor" href="#_1-data必须是一个函数" aria-hidden="true">#</a> 1. data必须是一个函数</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>⚫ 分析函数与普通对象的对比
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-组件模板内容必须是单个跟元素" tabindex="-1"><a class="header-anchor" href="#_2-组件模板内容必须是单个跟元素" aria-hidden="true">#</a> 2. 组件模板内容必须是单个跟元素</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>⚫ 分析演示实际的效果
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-组件模板内容可以是模板字符串" tabindex="-1"><a class="header-anchor" href="#_3-组件模板内容可以是模板字符串" aria-hidden="true">#</a> 3. 组件模板内容可以是模板字符串</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>⚫ 模板字符串需要浏览器提供支持（ES6语法）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-组件注册-3" tabindex="-1"><a class="header-anchor" href="#_2-组件注册-3" aria-hidden="true">#</a> 2. 组件注册</h3><h4 id="_2-3-组件注册注意事项-1" tabindex="-1"><a class="header-anchor" href="#_2-3-组件注册注意事项-1" aria-hidden="true">#</a> 2.3 组件注册注意事项</h4><h5 id="_4-组件命名方式" tabindex="-1"><a class="header-anchor" href="#_4-组件命名方式" aria-hidden="true">#</a> 4. 组件命名方式</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>⚫ 短横线方式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>⚫ 驼峰方式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Vue.component(&#39;my-component&#39;, { /* ... */ })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Vue.component(&#39;MyComponent&#39;, { /* ... */ })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-组件注册-4" tabindex="-1"><a class="header-anchor" href="#_2-组件注册-4" aria-hidden="true">#</a> 2. 组件注册</h3><h4 id="_2-4-局部组件注册" tabindex="-1"><a class="header-anchor" href="#_2-4-局部组件注册" aria-hidden="true">#</a> 2.4 局部组件注册</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var ComponentA = { /* ... */ }
var ComponentB = { /* ... */ }
var ComponentC = { /* ... */ }
new Vue({
el: &#39;#app&#39;
components: {
&#39;component-a&#39;: ComponentA,
&#39;component-b&#39;: ComponentB,
&#39;component-c&#39;: ComponentC,
}
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="contents-2" tabindex="-1"><a class="header-anchor" href="#contents-2" aria-hidden="true">#</a> Contents</h2><h1 id="目-◆-组件化开发思想-2" tabindex="-1"><a class="header-anchor" href="#目-◆-组件化开发思想-2" aria-hidden="true">#</a> 目 ◆ 组件化开发思想</h1><h5 id="◆-组件注册-2" tabindex="-1"><a class="header-anchor" href="#◆-组件注册-2" aria-hidden="true">#</a> ◆ 组件注册</h5><h5 id="◆-vue调试工具用法-2" tabindex="-1"><a class="header-anchor" href="#◆-vue调试工具用法-2" aria-hidden="true">#</a> ◆ Vue调试工具用法</h5><h5 id="◆-组件间数据交互-2" tabindex="-1"><a class="header-anchor" href="#◆-组件间数据交互-2" aria-hidden="true">#</a> ◆ 组件间数据交互</h5><h5 id="◆-组件插槽-2" tabindex="-1"><a class="header-anchor" href="#◆-组件插槽-2" aria-hidden="true">#</a> ◆ 组件插槽</h5><h5 id="◆-基于组件的案例-2" tabindex="-1"><a class="header-anchor" href="#◆-基于组件的案例-2" aria-hidden="true">#</a> ◆ 基于组件的案例</h5><h3 id="_3-vue调试工具" tabindex="-1"><a class="header-anchor" href="#_3-vue调试工具" aria-hidden="true">#</a> 3. Vue调试工具</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>① 克隆仓库
② 安装依赖包
③ 构建
④ 打开Chrome扩展页面
⑤ 选中开发者模式
⑥ 加载已解压的扩展，选择shells/chrome
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-1-调试工具安装" tabindex="-1"><a class="header-anchor" href="#_3-1-调试工具安装" aria-hidden="true">#</a> 3.1 调试工具安装</h4><h3 id="_3-vue调试工具-1" tabindex="-1"><a class="header-anchor" href="#_3-vue调试工具-1" aria-hidden="true">#</a> 3. Vue调试工具</h3><h4 id="_3-2-调试工具用法" tabindex="-1"><a class="header-anchor" href="#_3-2-调试工具用法" aria-hidden="true">#</a> 3.2 调试工具用法</h4><h2 id="contents-3" tabindex="-1"><a class="header-anchor" href="#contents-3" aria-hidden="true">#</a> Contents</h2><h1 id="目-◆-组件化开发思想-3" tabindex="-1"><a class="header-anchor" href="#目-◆-组件化开发思想-3" aria-hidden="true">#</a> 目 ◆ 组件化开发思想</h1><h5 id="◆-组件注册-3" tabindex="-1"><a class="header-anchor" href="#◆-组件注册-3" aria-hidden="true">#</a> ◆ 组件注册</h5><h5 id="◆-vue调试工具用法-3" tabindex="-1"><a class="header-anchor" href="#◆-vue调试工具用法-3" aria-hidden="true">#</a> ◆ Vue调试工具用法</h5><h5 id="◆-组件间数据交互-3" tabindex="-1"><a class="header-anchor" href="#◆-组件间数据交互-3" aria-hidden="true">#</a> ◆ 组件间数据交互</h5><h5 id="◆-组件插槽-3" tabindex="-1"><a class="header-anchor" href="#◆-组件插槽-3" aria-hidden="true">#</a> ◆ 组件插槽</h5><h5 id="◆-基于组件的案例-3" tabindex="-1"><a class="header-anchor" href="#◆-基于组件的案例-3" aria-hidden="true">#</a> ◆ 基于组件的案例</h5><h3 id="_4-组件间数据交互" tabindex="-1"><a class="header-anchor" href="#_4-组件间数据交互" aria-hidden="true">#</a> 4. 组件间数据交互</h3><h5 id="_1-组件内部通过props接收传递过来的值" tabindex="-1"><a class="header-anchor" href="#_1-组件内部通过props接收传递过来的值" aria-hidden="true">#</a> 1. 组件内部通过props接收传递过来的值</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Vue.component(‘menu-item&#39;, {
props: [&#39;title&#39;],
template: &#39;&lt;div&gt;{{ title }}&lt;/div&gt;&#39;
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-父组件通过属性将值传递给子组件" tabindex="-1"><a class="header-anchor" href="#_2-父组件通过属性将值传递给子组件" aria-hidden="true">#</a> 2. 父组件通过属性将值传递给子组件</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;menu-item title=&quot;来自父组件的数据&quot;&gt;&lt;/menu-item&gt;
&lt;menu-item :title=&quot;title&quot;&gt;&lt;/menu-item&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-父组件向子组件传值" tabindex="-1"><a class="header-anchor" href="#_4-1-父组件向子组件传值" aria-hidden="true">#</a> 4.1 父组件向子组件传值</h4><h3 id="_4-组件间数据交互-1" tabindex="-1"><a class="header-anchor" href="#_4-组件间数据交互-1" aria-hidden="true">#</a> 4. 组件间数据交互</h3><h5 id="_3-props属性名规则" tabindex="-1"><a class="header-anchor" href="#_3-props属性名规则" aria-hidden="true">#</a> 3. props属性名规则</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Vue.component(‘menu-item&#39;, {
// 在 JavaScript 中是驼峰式的
props: [‘menuTitle&#39;],
template: &#39;&lt;div&gt;{{ menuTitle }}&lt;/div&gt;&#39;
})
&lt;!– 在html中是短横线方式的 --&gt;
&lt;menu-item menu-title=“nihao&quot;&gt;&lt;/menu-item&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-父组件向子组件传值-1" tabindex="-1"><a class="header-anchor" href="#_4-1-父组件向子组件传值-1" aria-hidden="true">#</a> 4.1 父组件向子组件传值</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>⚫ 在props中使用驼峰形式，模板中需要使用短横线的形式
⚫ 字符串形式的模板中没有这个限制
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-组件间数据交互-2" tabindex="-1"><a class="header-anchor" href="#_4-组件间数据交互-2" aria-hidden="true">#</a> 4. 组件间数据交互</h3><h5 id="_4-props属性值类型" tabindex="-1"><a class="header-anchor" href="#_4-props属性值类型" aria-hidden="true">#</a> 4. props属性值类型</h5><h4 id="_4-1-父组件向子组件传值-2" tabindex="-1"><a class="header-anchor" href="#_4-1-父组件向子组件传值-2" aria-hidden="true">#</a> 4.1 父组件向子组件传值</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>⚫ 字符串 String
⚫ 数值 Number
⚫ 布尔值 Boolean
⚫ 数组 Array
⚫ 对象 Object
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-组件间数据交互-3" tabindex="-1"><a class="header-anchor" href="#_4-组件间数据交互-3" aria-hidden="true">#</a> 4. 组件间数据交互</h3><h5 id="_1-子组件通过自定义事件向父组件传递信息" tabindex="-1"><a class="header-anchor" href="#_1-子组件通过自定义事件向父组件传递信息" aria-hidden="true">#</a> 1. 子组件通过自定义事件向父组件传递信息</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;button v-on:click=&#39;$emit(&quot;enlarge-text&quot;) &#39;&gt;扩大字体&lt;/button&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-父组件监听子组件的事件" tabindex="-1"><a class="header-anchor" href="#_2-父组件监听子组件的事件" aria-hidden="true">#</a> 2. 父组件监听子组件的事件</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;menu-item v-on:enlarge-text=&#39;fontSize += 0.1&#39;&gt;&lt;/menu-item&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-2-子组件向父组件传值" tabindex="-1"><a class="header-anchor" href="#_4-2-子组件向父组件传值" aria-hidden="true">#</a> 4.2 子组件向父组件传值</h4><h3 id="_4-组件间数据交互-4" tabindex="-1"><a class="header-anchor" href="#_4-组件间数据交互-4" aria-hidden="true">#</a> 4. 组件间数据交互</h3><h5 id="_3-子组件通过自定义事件向父组件传递信息" tabindex="-1"><a class="header-anchor" href="#_3-子组件通过自定义事件向父组件传递信息" aria-hidden="true">#</a> 3. 子组件通过自定义事件向父组件传递信息</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;button v-on:click=&#39;$emit(&quot;enlarge-text&quot;, 0.1) &#39;&gt;扩大字体&lt;/button&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4-父组件监听子组件的事件" tabindex="-1"><a class="header-anchor" href="#_4-父组件监听子组件的事件" aria-hidden="true">#</a> 4. 父组件监听子组件的事件</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;menu-item v-on:enlarge-text=&#39;fontSize += $event&#39;&gt;&lt;/menu-item&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-2-子组件向父组件传值-1" tabindex="-1"><a class="header-anchor" href="#_4-2-子组件向父组件传值-1" aria-hidden="true">#</a> 4.2 子组件向父组件传值</h4><h3 id="_4-组件间数据交互-5" tabindex="-1"><a class="header-anchor" href="#_4-组件间数据交互-5" aria-hidden="true">#</a> 4. 组件间数据交互</h3><h4 id="_4-3-非父子组件间传值" tabindex="-1"><a class="header-anchor" href="#_4-3-非父子组件间传值" aria-hidden="true">#</a> 4.3 非父子组件间传值</h4><h5 id="_2-监听事件与销毁事件" tabindex="-1"><a class="header-anchor" href="#_2-监听事件与销毁事件" aria-hidden="true">#</a> 2. 监听事件与销毁事件</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var eventHub = new Vue()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eventHub.$on(&#39;add-todo&#39;, addTodo)
eventHub.$off(&#39;add-todo&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-触发事件" tabindex="-1"><a class="header-anchor" href="#_3-触发事件" aria-hidden="true">#</a> 3. 触发事件</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eventHub.$emit(‘add-todo&#39;, id)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-单独的事件中心管理组件间的通信-事件中心" tabindex="-1"><a class="header-anchor" href="#_1-单独的事件中心管理组件间的通信-事件中心" aria-hidden="true">#</a> 1. 单独的事件中心管理组件间的通信 事件中心</h4><h4 id="组件a-组件b" tabindex="-1"><a class="header-anchor" href="#组件a-组件b" aria-hidden="true">#</a> 组件A 组件B</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>触发
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>触发
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>监听
监听
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="contents-4" tabindex="-1"><a class="header-anchor" href="#contents-4" aria-hidden="true">#</a> Contents</h2><h1 id="目-◆-组件化开发思想-4" tabindex="-1"><a class="header-anchor" href="#目-◆-组件化开发思想-4" aria-hidden="true">#</a> 目 ◆ 组件化开发思想</h1><h5 id="◆-组件注册-4" tabindex="-1"><a class="header-anchor" href="#◆-组件注册-4" aria-hidden="true">#</a> ◆ 组件注册</h5><h5 id="◆-vue调试工具用法-4" tabindex="-1"><a class="header-anchor" href="#◆-vue调试工具用法-4" aria-hidden="true">#</a> ◆ Vue调试工具用法</h5><h5 id="◆-组件间数据交互-4" tabindex="-1"><a class="header-anchor" href="#◆-组件间数据交互-4" aria-hidden="true">#</a> ◆ 组件间数据交互</h5><h5 id="◆-组件插槽-4" tabindex="-1"><a class="header-anchor" href="#◆-组件插槽-4" aria-hidden="true">#</a> ◆ 组件插槽</h5><h5 id="◆-基于组件的案例-4" tabindex="-1"><a class="header-anchor" href="#◆-基于组件的案例-4" aria-hidden="true">#</a> ◆ 基于组件的案例</h5><h3 id="_4-组件间数据交互-6" tabindex="-1"><a class="header-anchor" href="#_4-组件间数据交互-6" aria-hidden="true">#</a> 4. 组件间数据交互</h3><h4 id="_5-1-组件插槽的作用" tabindex="-1"><a class="header-anchor" href="#_5-1-组件插槽的作用" aria-hidden="true">#</a> 5.1 组件插槽的作用</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>⚫ 父组件向子组件传递内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;alert-box&gt;hi&lt;/alert-box&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;alert-box&gt;hello&lt;/alert-box&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="父组件" tabindex="-1"><a class="header-anchor" href="#父组件" aria-hidden="true">#</a> 父组件</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;alert-box&gt;haha&lt;/alert-box&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="子组件" tabindex="-1"><a class="header-anchor" href="#子组件" aria-hidden="true">#</a> 子组件</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;slot&gt;&lt;/slot&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-组件插槽" tabindex="-1"><a class="header-anchor" href="#_5-组件插槽" aria-hidden="true">#</a> 5. 组件插槽</h3><h5 id="_1-插槽位置" tabindex="-1"><a class="header-anchor" href="#_1-插槽位置" aria-hidden="true">#</a> 1. 插槽位置</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Vue.component(&#39;alert-box&#39;, {
template: \`
&lt;div class=&quot;demo-alert-box&quot;&gt;
&lt;strong&gt;Error!&lt;/strong&gt;
&lt;slot&gt;&lt;/slot&gt;
&lt;/div&gt;
\`
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-插槽内容" tabindex="-1"><a class="header-anchor" href="#_2-插槽内容" aria-hidden="true">#</a> 2. 插槽内容</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;alert-box&gt;Something bad happened.&lt;/alert-box&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-2-组件插槽基本用法" tabindex="-1"><a class="header-anchor" href="#_5-2-组件插槽基本用法" aria-hidden="true">#</a> 5.2 组件插槽基本用法</h4><h3 id="_5-组件插槽-1" tabindex="-1"><a class="header-anchor" href="#_5-组件插槽-1" aria-hidden="true">#</a> 5. 组件插槽</h3><h4 id="_5-3-具名插槽用法" tabindex="-1"><a class="header-anchor" href="#_5-3-具名插槽用法" aria-hidden="true">#</a> 5.3 具名插槽用法</h4><h5 id="_1-插槽定义" tabindex="-1"><a class="header-anchor" href="#_1-插槽定义" aria-hidden="true">#</a> 1. 插槽定义</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;div class=&quot;container&quot;&gt;
&lt;header&gt;
&lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;
&lt;/header&gt;
&lt;main&gt;
&lt;slot&gt;&lt;/slot&gt;
&lt;/main&gt;
&lt;footer&gt;
&lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;
&lt;/footer&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-插槽内容-1" tabindex="-1"><a class="header-anchor" href="#_2-插槽内容-1" aria-hidden="true">#</a> 2. 插槽内容</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;base-layout&gt;
&lt;h1 slot=&quot;header&quot;&gt;标题内容&lt;/h1&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;p&gt;主要内容1&lt;/p&gt;
&lt;p&gt;主要内容2&lt;/p&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;p slot=&quot;footer&quot;&gt;底部内容&lt;/p&gt;
&lt;/base-layout&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-组件插槽-2" tabindex="-1"><a class="header-anchor" href="#_5-组件插槽-2" aria-hidden="true">#</a> 5. 组件插槽</h3>`,142),b=n(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;fruit-list v-bind:list= &quot;list&quot;&gt;
&lt;template slot-scope=&quot;slotProps&quot;&gt;
&lt;strong v-if=&quot;slotProps.item.current&quot;&gt;
{{ slotProps.item.text }}
&lt;/strong&gt;
&lt;/template&gt;
&lt;/fruit-list&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-4-作用域插槽" tabindex="-1"><a class="header-anchor" href="#_5-4-作用域插槽" aria-hidden="true">#</a> 5.4 作用域插槽</h4><h5 id="_1-插槽定义-2-插槽内容" tabindex="-1"><a class="header-anchor" href="#_1-插槽定义-2-插槽内容" aria-hidden="true">#</a> 1. 插槽定义 2. 插槽内容</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>⚫ 应用场景： 父组件对子组件的内容进行加工处理
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="contents-5" tabindex="-1"><a class="header-anchor" href="#contents-5" aria-hidden="true">#</a> Contents</h2><h1 id="目-◆-组件化开发思想-5" tabindex="-1"><a class="header-anchor" href="#目-◆-组件化开发思想-5" aria-hidden="true">#</a> 目 ◆ 组件化开发思想</h1><h5 id="◆-组件注册-5" tabindex="-1"><a class="header-anchor" href="#◆-组件注册-5" aria-hidden="true">#</a> ◆ 组件注册</h5><h5 id="◆-vue调试工具用法-5" tabindex="-1"><a class="header-anchor" href="#◆-vue调试工具用法-5" aria-hidden="true">#</a> ◆ Vue调试工具用法</h5><h5 id="◆-组件间数据交互-5" tabindex="-1"><a class="header-anchor" href="#◆-组件间数据交互-5" aria-hidden="true">#</a> ◆ 组件间数据交互</h5><h5 id="◆-组件插槽-5" tabindex="-1"><a class="header-anchor" href="#◆-组件插槽-5" aria-hidden="true">#</a> ◆ 组件插槽</h5><h5 id="◆-基于组件的案例-5" tabindex="-1"><a class="header-anchor" href="#◆-基于组件的案例-5" aria-hidden="true">#</a> ◆ 基于组件的案例</h5><h3 id="_6-基于组件的案例" tabindex="-1"><a class="header-anchor" href="#_6-基于组件的案例" aria-hidden="true">#</a> 6. 基于组件的案例</h3><h5 id="案例-购物车" tabindex="-1"><a class="header-anchor" href="#案例-购物车" aria-hidden="true">#</a> 案例：购物车</h5><h3 id="_6-基于组件的案例-1" tabindex="-1"><a class="header-anchor" href="#_6-基于组件的案例-1" aria-hidden="true">#</a> 6. 基于组件的案例</h3><h5 id="案例-需求分析" tabindex="-1"><a class="header-anchor" href="#案例-需求分析" aria-hidden="true">#</a> 案例：需求分析</h5><h5 id="_1-按照组件化方式实现业务需求" tabindex="-1"><a class="header-anchor" href="#_1-按照组件化方式实现业务需求" aria-hidden="true">#</a> 1. 按照组件化方式实现业务需求</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>⚫ 根据业务功能进行组件化划分
① 标题组件（展示文本）
② 列表组件（列表展示、商品数量变更、商品删除）
③ 结算组件（计算商品总额）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-基于组件的案例-2" tabindex="-1"><a class="header-anchor" href="#_6-基于组件的案例-2" aria-hidden="true">#</a> 6. 基于组件的案例</h3><h5 id="案例-实现步骤" tabindex="-1"><a class="header-anchor" href="#案例-实现步骤" aria-hidden="true">#</a> 案例：实现步骤</h5><h5 id="_1-功能实现步骤" tabindex="-1"><a class="header-anchor" href="#_1-功能实现步骤" aria-hidden="true">#</a> 1. 功能实现步骤</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>⚫ 实现整体布局和样式效果
⚫ 划分独立的功能组件
⚫ 组合所有的子组件形成整体结构
⚫ 逐个实现各个组件功能
⚫ 标题组件
⚫ 列表组件
⚫ 结算组件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21);function m(i,x){return a(),d("div",null,[v,r("ul",null,[(a(!0),d(s,null,l(i.list,e=>(a(),d("li",{key:e.id},[h(i.$slots,"default",{item:e},()=>[c(u(e.name),1)])]))),128))]),b])}const _=t(o,[["render",m],["__file","03-vue.html.vue"]]);export{_ as default};
