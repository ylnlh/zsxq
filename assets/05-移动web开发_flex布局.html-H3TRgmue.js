import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as i,c as l,f as a}from"./app-rpFDZqdF.js";const n={},d=a(`<p>​</p><h1 id="移动web开发——flex布局" tabindex="-1"><a class="header-anchor" href="#移动web开发——flex布局" aria-hidden="true">#</a> 移动web开发——flex布局</h1><h2 id="_1-0传统布局和flex布局对比" tabindex="-1"><a class="header-anchor" href="#_1-0传统布局和flex布局对比" aria-hidden="true">#</a> 1.0传统布局和flex布局对比</h2><h3 id="_1-1传统布局" tabindex="-1"><a class="header-anchor" href="#_1-1传统布局" aria-hidden="true">#</a> 1.1传统布局</h3><ul><li>兼容性好</li><li>布局繁琐</li><li>局限性，不能再移动端很好的布局</li></ul><h3 id="_1-2-flex布局" tabindex="-1"><a class="header-anchor" href="#_1-2-flex布局" aria-hidden="true">#</a> 1.2 flex布局</h3><ul><li>操作方便，布局极其简单，移动端使用比较广泛</li><li>pc端浏览器支持情况比较差</li><li>IE11或更低版本不支持flex或仅支持部分</li></ul><h3 id="_1-3-建议" tabindex="-1"><a class="header-anchor" href="#_1-3-建议" aria-hidden="true">#</a> 1.3 建议</h3><ul><li>如果是pc端页面布局，还是采用传统方式</li><li>如果是移动端或者是不考虑兼容的pc则采用flex</li></ul><h2 id="_2-0-flex布局原理" tabindex="-1"><a class="header-anchor" href="#_2-0-flex布局原理" aria-hidden="true">#</a> 2.0 flex布局原理</h2><ul><li>flex 是 flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。</li><li>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</li><li>flex布局又叫伸缩布局 、弹性布局 、伸缩盒布局 、弹性盒布局</li><li>采用 Flex 布局的元素，称为 Flex 容器（flex</li></ul><p>container），简称&quot;容器&quot;。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称&quot;项目&quot;。</p><p><strong>总结</strong>：就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式</p><h2 id="_3-0-父项常见属性" tabindex="-1"><a class="header-anchor" href="#_3-0-父项常见属性" aria-hidden="true">#</a> 3.0 父项常见属性</h2><ul><li>flex-direction：设置主轴的方向</li><li>justify-content：设置主轴上的子元素排列方式</li><li>flex-wrap：设置子元素是否换行</li><li>align-content：设置侧轴上的子元素的排列方式（多行）</li><li>align-items：设置侧轴上的子元素排列方式（单行）</li><li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</li></ul><h3 id="_3-1-flex-direction设置主轴的方向" tabindex="-1"><a class="header-anchor" href="#_3-1-flex-direction设置主轴的方向" aria-hidden="true">#</a> 3.1 flex-direction设置主轴的方向</h3><ul><li><p>在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有 ： 行和列、x 轴和y 轴</p></li><li><p>默认主轴方向就是 x 轴方向，水平向右</p></li><li><p>默认侧轴方向就是 y 轴方向，水平向下</p></li><li><p>注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的</p><p>​</p></li></ul><h3 id="_3-2-justify-content-设置主轴上的子元素排列方式" tabindex="-1"><a class="header-anchor" href="#_3-2-justify-content-设置主轴上的子元素排列方式" aria-hidden="true">#</a> 3.2 justify-content 设置主轴上的子元素排列方式</h3><h3 id="_3-3-flex-wrap设置是否换行" tabindex="-1"><a class="header-anchor" href="#_3-3-flex-wrap设置是否换行" aria-hidden="true">#</a> 3.3 flex-wrap设置是否换行</h3><ul><li>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，flex布局中默认是不换行的。</li><li>nowrap 不换行</li><li>wrap 换行</li></ul><h3 id="_3-4-align-items-设置侧轴上的子元素排列方式-单行" tabindex="-1"><a class="header-anchor" href="#_3-4-align-items-设置侧轴上的子元素排列方式-单行" aria-hidden="true">#</a> 3.4 align-items 设置侧轴上的子元素排列方式（单行 ）</h3><ul><li>该属性是控制子项在侧轴（默认是y轴）上的排列方式 在子项为单项（单行）的时候使用</li><li>flex-start 从头部开始</li><li>flex-end 从尾部开始</li><li>center 居中显示</li><li>stretch 拉伸</li></ul><h3 id="_3-5-align-content-设置侧轴上的子元素的排列方式-多行" tabindex="-1"><a class="header-anchor" href="#_3-5-align-content-设置侧轴上的子元素的排列方式-多行" aria-hidden="true">#</a> 3.5 align-content 设置侧轴上的子元素的排列方式（多行）</h3><p>设置子项在侧轴上的排列方式 并且只能用于子项出现 换行 的情况（多行），在单行下是没有效果的。</p><h3 id="_3-6-align-content-和align-items区别" tabindex="-1"><a class="header-anchor" href="#_3-6-align-content-和align-items区别" aria-hidden="true">#</a> 3.6 align-content 和align-items区别</h3><ul><li>align-items 适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸</li><li>align-content适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性值。</li><li>总结就是单行找align-items 多行找 align-content</li></ul><h3 id="_3-7-flex-flow-属性是-flex-direction-和-flex-wrap-属性的复合属性" tabindex="-1"><a class="header-anchor" href="#_3-7-flex-flow-属性是-flex-direction-和-flex-wrap-属性的复合属性" aria-hidden="true">#</a> 3.7 flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flex-flow:row wrap;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-0-flex布局子项常见属性" tabindex="-1"><a class="header-anchor" href="#_4-0-flex布局子项常见属性" aria-hidden="true">#</a> 4.0 flex布局子项常见属性</h2><ul><li>flex子项目占的份数</li><li>align-self控制子项自己在侧轴的排列方式</li><li>order属性定义子项的排列顺序（前后顺序）</li></ul><h3 id="_4-1-flex-属性" tabindex="-1"><a class="header-anchor" href="#_4-1-flex-属性" aria-hidden="true">#</a> 4.1 flex 属性</h3><p>flex 属性定义子项目分配剩余空间，用flex来表示占多少份数。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.item {
    flex: &lt;number&gt;; /* 默认值 0 */
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-align-self控制子项自己在侧轴上的排列方式" tabindex="-1"><a class="header-anchor" href="#_4-2-align-self控制子项自己在侧轴上的排列方式" aria-hidden="true">#</a> 4.2 align-self控制子项自己在侧轴上的排列方式</h3><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。</p><p>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>span:nth-child(2) {
      /* 设置自己在侧轴上的排列方式 */
      align-self: flex-end;
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-order-属性定义项目的排列顺序" tabindex="-1"><a class="header-anchor" href="#_4-3-order-属性定义项目的排列顺序" aria-hidden="true">#</a> 4.3 order 属性定义项目的排列顺序</h3><p>数值越小，排列越靠前，默认为0。</p><p>注意：和 z-index 不一样。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.item {
    order: &lt;number&gt;;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-0-携程网首页案例制作" tabindex="-1"><a class="header-anchor" href="#_5-0-携程网首页案例制作" aria-hidden="true">#</a> 5.0 携程网首页案例制作</h2><p>携程网链接：http://m.ctrip.com</p><p>1.技术选型</p><p>方案：我们采取单独制作移动页面方案</p><p>技术：布局采取flex布局</p><p>2.搭建相关文件夹</p><p>3.设置视口标签以及引入初始化样式</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no,initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;css/normalize.css&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;css/index.css&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.常用初始化样式</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>body {
  max-width: 540px;
  min-width: 320px;
  margin: 0 auto;
  font: normal 14px/1.5 Tahoma,&quot;Lucida Grande&quot;,Verdana,&quot;Microsoft Yahei&quot;,STXihei,hei;
  color: #000;
  background: #f2f2f2;
  overflow-x: hidden;
  -webkit-tap-highlight-color: transparent;
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.模块名字划分</p>`,52),t=[d];function r(s,c){return i(),l("div",null,t)}const o=e(n,[["render",r],["__file","05-移动web开发_flex布局.html.vue"]]);export{o as default};
