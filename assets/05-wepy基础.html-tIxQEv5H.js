import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as t,a as n,d as c,t as o,f as a}from"./app-rpFDZqdF.js";const p={},l=a(`<p>​</p><hr><h5 id="一、wepy-简介" tabindex="-1"><a class="header-anchor" href="#一、wepy-简介" aria-hidden="true">#</a> 一、WePY 简介</h5><h6 id="_001-什么是-wepy" tabindex="-1"><a class="header-anchor" href="#_001-什么是-wepy" aria-hidden="true">#</a> 001 - 什么是 <code>WePY</code></h6><blockquote><p><code>WePY</code> 是腾讯官方出品的一个小程序快速开发框架，对原生小程序的开发模式进行了再次封装</p></blockquote><h6 id="_002-为什么使用-wepy" tabindex="-1"><a class="header-anchor" href="#_002-为什么使用-wepy" aria-hidden="true">#</a> 002 - 为什么使用 <code>WePY</code></h6><blockquote><p><code>WePY</code> 相比于原生小程序开发，拥有众多的开发特性和优化方案，</p></blockquote><ul><li>开发风格接近于 Vue.js，支持很多vue中的语法特性；</li><li>通过 polyfill 让小程序完美支持 Promise；</li><li>可以使用ES6等诸多高级语法特性，简化代码，提高开发效率；</li><li>对小程序本身的性能做出了进一步的优化；</li><li>支持第三方的 npm 资源；</li><li>支持多种插件处理和编译器；</li></ul><h5 id="二、wepy-的安装与运行" tabindex="-1"><a class="header-anchor" href="#二、wepy-的安装与运行" aria-hidden="true">#</a> 二、<code>WePy</code> 的安装与运行</h5><h6 id="_001-安装-wepy" tabindex="-1"><a class="header-anchor" href="#_001-安装-wepy" aria-hidden="true">#</a> 001 - 安装 <code>WePY</code></h6><ul><li><code>WePY</code> 的安装或更新都通过 <code>npm</code> 进行全局安装</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install wepy-cli -g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_002-初始化-wepy-项目" tabindex="-1"><a class="header-anchor" href="#_002-初始化-wepy-项目" aria-hidden="true">#</a> 002 - 初始化 <code>WePY</code> 项目</h6><ul><li>使用命令行方式进行初始化项目结构</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>wepy init standard myproject
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>”<code>wepy init</code>” -- 是固定写法，代表要初始化 <code>wepy</code> 项目；</li><li>”<code>standard</code>” -- 代表模板类型为标准模板，可以运行 ”<code>wepy list</code>” 命令查看所有可用的项目模板</li><li>”<code>myproject</code>” -- 为自定义的项目名称。</li></ul><p><strong>注意：创建项目的时候，要勾选 <code>ESLint</code> 选项！</strong></p><h6 id="_003-运行编译-wepy-项目" tabindex="-1"><a class="header-anchor" href="#_003-运行编译-wepy-项目" aria-hidden="true">#</a> 003 - 运行编译 <code>WePY</code> 项目</h6><ul><li>运行 <code>cd myproject</code> 切换至 \`WePY\`\` 项目根目录</li><li>运行 <code>npm install</code> 安装 <code>WePY</code> 项目依赖项</li><li>运行 <code>wepy build --watch</code> 开启实时编译 <ul><li><code>wepy build --watch</code> 命令，会循环监听 <code>WePY </code>项目中源代码的变化，自动编译生成小程序项目</li></ul></li></ul><p><strong>注意：生成的小程序项目默认被存放于 dist 目录中。</strong></p><h6 id="_004-认识wepy-项目目录" tabindex="-1"><a class="header-anchor" href="#_004-认识wepy-项目目录" aria-hidden="true">#</a> 004 - 认识<code>WePY</code> 项目目录</h6><h6 id="_004-将-wepy-项目导入到开发者工具中" tabindex="-1"><a class="header-anchor" href="#_004-将-wepy-项目导入到开发者工具中" aria-hidden="true">#</a> 004 - 将 <code>WePy</code> 项目导入到开发者工具中</h6><ul><li>1.7.0 版本之后的 <code>wepy-cli</code> 工具生成的项目根目录下，包含 <code>project.config.json</code> 文件， <ul><li>记录了项目的基本配置信息，例如：项目的名称、<code>appId</code>、生成的小程序项目根路径等。</li></ul></li><li>如果项目中存在 <code>project.config.json</code> 文件， <ul><li>使用 微信开发者工具 --&gt; 导入项目，”项目目录”请选择 <code>wepy</code> 项目根目录，</li><li>会根据 <code>project.config.json</code> 文件的配置，把 <code>wepy </code>编译生成的小程序项目加载到微信开发者工具中。</li></ul></li></ul><h6 id="_005-wepy-和-小程序项目的关系" tabindex="-1"><a class="header-anchor" href="#_005-wepy-和-小程序项目的关系" aria-hidden="true">#</a> 005 - <code>WePY</code> 和 小程序项目的关系</h6><ul><li>通过 <code>wepy init</code> 命令初始化的<code>wepy</code> 项目，实际是一个模板项目，不能直接当作小程序运行。</li><li>需要运行相关的命令，把模板项目编译为小程序项目，才可以运行。</li></ul><hr><h5 id="三、wepy-文件介绍" tabindex="-1"><a class="header-anchor" href="#三、wepy-文件介绍" aria-hidden="true">#</a> 三、<code>WePY</code> 文件介绍</h5><h6 id="_001-介绍-wpy文件的组成部分" tabindex="-1"><a class="header-anchor" href="#_001-介绍-wpy文件的组成部分" aria-hidden="true">#</a> 001 - 介绍<code>.wpy</code>文件的组成部分</h6><ul><li>一个 .wpy 文件可分为三大部分，各自对应于一个标签： <ul><li>脚本部分，即 <code>&lt;script&gt;&lt;/script&gt;</code> 标签中的内容，又可分为两个部分： <ul><li>逻辑部分，除了 <code>config</code> 对象之外的部分，对应于原生的 <code>.js</code> 文件</li><li>配置部分，即 <code>config</code> 对象，对应于原生的 <code>.json</code> 文件</li></ul></li><li>结构部分，即 <code>&lt;template&gt;&lt;/template&gt;</code> 模板部分，对应于原生的 <code>.wxml</code> 文件。</li><li>样式部分，即<code>&lt;style&gt;&lt;/style&gt;</code>样式部分，对应于原生的 <code>.wxss</code> 文件。</li></ul></li><li>其中，小程序入口文件 <code>app.wpy</code> 不需要 <code>template</code>，所以编译时会被忽略。</li></ul><h6 id="_002-wpy-文件的使用说明" tabindex="-1"><a class="header-anchor" href="#_002-wpy-文件的使用说明" aria-hidden="true">#</a> 002 - <code>.wpy</code> 文件的使用说明</h6><ul><li><p><code>.wpy</code> 文件中的 <code>script</code>、<code>template</code>、<code>style</code> 这三个标签都支持 <code>lang</code> 和 <code>src</code> 属性，</p><ul><li><code>lang</code> 决定了其代码编译过程，</li><li><code>src</code> 决定是否外联代码，存在 <code>src</code> 属性且有效时，会忽略内联代码。</li></ul></li><li><p>语法属性</p></li></ul><table><thead><tr><th style="text-align:center;">标签</th><th style="text-align:center;"><code>lang</code>默认值</th><th style="text-align:center;"><code>lang</code>支持值</th></tr></thead><tbody><tr><td style="text-align:center;">style</td><td style="text-align:center;"><code>css</code></td><td style="text-align:center;"><code>css</code>、<code>less</code>、<code>scss</code>、<code>stylus</code>、<code>postcss</code></td></tr><tr><td style="text-align:center;">template</td><td style="text-align:center;"><code>wxml</code></td><td style="text-align:center;"><code>wxml</code>、<code>xml</code>、<code>pug(原jade)</code></td></tr><tr><td style="text-align:center;">script</td><td style="text-align:center;"><code>babel</code></td><td style="text-align:center;"><code>babel</code>、<code>TypeScript</code></td></tr></tbody></table><ul><li>案例代码</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>less<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>page1.less<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wxml<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>page1.wxml<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// some code</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_003-小程序入口-app-wpy" tabindex="-1"><a class="header-anchor" href="#_003-小程序入口-app-wpy" aria-hidden="true">#</a> 003 - 小程序入口 <code>app.wpy</code></h6><blockquote><p>入口文件 <code>app.wpy</code> 中所声明的小程序实例继承自 <code>wepy.app</code> 类，包含一个 <code>config</code> 属性和其它全局属性、方法、事件。</p></blockquote><ul><li><code>config</code> 属性会被编译为小程序的 <code>app.json</code> 全局配置文件；</li><li><code>config</code> 属性之外的其它节点，会被编译为小程序的 <code>app.js</code> 文件；</li><li>style 标签会被编译为小程序的 <code>app.wxss</code> 全局样式；</li></ul><h6 id="_004-app-wpy-全局配置小程序外观" tabindex="-1"><a class="header-anchor" href="#_004-app-wpy-全局配置小程序外观" aria-hidden="true">#</a> 004 - <code>app.wpy</code> 全局配置小程序外观</h6><blockquote><p>在小程序的入口文件中找到 window 节点：<code>app.wpy</code> -&gt; <code>script</code>标签 -&gt; <code>config</code> -&gt; <code>window</code> 即可全局配置小程序的外观</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">window</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">backgroundTextStyle</span><span class="token operator">:</span> <span class="token string">&#39;dark&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">navigationBarBackgroundColor</span><span class="token operator">:</span> <span class="token string">&#39;#fff&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">navigationBarTitleText</span><span class="token operator">:</span> <span class="token string">&#39;小程序电商项目&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">navigationBarTextStyle</span><span class="token operator">:</span> <span class="token string">&#39;black&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_005-页面-wpy-文件中-script-标签组成结构" tabindex="-1"><a class="header-anchor" href="#_005-页面-wpy-文件中-script-标签组成结构" aria-hidden="true">#</a> 005 - 页面 <code>.wpy</code> 文件中 <code>script</code> 标签组成结构</h6><blockquote><p>页面文件 <code>page.wpy</code> 中所声明的页面实例继承自 <code>wepy.page</code> 类</p></blockquote><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">config</td><td style="text-align:center;">页面配置对象，对应于原生的<code>page.json</code>文件，类似于<code>app.wpy</code>中的config</td></tr><tr><td style="text-align:left;">components</td><td style="text-align:center;">页面组件列表对象，声明页面所引入的组件列表</td></tr><tr><td style="text-align:left;">data</td><td style="text-align:center;">页面渲染数据对象，存放可用于页面模板绑定的渲染数据</td></tr><tr><td style="text-align:left;">methods</td><td style="text-align:center;">wxml事件处理函数对象，存放响应wxml中所捕获到的事件的函数，如<code>bindtap</code>、<code>bindchange</code></td></tr><tr><td style="text-align:left;">events</td><td style="text-align:center;">WePY组件事件处理函数对象，存放响应组件之间通过<code>$broadcast</code>、<code>$emit</code>、<code>$invoke</code>所传递的事件的函数</td></tr><tr><td style="text-align:left;">其它</td><td style="text-align:center;">小程序页面生命周期函数，如<code>onLoad</code>、<code>onReady</code>等，以及其它自定义的方法与属性</td></tr></tbody></table><h5 id="四、-wepy-框架开发规范与使用" tabindex="-1"><a class="header-anchor" href="#四、-wepy-框架开发规范与使用" aria-hidden="true">#</a> 四、 <code>WePY</code> 框架开发规范与使用</h5><h6 id="_001-如何设置默认首页" tabindex="-1"><a class="header-anchor" href="#_001-如何设置默认首页" aria-hidden="true">#</a> 001 - 如何设置默认首页</h6><ul><li>打开 <code>src</code> -&gt; <code>app.wpy</code> 入口文件，将新创建的页面路径，注册到 <code>config</code> -&gt; <code>pages</code> 数组中，并调整为数组的第一项即可</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>pages: [
  &#39;pages/home&#39;,
  &#39;pages/index&#39;
],
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_002-创建页面的注意事项" tabindex="-1"><a class="header-anchor" href="#_002-创建页面的注意事项" aria-hidden="true">#</a> 002 - 创建页面的注意事项</h6><ul><li>每个页面的 <code>script</code> 标签中，必须导入 <code>wepy</code> 模块，并创建继承自 <code>wepy.page</code> 的页面类；否则会报错。</li><li>每个页面的路径，必须记录到 <code>app.wpy</code> 的 <code>config</code> -&gt; <code>pages</code> 数组中。</li><li>页面路径记录完毕之后，必须再回到页面文件中，摁下 <code>Ctrl + S</code> 快捷键重新编译生成页面，否则会报错。</li></ul><h6 id="_003-页面绑定事件以及传参" tabindex="-1"><a class="header-anchor" href="#_003-页面绑定事件以及传参" aria-hidden="true">#</a> 003 - 页面绑定事件以及传参</h6><blockquote><p>在 <code>wepy</code> 框架中，优化了事件绑定机制，支持类似于 <code>Vue.js </code>的事件绑定语法</p></blockquote><ul><li>在 <code>WePY</code> 中，统一使用 <code>@</code> 绑定事件，传递参数直接采用<code>@tap=&#39;handle({{params}})&#39;</code>传递</li><li>案例代码</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>warn<span class="token punctuation">&#39;</span></span> <span class="token attr-name">@tap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>handle({{age}})<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>WePY 绑定事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span>

methods <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">handle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;触发函数&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_004-页面绑定事件的注意事项" tabindex="-1"><a class="header-anchor" href="#_004-页面绑定事件的注意事项" aria-hidden="true">#</a> 004 - 页面绑定事件的注意事项</h6><blockquote><p>通过 <code>@</code> 符号绑定的事件处理函数，必须定义到页面的 <code>methods</code> 节点下。</p></blockquote><ul><li><code>WePY</code> 中的 <code>methods</code> 属性只能声明页面 <code>wxml</code> 标签的事件处理函数，不能声明自定义方法，</li><li>自定义方法需要声明到和 <code>methods</code> 平级的节点位置，这与 <code>Vue</code> 中的用法是不一致的。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span>

methods <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">handle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;触发函数&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">add</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;自定义事件&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_005-页面以及文本框数据绑定" tabindex="-1"><a class="header-anchor" href="#_005-页面以及文本框数据绑定" aria-hidden="true">#</a> 005 - 页面以及文本框数据绑定</h6>`,59),i=n("code",null,".wpy",-1),d=n("li",null,"文本框与 data 做双向数据绑定需要定义事件",-1),u=n("li",null,"案例代码",-1),r=a(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>{{ age }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>inputHandle<span class="token punctuation">&#39;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ val }}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">val</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>

methods <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">inputHandle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_006-wxs-脚本的使用" tabindex="-1"><a class="header-anchor" href="#_006-wxs-脚本的使用" aria-hidden="true">#</a> 006 - <code>wxs</code> 脚本的使用</h6><ul><li>将 <code>wxs</code> 脚本定义为外联文件，并且后缀名为 <code>.wxs</code></li><li>在 <code>&lt;script&gt;&lt;/script&gt;</code> 标签内，通过 <code>import</code> 导入相对路径的 <code>wxs</code> 模块</li><li>在当前页面的 <code>class</code> 类中，通过 <code>wxs = { }</code> 注册刚才导入的 <code>wxs</code> 模块</li><li>案例代码</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>{{ homeData.a }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> homeWxs <span class="token keyword">from</span> <span class="token string">&#39;../wxs/home.wxs&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Home</span> <span class="token keyword">extends</span> <span class="token class-name">wepy<span class="token punctuation">.</span>page</span> <span class="token punctuation">{</span>
  wxs <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">homeData</span><span class="token operator">:</span> homeWxs
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_007-配置-promisify-启用-async-和-await" tabindex="-1"><a class="header-anchor" href="#_007-配置-promisify-启用-async-和-await" aria-hidden="true">#</a> 007 - 配置 <code>promisify</code> 启用 <code>async</code> 和 <code>await</code></h6><ul><li>默认使用 <code>wepy-cli</code> 创建的项目，不支持使用 <code>ES7</code> 的 <code>async</code> 和 <code>await</code> 来简化 <code>Promise API</code> 的调用。</li><li>需要手动开启此功能：打开 <code>src</code> -&gt; <code>app.wpy</code>，找到 <code>constructor()</code> 构造函数，在构造函数中代码的最后一行，添加 <code>this.use(‘promisify’)</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;requestfix&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;promisify&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_008-wepy-发送-get-和-post-请求" tabindex="-1"><a class="header-anchor" href="#_008-wepy-发送-get-和-post-请求" aria-hidden="true">#</a> 008 - <code>WePY</code> 发送 <code>get</code> 和 <code>post</code> 请求</h6><blockquote><p><code>WePY</code> 框架对原生小程序做了封装，之前通过 <code>wx</code> 调用的 <code>API</code>，都可以直接使用 <code>wepy</code> 进行调用</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// wepy 发送 Get 请求</span>

<span class="token keyword">async</span> <span class="token function">getInfo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> wepy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;接口地址&#39;</span><span class="token punctuation">)</span>
  
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// wepy 发送 Post 请求</span>

<span class="token keyword">async</span> <span class="token function">getInfo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> wepy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;接口地址&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;loong&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_009-异步更新数据" tabindex="-1"><a class="header-anchor" href="#_009-异步更新数据" aria-hidden="true">#</a> 009 - 异步更新数据</h6><blockquote><p><strong>在异步函数中更新数据的时候，页面检测不到数据的变化，必须手动调用 this.$apply 方法。</strong></p><p><strong>作用是强制页面重新渲染</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">// 被 async 修饰的函数叫做异步函数</span>

<span class="token keyword">async</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> wepy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>&#39;接口地址’<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>getMsg <span class="token operator">=</span> res<span class="token punctuation">.</span>data
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function k(v,m){return e(),t("div",null,[l,n("ul",null,[n("li",null,[i,c(" 页面中的私有数据，需要定义到 data 节点中，页面上使用双大括号语法 "+o()+" 渲染 data 中的数据",1)]),d,u]),r])}const b=s(p,[["render",k],["__file","05-wepy基础.html.vue"]]);export{b as default};
