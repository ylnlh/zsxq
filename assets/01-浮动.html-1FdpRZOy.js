import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as t}from"./app-tt0ZouaX.js";const e={},i=t(`<h2 id="_1-浮动-float" tabindex="-1"><a class="header-anchor" href="#_1-浮动-float" aria-hidden="true">#</a> 1. 浮动(float)</h2><h3 id="目标" tabindex="-1"><a class="header-anchor" href="#目标" aria-hidden="true">#</a> 目标</h3><ul><li><strong>记忆</strong><ul><li>能够说出 CSS 的布局的三种机制</li></ul></li><li><strong>理解</strong><ul><li>能够说出普通流在布局中的特点</li><li>能够说出我们为什么用浮动</li><li>能够说出我们为什么要清除浮动</li></ul></li><li><strong>应用</strong><ul><li>能够利用浮动完成导航栏案例</li><li>能够清除浮动</li><li>能够使用PS切图工具</li></ul></li></ul><h3 id="_1-1-css-布局的三种机制" tabindex="-1"><a class="header-anchor" href="#_1-1-css-布局的三种机制" aria-hidden="true">#</a> 1.1 CSS 布局的三种机制</h3><blockquote><p>网页布局的核心——就是<strong>用 CSS 来摆放盒子</strong>。</p></blockquote><p>CSS 提供了 <strong>3 种机制</strong>来设置盒子的摆放位置，分别是<strong>普通流</strong>（标准流）、<strong>浮动</strong>和<strong>定位</strong>，其中：</p><ol><li><strong>普通流</strong>（标准流） <ul><li><strong>块级元素</strong>会独占一行，<strong>从上向下</strong>顺序排列； <ul><li>常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li></ul></li><li><strong>行内元素</strong>会按照顺序，<strong>从左到右</strong>顺序排列，碰到父元素边缘则自动换行； <ul><li>常用元素：span、a、i、em等</li></ul></li></ul></li><li><strong>浮动</strong><ul><li>让盒子从普通流中<strong>浮</strong>起来,主要作用让多个块级盒子一行显示。</li></ul></li><li><strong>定位</strong><ul><li>将盒子<strong>定</strong>在浏览器的某一个<strong>位</strong>置——CSS 离不开定位，特别是后面的 js 特效。</li></ul></li></ol><h3 id="_1-2-为什么需要浮动" tabindex="-1"><a class="header-anchor" href="#_1-2-为什么需要浮动" aria-hidden="true">#</a> 1.2 为什么需要浮动？</h3><p>思考题：</p><p>我们首先要思考以下2个布局中最常见的问题？</p><ol><li><p>如何让多个盒子(div)水平排列成一行？</p></li><li><p>如何实现盒子的左右对齐？</p></li></ol><p>虽然我们前面学过行内块（inline-block） 但是他却有自己的缺陷：</p><ol><li>它可以实现多个元素一行显示，但是中间会有空白缝隙，不能满足以上第一个问题。</li><li>它不能实现以上第二个问题，盒子左右对齐</li></ol><p><strong>pink老师一句话总结他们</strong></p><blockquote><p>因为一些网页布局要求，标准流不能满足我们的需要了，因此我们需要浮动来完成网页布局。</p></blockquote><h3 id="_1-3-什么是浮动-float" tabindex="-1"><a class="header-anchor" href="#_1-3-什么是浮动-float" aria-hidden="true">#</a> 1.3 什么是浮动(float)</h3><p><strong>概念</strong>：元素的浮动是指<strong>设置了浮动属性的元素</strong>会</p><ol><li>脱离标准普通流的控制</li><li>移动到指定位置。</li></ol><h4 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h4><ol><li><strong>让多个盒子(div)水平排列成一行</strong>，使得浮动成为布局的重要手段。</li><li>可以实现盒子的左右对齐等等..</li><li>浮动最早是用来<strong>控制图片</strong>，实现<strong>文字环绕图片的效果</strong>。</li></ol><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h4><p>在 CSS 中，通过 <code>float</code> 中文， 浮 漏 特 属性定义浮动，语法如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>选择器 { float: 属性值; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>none</strong></td><td>元素不浮动（<strong>默认值</strong>）</td></tr><tr><td><strong>left</strong></td><td>元素向<strong>左</strong>浮动</td></tr><tr><td><strong>right</strong></td><td>元素向<strong>右</strong>浮动</td></tr></tbody></table><p>pink老师教你学浮动口诀。通过 <code>float</code> ----- 浮 漏 特</p><h4 id="_1-浮动口诀之-浮" tabindex="-1"><a class="header-anchor" href="#_1-浮动口诀之-浮" aria-hidden="true">#</a> 1). 浮动口诀之 浮</h4><p>浮动——浮<sub>浮</sub>浮~~~漂浮在普通流的上面。 脱离标准流。 俗称 “脱标”</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.box1</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.box2</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>小结</strong>：</p><ul><li><code>float</code> 属性会让盒子漂浮在标准流的上面，所以第二个标准流的盒子跑到浮动盒子的底下了。</li></ul><h4 id="_2-浮动口诀之-漏" tabindex="-1"><a class="header-anchor" href="#_2-浮动口诀之-漏" aria-hidden="true">#</a> 2). 浮动口诀之 漏</h4><p>浮动——漏<sub>漏</sub>漏~ 浮动的盒子，把自己原来的位置漏给下面标准流的盒子，就是不占有原来位置，是脱离标准流的，我们俗称 “脱标”。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.box1</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 让第 1 个盒子漂浮起来，不占位置 */</span>
    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.box2</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，box2下面的其实就是跑到box1盒子下面了， 被box1给压住了，遮挡起来了</p><p>来来来，我们看个立体图</p><h4 id="_3-浮动口诀之-特" tabindex="-1"><a class="header-anchor" href="#_3-浮动口诀之-特" aria-hidden="true">#</a> 3). 浮动口诀之 特</h4><p>浮动——特性 float属性会改变元素display属性。</p><p>任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。 生成的块级框和我们前面的行内块极其相似。</p><p>体验案例——div 水平排列</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>

    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>

    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>

    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>

    <span class="token comment">/* 转换为行内块元素，可以水平显示，不过 div 之间有间隙，不方便处理 */</span>

    <span class="token comment">/* display: inline-block; */</span>

    <span class="token comment">/* 设置浮动属性，可以让 div 水平排列，并且没有间隙 */</span>

    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.two</span> <span class="token punctuation">{</span>

    <span class="token property">background-color</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意： 浮动的元素互相贴靠一起的，但是如果父级宽度装不下这些浮动的盒子， 多出的盒子会另起一行对齐</strong></p><h3 id="_1-4-浮动-float-小结" tabindex="-1"><a class="header-anchor" href="#_1-4-浮动-float-小结" aria-hidden="true">#</a> 1.4 浮动(float)小结</h3><blockquote><p>我们使用浮动的核心目的——让多个块级盒子在同一行显示。 因为这是我们最常见的一种布局方式</p></blockquote><p><strong>float</strong> —— <strong>浮漏特</strong></p><table><thead><tr><th>特点</th><th>说明</th></tr></thead><tbody><tr><td>浮</td><td>加了浮动的盒子<strong>是浮起来</strong>的，漂浮在其他标准流盒子的上面。</td></tr><tr><td>漏</td><td>加了浮动的盒子<strong>是不占位置的</strong>，它原来的位置<strong>漏给了标准流的盒子</strong>。</td></tr><tr><td>特</td><td><strong>特别注意</strong>：浮动元素会改变display属性， 类似转换为了行内块，但是元素之间没有空白缝隙</td></tr></tbody></table><h3 id="_1-5-浮动-float-的应用-重要" tabindex="-1"><a class="header-anchor" href="#_1-5-浮动-float-的应用-重要" aria-hidden="true">#</a> 1.5 浮动(float)的应用（重要）</h3><h4 id="浮动和标准流的父盒子搭配" tabindex="-1"><a class="header-anchor" href="#浮动和标准流的父盒子搭配" aria-hidden="true">#</a> 浮动和标准流的父盒子搭配</h4><p>我们知道，浮动是脱标的，会影响下面的标准流元素，此时，我们需要给浮动的元素添加一个标准流的父亲，这样，最大化的减小了对其他标准流的影响。</p><p><strong>pink老师说：</strong></p><blockquote><p>一个完整的网页，是 标准流 + 浮动 + 我们后面要讲的定位 一起完成的。</p></blockquote><h4 id="浮动应用案例" tabindex="-1"><a class="header-anchor" href="#浮动应用案例" aria-hidden="true">#</a> 浮动应用案例</h4><h4 id="导航栏案例" tabindex="-1"><a class="header-anchor" href="#导航栏案例" aria-hidden="true">#</a> 导航栏案例</h4><p>注意，实际重要的导航栏中，我们不会直接用链接a 而是用 li 包含链接(li+a)的做法。</p><ol><li>li+a 语义更清晰，一看这就是有条理的列表型内容。</li><li>如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名</li></ol><h3 id="_1-6-浮动-float-的扩展" tabindex="-1"><a class="header-anchor" href="#_1-6-浮动-float-的扩展" aria-hidden="true">#</a> 1.6 浮动(float)的扩展</h3><h4 id="_1-浮动元素与父盒子的关系" tabindex="-1"><a class="header-anchor" href="#_1-浮动元素与父盒子的关系" aria-hidden="true">#</a> 1). 浮动元素与父盒子的关系</h4><ul><li>子盒子的浮动参照父盒子对齐</li><li>不会与父盒子的边框重叠，也不会超过父盒子的内边距 ​</li></ul><h4 id="_2-浮动元素与兄弟盒子的关系" tabindex="-1"><a class="header-anchor" href="#_2-浮动元素与兄弟盒子的关系" aria-hidden="true">#</a> 2). 浮动元素与兄弟盒子的关系</h4><p>在一个父级盒子中，如果<strong>前一个兄弟盒子</strong>是：</p><ul><li><strong>浮动</strong>的，那么<strong>当前盒子</strong>会与前一个盒子的顶部对齐；</li><li><strong>普通流</strong>的，那么<strong>当前盒子</strong>会显示在前一个兄弟盒子的下方。</li></ul><p><strong>pink老师 要你记住：</strong></p><blockquote><p>浮动只会影响当前的或者是后面的标准流盒子，不会影响前面的标准流。</p></blockquote><p><strong>建议</strong></p><p><strong>如果一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动。防止引起问题</strong></p><h2 id="_2-清除浮动" tabindex="-1"><a class="header-anchor" href="#_2-清除浮动" aria-hidden="true">#</a> 2. 清除浮动</h2><h3 id="_2-1-为什么要清除浮动" tabindex="-1"><a class="header-anchor" href="#_2-1-为什么要清除浮动" aria-hidden="true">#</a> 2.1 为什么要清除浮动</h3><p>因为父级盒子很多情况下，不方便给高度，但是子盒子浮动就不占有位置，最后父级盒子高度为0，就影响了下面的标准流盒子。</p><ul><li>总结： <ul><li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li><li>准确地说，并不是清除浮动，而是<strong>清除浮动后造成的影响</strong></li></ul></li></ul><h3 id="_2-2-清除浮动本质" tabindex="-1"><a class="header-anchor" href="#_2-2-清除浮动本质" aria-hidden="true">#</a> 2.2 清除浮动本质</h3><p><strong>听pink老师说清除浮动本质：</strong></p><p>​ <strong>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。清除浮动之后， 父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</strong></p><h3 id="_2-3-清除浮动的方法" tabindex="-1"><a class="header-anchor" href="#_2-3-清除浮动的方法" aria-hidden="true">#</a> 2.3 清除浮动的方法</h3><p>在CSS中，clear属性用于清除浮动，在这里，我们先记住清除浮动的方法，具体的原理，等我们学完css会再回头分析。</p><ul><li>语法：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>选择器{clear:属性值;}   clear 清除  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><p>但是我们实际工作中， 几乎只用 clear: both;</p><h4 id="_1-额外标签法-隔墙法" tabindex="-1"><a class="header-anchor" href="#_1-额外标签法-隔墙法" aria-hidden="true">#</a> 1).额外标签法(隔墙法)</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value css language-css"><span class="token property">”clear</span><span class="token punctuation">:</span>both”</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>，或则其他标签br等亦可。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>优点： 通俗易懂，书写方便</li><li>缺点： 添加许多无意义的标签，结构化较差。</li></ul><h4 id="_2-父级添加overflow属性方法" tabindex="-1"><a class="header-anchor" href="#_2-父级添加overflow属性方法" aria-hidden="true">#</a> 2).父级添加overflow属性方法</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>可以给父级添加： overflow为 hidden| auto| scroll  都可以实现。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>优点： 代码简洁</p><p>缺点： 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p><h4 id="_3-使用after伪元素清除浮动" tabindex="-1"><a class="header-anchor" href="#_3-使用after伪元素清除浮动" aria-hidden="true">#</a> 3).使用after伪元素清除浮动</h4><p><strong>:after 方式为空元素额外标签法的升级版，好处是不用单独加标签了</strong></p><p>使用方法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span> <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   

 <span class="token selector">.clearfix</span> <span class="token punctuation">{</span>*<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token comment">/* IE6、7 专有 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>优点： 符合闭合浮动思想 结构语义化正确</li><li>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</li><li>代表网站： 百度、淘宝网、网易等</li></ul><h4 id="_4-使用双伪元素清除浮动" tabindex="-1"><a class="header-anchor" href="#_4-使用双伪元素清除浮动" aria-hidden="true">#</a> 4).使用双伪元素清除浮动</h4><p>使用方法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clearfix:before,.clearfix:after</span> <span class="token punctuation">{</span> 
  <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>
 <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix</span> <span class="token punctuation">{</span>
  *<span class="token property">zoom</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>优点： 代码更简洁</p></li><li><p>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p></li><li><p>代表网站： 小米、腾讯等</p></li></ul><h3 id="_2-4-清除浮动总结" tabindex="-1"><a class="header-anchor" href="#_2-4-清除浮动总结" aria-hidden="true">#</a> 2.4 清除浮动总结</h3><p><strong>pink老师告诉你我们以后什么时候用清除浮动呢？</strong></p><ol><li>父级没高度</li><li>子盒子浮动了</li><li>影响下面布局了，我们就应该清除浮动了。</li></ol><table><thead><tr><th>清除浮动的方式</th><th style="text-align:left;">优点</th><th style="text-align:left;">缺点</th></tr></thead><tbody><tr><td>额外标签法（隔墙法）</td><td style="text-align:left;">通俗易懂，书写方便</td><td style="text-align:left;">添加许多无意义的标签，结构化较差。</td></tr><tr><td>父级overflow:hidden;</td><td style="text-align:left;">书写简单</td><td style="text-align:left;">溢出隐藏</td></tr><tr><td>父级after伪元素</td><td style="text-align:left;">结构语义化正确</td><td style="text-align:left;">由于IE6-7不支持:after，兼容性问题</td></tr><tr><td>父级双伪元素</td><td style="text-align:left;">结构语义化正确</td><td style="text-align:left;">由于IE6-7不支持:after，兼容性问题</td></tr></tbody></table><p>后面两种伪元素清除浮动，大家暂且会使用就好， 深入原理，我们后面学完伪元素再讲。</p><h2 id="pink-的秘密" tabindex="-1"><a class="header-anchor" href="#pink-的秘密" aria-hidden="true">#</a> pink 的秘密</h2><h2 id="_3-photoshop-切图" tabindex="-1"><a class="header-anchor" href="#_3-photoshop-切图" aria-hidden="true">#</a> 3. Photoshop 切图</h2><p><strong>常见的图片格式</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. jpg图像格式： 
JPEG（.JPG）对色彩的信息保留较好，高清，颜色较多，我们产品类的图片经常用jpg格式的
2. gif图像格式：
GIF格式最多只能储存256色，所以通常用来显示简单图形及字体，但是可以保存透明背景和动画效果
3. png图像格式
是一种新兴的网络图形格式，结合了GIF和JPEG的优点，具有存储形式丰富的特点，能够保持透明背景
4. PSD图像格式
PSD格式是Photoshop的专用格式，里面可以存放图层、通道、遮罩等多种设计草稿。 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS切图 可以 分为 利用切片工具切图 以及 利用PS的插件快速切图。</p><h3 id="_1-ps切片工具" tabindex="-1"><a class="header-anchor" href="#_1-ps切片工具" aria-hidden="true">#</a> 1). PS切片工具</h3><p>ps切图片，分两大步：</p><p><strong>1). 用切片选中图片</strong></p><ul><li><p>利用切片工具手动划出</p></li><li><p>图层菜单---新建基于图层的切片</p></li><li><p>利用辅助线 来切图 -- 基于参考线的切片</p><p>​</p><p>​</p></li></ul><p><strong>2). 导出切片</strong></p><p>文件菜单 -- 存储为web设备所用格式 ---- 选择 我们要的图片格式 ---- 点存储 --- 别忘了选中的切片</p><h4 id="辅助线和切片使用及清除" tabindex="-1"><a class="header-anchor" href="#辅助线和切片使用及清除" aria-hidden="true">#</a> 辅助线和切片使用及清除</h4><p>视图菜单-- 清除 辅助线/ 清除切片</p><h3 id="_2-切图插件" tabindex="-1"><a class="header-anchor" href="#_2-切图插件" aria-hidden="true">#</a> 2). 切图插件</h3><p>Cutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 &quot;导出web所用格式&quot; 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。</p><p>官网: http://www.cutterman.cn/zh/cutterman</p><p>注意： cutterman插件要求你的ps 必须是完整版，不能是绿色版，所以大家需要从新安装完整版本。</p><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h1><p>​</p>`,117),l=[i];function p(o,r){return a(),s("div",null,l)}const u=n(e,[["render",p],["__file","01-浮动.html.vue"]]);export{u as default};
