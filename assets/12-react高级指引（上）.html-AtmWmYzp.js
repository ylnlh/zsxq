const e=JSON.parse('{"key":"v-051f976e","path":"/pages/front-end/%E6%A1%86%E6%9E%B6/react/12-react%E9%AB%98%E7%BA%A7%E6%8C%87%E5%BC%95%EF%BC%88%E4%B8%8A%EF%BC%89.html","title":"12 react高级指引（上）","lang":"zh-CN","frontmatter":{"description":"1.setState 扩展 1.1 对象式 setState 首先在我们以前的认知中，setState 是用来更新状态的，我们一般给它传递一个对象，就像这样 这样每次更新都会让 count 的值加 1。这也是我们最常做的东西 这里我们做一个案例，点我加 1，一个按钮一个值，我要在控制台输出每次的 count 的值 image-2022102709511...","head":[["meta",{"property":"og:url","content":"https://ylnlh.github.io/zsxq/pages/front-end/%E6%A1%86%E6%9E%B6/react/12-react%E9%AB%98%E7%BA%A7%E6%8C%87%E5%BC%95%EF%BC%88%E4%B8%8A%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"12 react高级指引（上）"}],["meta",{"property":"og:description","content":"1.setState 扩展 1.1 对象式 setState 首先在我们以前的认知中，setState 是用来更新状态的，我们一般给它传递一个对象，就像这样 这样每次更新都会让 count 的值加 1。这也是我们最常做的东西 这里我们做一个案例，点我加 1，一个按钮一个值，我要在控制台输出每次的 count 的值 image-2022102709511..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T09:59:42.000Z"}],["meta",{"property":"article:author","content":"Mr.Yang"}],["meta",{"property":"article:modified_time","content":"2024-03-26T09:59:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"12 react高级指引（上）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-26T09:59:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Yang\\",\\"url\\":\\"https://ylnlh.github.io/zsxq/\\"}]}"]]},"headers":[{"level":2,"title":"1.setState 扩展","slug":"_1-setstate-扩展","link":"#_1-setstate-扩展","children":[{"level":3,"title":"1.1 对象式 setState","slug":"_1-1-对象式-setstate","link":"#_1-1-对象式-setstate","children":[]},{"level":3,"title":"1.2 函数式 setState","slug":"_1-2-函数式-setstate","link":"#_1-2-函数式-setstate","children":[]},{"level":3,"title":"1.3 总结","slug":"_1-3-总结","link":"#_1-3-总结","children":[]}]},{"level":2,"title":"2.Context","slug":"_2-context","link":"#_2-context","children":[{"level":3,"title":"2.1 何时使用 Context","slug":"_2-1-何时使用-context","link":"#_2-1-何时使用-context","children":[]},{"level":3,"title":"2.2 类式组件","slug":"_2-2-类式组件","link":"#_2-2-类式组件","children":[]},{"level":3,"title":"2.3 函数组件","slug":"_2-3-函数组件","link":"#_2-3-函数组件","children":[]},{"level":3,"title":"2.4 hook-useContext","slug":"_2-4-hook-usecontext","link":"#_2-4-hook-usecontext","children":[]}]},{"level":2,"title":"3.错误边界","slug":"_3-错误边界","link":"#_3-错误边界","children":[{"level":3,"title":"3.1 基本使用","slug":"_3-1-基本使用","link":"#_3-1-基本使用","children":[]},{"level":3,"title":"3.2 综合案例","slug":"_3-2-综合案例","link":"#_3-2-综合案例","children":[]},{"level":3,"title":"3.3 让子组件不影响父组件正常显示案例","slug":"_3-3-让子组件不影响父组件正常显示案例","link":"#_3-3-让子组件不影响父组件正常显示案例","children":[]},{"level":3,"title":"3.4 使用错误边界需要注意什么","slug":"_3-4-使用错误边界需要注意什么","link":"#_3-4-使用错误边界需要注意什么","children":[]}]},{"level":2,"title":"4.路由组件的lazyLoad","slug":"_4-路由组件的lazyload","link":"#_4-路由组件的lazyload","children":[]},{"level":2,"title":"5.Fragment","slug":"_5-fragment","link":"#_5-fragment","children":[]},{"level":2,"title":"6.使用 PropTypes 进行类型检查","slug":"_6-使用-proptypes-进行类型检查","link":"#_6-使用-proptypes-进行类型检查","children":[]}],"git":{"createdTime":1711447182000,"updatedTime":1711447182000,"contributors":[{"name":"yangle","email":"yanglenlh@163.com","commits":1}]},"readingTime":{"minutes":17.92,"words":5377},"filePathRelative":"pages/front-end/框架/react/12-react高级指引（上）.md","localizedDate":"2024年3月26日","autoDesc":true}');export{e as data};
