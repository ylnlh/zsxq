import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as n,f as s}from"./app-tt0ZouaX.js";const e={},l=s(`<blockquote><p>第01阶段.前端基础</p></blockquote><h1 id="css-第二天" tabindex="-1"><a class="header-anchor" href="#css-第二天" aria-hidden="true">#</a> CSS 第二天</h1><p>今天我们围绕一个 导航栏案例进行学习知识点。</p><p>今日重点：</p><ul><li>复合选择器 <ul><li>后代选择器</li><li>并集选择器</li></ul></li><li>标签显示模式</li><li>CSS背景 <ul><li>背景位置</li></ul></li><li>CSS三大特性 <ul><li>优先级</li></ul></li></ul><h1 id="_1-css复合选择器" tabindex="-1"><a class="header-anchor" href="#_1-css复合选择器" aria-hidden="true">#</a> 1. CSS复合选择器</h1><p>目标</p><ul><li><p>理解</p><ul><li>理解css复合选择器分别的应用场景</li></ul></li><li><p>应用</p><ul><li>使用后代选择器给元素添加样式</li><li>使用并集选择器给元素添加样式</li><li>使用伪类选择器</li></ul></li></ul><p><strong>为什么要学习css复合选择器</strong></p><p>CSS选择器分为 基础选择器 和 复合选择器 ，但是基础选择器不能满足我们实际开发中，快速高效的选择标签。</p><ul><li>目的是为了可以选择更准确更精细的目标元素标签。</li><li>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的</li></ul><h2 id="_1-1-后代选择器-重点" tabindex="-1"><a class="header-anchor" href="#_1-1-后代选择器-重点" aria-hidden="true">#</a> 1.1 后代选择器（重点）</h2><ul><li><p>概念：</p><p>后代选择器又称为包含选择器</p></li><li><p>作用：</p><p>用来选择元素或元素组的<strong>子孙后代</strong></p></li><li><p>其写法就是把外层标签写在前面，内层标签写在后面，中间用<strong>空格</strong>分隔，先写父亲爷爷，在写儿子孙子。</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>父级 子级{属性:属性值;属性:属性值;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>语法：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.class h3{color:red;font-size:16px;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>当标签发生嵌套时，内层标签就成为外层标签的后代。</li><li>子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。</li></ul><h2 id="_1-2-子元素选择器" tabindex="-1"><a class="header-anchor" href="#_1-2-子元素选择器" aria-hidden="true">#</a> 1.2 子元素选择器</h2><ul><li><p>作用：</p><p>子元素选择器只能选择作为某元素**子元素(亲儿子)**的元素。</p></li><li><p>其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 <code>&gt;</code> 进行连接</p></li><li><p>语法：</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.class&gt;h3{color:red;font-size:14px;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>pink老师一句话说出他们</strong></p><blockquote><p>这里的子 指的是 亲儿子 不包含孙子 重孙子之类。</p></blockquote><p>白话：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> 比如：  .demo &gt; h3 {color: red;}   说明  h3 一定是demo 亲儿子。  demo 元素包含着h3。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_1-3-交集选择器" tabindex="-1"><a class="header-anchor" href="#_1-3-交集选择器" aria-hidden="true">#</a> 1.3 交集选择器</h2><ul><li><p>条件</p><p>交集选择器由两个选择器构成，找到的标签必须满足：既有标签一的特点，也有标签二的特点。</p></li><li><p>语法：</p></li><li><p>其中第一个为标签选择器，第二个为class选择器，两个选择器之间<strong>不能有空格</strong>，如h3.special。</p></li></ul><p><strong>记忆技巧：</strong></p><p>交集选择器 是 并且的意思。 即...又...的意思</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>比如：   p.one   选择的是： 类名为 .one  的 段落标签。  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用的相对来说比较少，不太建议使用。</p><h2 id="_1-4-并集选择器-重点" tabindex="-1"><a class="header-anchor" href="#_1-4-并集选择器-重点" aria-hidden="true">#</a> 1.4 并集选择器（重点）</h2><ul><li><p>应用：</p><ul><li>如果某些选择器定义的相同样式，就可以利用并集选择器，可以让代码更简洁。</li></ul></li><li><p>并集选择器（CSS选择器分组）是各个选择器通过<code>,</code>连接而成的，通常用于集体声明。</p></li><li><p>语法：</p></li><li><p>任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。</p></li><li><p>记忆技巧：</p><p>并集选择器通常用于集体声明 ，逗号隔开的，所有选择器都会执行后面样式，逗号可以理解为 和的意思。</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>比如  .one, p , #test {color: #F00;}  
表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。 
通常用于集体声明。  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>他和他，在一起， 在一起 一起的意思</p><h2 id="测试题" tabindex="-1"><a class="header-anchor" href="#测试题" aria-hidden="true">#</a> 测试题</h2><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code> <span class="token comment">&lt;!-- 主导航栏 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>   
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>公司首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>公司简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>公司产品<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>联系我们<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 侧导航栏 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sitenav<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>    
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>site-l<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>左侧侧导航栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>site-r<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在不修改以上结构代码的前提下，完成以下任务：</p><ol><li>链接 登录 的颜色为红色</li><li>主导航栏里面的所有的链接改为橙色</li><li>主导航栏和侧导航栏里面文字都是14像素并且是微软雅黑。</li></ol><h2 id="_1-5-链接伪类选择器-重点" tabindex="-1"><a class="header-anchor" href="#_1-5-链接伪类选择器-重点" aria-hidden="true">#</a> 1.5 链接伪类选择器（重点）</h2><p>伪类选择器：</p><p>为了和我们刚才学的类选择器相区别 类选择器是一个点 比如 .demo {}<br> 而我们的伪类 用 2个点 就是 冒号 比如 :link{} 伪娘</p><p>作用：</p><p>用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第1个，第n个元素。</p><p>因为伪类选择器很多，比如链接伪类，结构伪类等等。我们这里先给大家讲解链接伪类选择器。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>a:link /* 未访问的链接 */</p></li><li><p>a:visited /* 已访问的链接 */</p></li><li><p>a:hover /* 鼠标移动到链接上 */</p></li><li><p>a:active /* 选定的链接 */</p><p><strong>注意</strong></p></li></ul><ul><li>写的时候，他们的顺序尽量不要颠倒 按照 lvha 的顺序。否则可能引起错误。</li><li>记忆法 <ul><li><strong>l</strong>o<strong>v</strong>e <strong>ha</strong>te 爱上了讨厌</li><li>**lv **包包 非常 <strong>ha</strong>o</li></ul></li><li>因为叫链接伪类，所以都是 利用交集选择器 a:link a:hover</li><li>因为a链接浏览器具有默认样式，所以我们实际工作中都需要给链接单独指定样式。</li><li>实际工作开发中，我们很少写全四个状态，一般我们写法如下：</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">a</span> <span class="token punctuation">{</span>   <span class="token comment">/* a是标签选择器  所有的链接 */</span>
			<span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span>
			<span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
			<span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">a:hover</span> <span class="token punctuation">{</span>   <span class="token comment">/* :hover 是链接伪类选择器 鼠标经过 */</span>
			<span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-6-复合选择器总结" tabindex="-1"><a class="header-anchor" href="#_1-6-复合选择器总结" aria-hidden="true">#</a> 1.6 复合选择器总结</h2><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择元素后代</td><td>是选择所有的子孙后代</td><td>较多</td><td>符号是<strong>空格</strong> .nav a</td></tr><tr><td>子代选择器</td><td>选择 最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是**&gt;** .nav&gt;p</td></tr><tr><td>交集选择器</td><td>选择两个标签交集的部分</td><td>既是 又是</td><td>较少</td><td><strong>没有符号</strong> p.one</td></tr><tr><td>并集选择器</td><td>选择某些相同样式的选择器</td><td>可以用于集体声明</td><td>较多</td><td>符号是<strong>逗号</strong> .nav, .header</td></tr><tr><td>链接伪类选择器</td><td>给链接更改状态</td><td></td><td>较多</td><td>重点记住 a{} 和 a:hover 实际开发的写法</td></tr></tbody></table><h1 id="_2-标签显示模式-display-重点" tabindex="-1"><a class="header-anchor" href="#_2-标签显示模式-display-重点" aria-hidden="true">#</a> 2. 标签显示模式（display）重点</h1><p>目标：</p><ul><li>理解 <ul><li>标签的三种显示模式</li><li>三种显示模式的特点以及区别</li><li>理解三种显示模式的相互转化</li></ul></li><li>应用 <ul><li>实现三种显示模式的相互转化</li></ul></li></ul><h2 id="_2-1-什么是标签显示模式" tabindex="-1"><a class="header-anchor" href="#_2-1-什么是标签显示模式" aria-hidden="true">#</a> 2.1 什么是标签显示模式</h2><ul><li><p>什么是标签的显示模式？</p><p>标签以什么方式进行显示，比如div 自己占一行， 比如span 一行可以放很多个</p></li><li><p>作用：</p><p>我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。</p></li><li><p>标签的类型(分类)</p><p>HTML标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。</p></li></ul><h2 id="_2-2-块级元素-block-level" tabindex="-1"><a class="header-anchor" href="#_2-2-块级元素-block-level" aria-hidden="true">#</a> 2.2 块级元素(block-level)</h2><ul><li>例：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>块级元素的特点</li></ul><p>（1）比较霸道，自己独占一行</p><p>（2）高度，宽度、外边距以及内边距都可以控制。</p><p>（3）宽度默认是容器（父级宽度）的100%</p><p>（4）是一个容器及盒子，里面可以放行内或者块级元素。</p><ul><li>注意： <ul><li>只有 文字才 能组成段落 因此 p 里面不能放块级元素，特别是 p 不能放div</li><li>同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li></ul></li></ul><h2 id="_2-3-行内元素-inline-level" tabindex="-1"><a class="header-anchor" href="#_2-3-行内元素-inline-level" aria-hidden="true">#</a> 2.3 行内元素(inline-level)</h2><ul><li>例：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt;标签最典型的行内元素。有的地方也成内联元素
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>行内元素的特点：</li></ul><p>（1）相邻行内元素在一行上，一行可以显示多个。</p><p>（2）高、宽直接设置是无效的。</p><p>（3）默认宽度就是它本身内容的宽度。</p><p>（4）<strong>行内元素只能容纳文本或则其他行内元素。</strong></p><p>注意：</p><ul><li>链接里面不能再放链接。</li><li>特殊情况a里面可以放块级元素，但是给a转换一下块级模式最安全。</li></ul><h2 id="_2-4-行内块元素-inline-block" tabindex="-1"><a class="header-anchor" href="#_2-4-行内块元素-inline-block" aria-hidden="true">#</a> 2.4 行内块元素（inline-block）</h2><ul><li>例：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>行内块元素的特点：</p><p>（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。一行可以显示多个 （2）默认宽度就是它本身内容的宽度。 （3）高度，行高、外边距以及内边距都可以控制。</p></li></ul><h2 id="_2-5-三种模式总结区别" tabindex="-1"><a class="header-anchor" href="#_2-5-三种模式总结区别" aria-hidden="true">#</a> 2.5 三种模式总结区别</h2><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或者其他行内元素</td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度和高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><h2 id="_2-6-标签显示模式转换-display" tabindex="-1"><a class="header-anchor" href="#_2-6-标签显示模式转换-display" aria-hidden="true">#</a> 2.6 标签显示模式转换 display</h2><ul><li>块转行内：display:inline;</li><li>行内转块：display:block;</li><li>块、行内元素转换为行内块： display: inline-block;</li></ul><p>此阶段，我们只需关心这三个，其他的是我们后面的工作。</p><h1 id="_3-行高那些事-line-height" tabindex="-1"><a class="header-anchor" href="#_3-行高那些事-line-height" aria-hidden="true">#</a> 3. 行高那些事（line-height）</h1><p>目标</p><ul><li>理解 <ul><li>能说出 行高 和 高度 三种关系</li><li>能简单理解为什么行高等于高度单行文字会垂直居中</li></ul></li><li>应用 <ul><li>使用行高实现单行文字垂直居中</li><li>能会测量行高，</li></ul></li></ul><h2 id="_3-1-行高测量" tabindex="-1"><a class="header-anchor" href="#_3-1-行高测量" aria-hidden="true">#</a> 3.1 行高测量</h2><p>行高的测量方法：</p><h2 id="_3-2-单行文本垂直居中" tabindex="-1"><a class="header-anchor" href="#_3-2-单行文本垂直居中" aria-hidden="true">#</a> 3.2 单行文本垂直居中</h2><p>行高我们利用最多的一个地方是： 可以让单行文本在盒子中垂直居中对齐。</p><blockquote><p><strong>文字的行高等于盒子的高度。</strong></p></blockquote><p>这里情况些许复杂，开始学习，我们可以先从简单地方入手学会。</p><p>行高 = 上距离 + 内容高度 + 下距离</p><p>上距离和下距离总是相等的，因此文字看上去是垂直居中的。</p><p><strong>行高和高度的三种关系</strong></p><ul><li>如果 行高 等 高度 文字会 垂直居中</li><li>如果行高 大于 高度 文字会 偏下</li><li>如果行高小于高度 文字会 偏上</li></ul><h1 id="_4-css-背景-background" tabindex="-1"><a class="header-anchor" href="#_4-css-背景-background" aria-hidden="true">#</a> 4. CSS 背景(background)</h1><p>目标</p><ul><li>理解 <ul><li>背景的作用</li><li>css背景图片和插入图片的区别</li></ul></li><li>应用 <ul><li>通过css背景属性，给页面元素添加背景样式</li><li>能设置不同的背景图片位置</li></ul></li></ul><h2 id="_4-1-背景颜色-color" tabindex="-1"><a class="header-anchor" href="#_4-1-背景颜色-color" aria-hidden="true">#</a> 4.1 背景颜色(color)</h2><ul><li><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>background-color:颜色值;   默认的值是 transparent  透明的
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="_4-2-背景图片-image" tabindex="-1"><a class="header-anchor" href="#_4-2-背景图片-image" aria-hidden="true">#</a> 4.2 背景图片(image)</h2><ul><li>语法：</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background-image</span> <span class="token punctuation">:</span> none | url <span class="token punctuation">(</span>url<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td>none</td><td style="text-align:center;">无背景图（默认的）</td></tr><tr><td>url</td><td style="text-align:center;">使用绝对或相对地址指定背景图像</td></tr></tbody></table><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background-image</span> <span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>images/demo.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>小技巧： 我们提倡 背景图片后面的地址，url不要加引号。</li></ul><h2 id="_4-3-背景平铺-repeat" tabindex="-1"><a class="header-anchor" href="#_4-3-背景平铺-repeat" aria-hidden="true">#</a> 4.3 背景平铺（repeat）</h2><ul><li>语法：</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background-repeat</span> <span class="token punctuation">:</span> repeat | no-repeat | repeat-x | repeat-y 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td>repeat</td><td style="text-align:center;">背景图像在纵向和横向上平铺（默认的）</td></tr><tr><td>no-repeat</td><td style="text-align:center;">背景图像不平铺</td></tr><tr><td>repeat-x</td><td style="text-align:center;">背景图像在横向上平铺</td></tr><tr><td>repeat-y</td><td style="text-align:center;">背景图像在纵向平铺</td></tr></tbody></table><h2 id="_4-4-背景位置-position-重点" tabindex="-1"><a class="header-anchor" href="#_4-4-背景位置-position-重点" aria-hidden="true">#</a> 4.4 背景位置(position) 重点</h2><ul><li>语法：</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background-position</span> <span class="token punctuation">:</span> length || length

<span class="token property">background-position</span> <span class="token punctuation">:</span> position || position 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th style="text-align:center;">值</th></tr></thead><tbody><tr><td>length</td><td style="text-align:center;">百分数 | 由浮点数字和单位标识符组成的长度值</td></tr><tr><td>position</td><td style="text-align:center;">top | center | bottom | left | center | right 方位名词</td></tr></tbody></table><ul><li>注意： <ul><li>必须先指定background-image属性</li><li>position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。</li><li>如果指定两个值，两个值都是方位名字，则两个值前后顺序无关，比如left top和top left效果一致</li><li>如果只指定了一个方位名词，另一个值默认居中对齐。</li><li>如果position 后面是精确坐标， 那么第一个，肯定是 x 第二的一定是y</li><li>如果只指定一个数值,那该数值一定是x坐标，另一个默认垂直居中</li><li>如果指定的两个值是 精确单位和方位名字混合使用，则第一个值是x坐标，第二个值是y坐标</li></ul></li></ul><p><strong>实际工作用的最多的，就是背景图片居中对齐了。</strong></p><p>练习1：</p><p>背景大图</p><p>练习2：</p><p>小图片在盒子左侧垂直居中</p><h2 id="_4-5-背景附着" tabindex="-1"><a class="header-anchor" href="#_4-5-背景附着" aria-hidden="true">#</a> 4.5 背景附着</h2><ul><li><p>背景附着就是解释背景是滚动的还是固定的</p></li><li><p>语法：</p><div class="language-】 line-numbers-mode" data-ext="】"><pre class="language-】"><code>background-attachment : scroll | fixed 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><table><thead><tr><th>参数</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td>scroll</td><td style="text-align:center;">背景图像是随对象内容滚动</td></tr><tr><td>fixed</td><td style="text-align:center;">背景图像固定</td></tr></tbody></table><h2 id="_4-6-背景简写" tabindex="-1"><a class="header-anchor" href="#_4-6-背景简写" aria-hidden="true">#</a> 4.6 背景简写</h2><ul><li>background：属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：</li><li>background: 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;</li><li>语法：</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background</span><span class="token punctuation">:</span> transparent <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>image.jpg<span class="token punctuation">)</span></span> repeat-y  scroll center top <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例：</p><p>导航栏案例</p><h2 id="_4-7-背景透明-css3" tabindex="-1"><a class="header-anchor" href="#_4-7-背景透明-css3" aria-hidden="true">#</a> 4.7 背景透明(CSS3)</h2><ul><li>语法：</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>最后一个参数是alpha 透明度 取值范围 0~1之间</li><li>我们习惯把0.3 的 0 省略掉 这样写 background: rgba(0, 0, 0, .3);</li><li>注意： 背景半透明是指盒子背景半透明， 盒子里面的内容不受影响</li><li>因为是CSS3 ，所以 低于 ie9 的版本是不支持的。</li></ul><h2 id="_4-8-背景总结" tabindex="-1"><a class="header-anchor" href="#_4-8-背景总结" aria-hidden="true">#</a> 4.8 背景总结</h2><table><thead><tr><th>属性</th><th style="text-align:left;">作用</th><th style="text-align:left;">值</th></tr></thead><tbody><tr><td>background-color</td><td style="text-align:left;">背景颜色</td><td style="text-align:left;">预定义的颜色值/十六进制/RGB代码</td></tr><tr><td>background-image</td><td style="text-align:left;">背景图片</td><td style="text-align:left;">url(图片路径)</td></tr><tr><td>background-repeat</td><td style="text-align:left;">是否平铺</td><td style="text-align:left;">repeat/no-repeat/repeat-x/repeat-y</td></tr><tr><td>background-position</td><td style="text-align:left;">背景位置</td><td style="text-align:left;">length/position 分别是x 和 y坐标， 切记 如果有 精确数值单位，则必须按照先X 后Y 的写法</td></tr><tr><td>background-attachment</td><td style="text-align:left;">背景固定还是滚动</td><td style="text-align:left;">scroll/fixed</td></tr><tr><td>背景简写</td><td style="text-align:left;">更简单</td><td style="text-align:left;">背景颜色 背景图片地址 背景平铺 背景滚动 背景位置; 他们没有顺序</td></tr><tr><td>背景透明</td><td style="text-align:left;">让盒子半透明</td><td style="text-align:left;">background: rgba(0,0,0,0.3); 后面必须是 4个值</td></tr></tbody></table><h1 id="_5-css-三大特性" tabindex="-1"><a class="header-anchor" href="#_5-css-三大特性" aria-hidden="true">#</a> 5. CSS 三大特性</h1><p>目标：</p><ul><li>理解 <ul><li>能说出css样式冲突采取的原则</li><li>能说出那些常见的样式会有继承</li></ul></li><li>应用 <ul><li>能写出CSS优先级的算法</li><li>能会计算常见选择器的叠加值</li></ul></li></ul><h2 id="_5-1-css层叠性" tabindex="-1"><a class="header-anchor" href="#_5-1-css层叠性" aria-hidden="true">#</a> 5.1 CSS层叠性</h2><ul><li><p>概念：</p><p>所谓层叠性是指多种CSS样式的叠加。</p><p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉</p></li><li><p>原则：</p><ul><li>样式冲突，遵循的原则是<strong>就近原则。</strong> 那个样式离着结构近，就执行那个样式。</li><li>样式不冲突，不会层叠</li></ul></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CSS层叠性最后的执行口诀：  长江后浪推前浪，前浪死在沙滩上。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-2-css继承性" tabindex="-1"><a class="header-anchor" href="#_5-2-css继承性" aria-hidden="true">#</a> 5.2 CSS继承性</h2><ul><li><p>概念：</p><p>子标签会继承父标签的某些样式，如文本颜色和字号。</p><p>想要设置一个可继承的属性，只需将它应用于父元素即可。</p></li></ul><p>简单的理解就是： 子承父业。</p><ul><li><strong>注意</strong>： <ul><li>恰当地使用继承可以简化代码，降低CSS样式的复杂性。比如有很多子级孩子都需要某个样式，可以给父级指定一个，这些孩子继承过来就好了。</li><li>子元素可以继承父元素的样式（<strong>text-，font-，line-这些元素开头的可以继承，以及color属性</strong>）</li></ul></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CSS继承性口诀：  龙生龙，凤生凤，老鼠生的孩子会打洞。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-3-css优先级-重点" tabindex="-1"><a class="header-anchor" href="#_5-3-css优先级-重点" aria-hidden="true">#</a> 5.3 CSS优先级（重点）</h2><ul><li><p>概念：</p><p>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，此时，</p><ul><li>选择器相同，则执行层叠性</li><li>选择器不同，就会出现优先级的问题。</li></ul></li></ul><h4 id="_1-权重计算公式" tabindex="-1"><a class="header-anchor" href="#_1-权重计算公式" aria-hidden="true">#</a> 1). 权重计算公式</h4><p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）</p><table><thead><tr><th>标签选择器</th><th>计算权重公式</th></tr></thead><tbody><tr><td>继承或者 *</td><td>0,0,0,0</td></tr><tr><td>每个元素（标签选择器）</td><td>0,0,0,1</td></tr><tr><td>每个类，伪类</td><td>0,0,1,0</td></tr><tr><td>每个ID</td><td>0,1,0,0</td></tr><tr><td>每个行内样式 style=&quot;&quot;</td><td>1,0,0,0</td></tr><tr><td>每个!important 重要的</td><td>∞ 无穷大</td></tr></tbody></table><ul><li>值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。</li><li>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）</li><li>div { color: pink!important;<br> }</li></ul><h4 id="_2-权重叠加" tabindex="-1"><a class="header-anchor" href="#_2-权重叠加" aria-hidden="true">#</a> 2). 权重叠加</h4><p>我们经常用交集选择器，后代选择器等，是有多个基础选择器组合而成，那么此时，就会出现权重叠加。</p><p>就是一个简单的加法计算</p><ul><li>div ul li ------&gt; 0,0,0,3</li><li>.nav ul li ------&gt; 0,0,1,2</li><li>a:hover -----—&gt; 0,0,1,1</li><li>.nav a ------&gt; 0,0,1,1</li></ul><p>注意：</p><ol><li>数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</li></ol><h4 id="_3-继承的权重是0" tabindex="-1"><a class="header-anchor" href="#_3-继承的权重是0" aria-hidden="true">#</a> 3). 继承的权重是0</h4><p>这个不难，但是忽略很容易绕晕。其实，我们修改样式，一定要看该标签有没有被选中。</p><p>1） 如果选中了，那么以上面的公式来计权重。谁大听谁的。 2） 如果没有选中，那么权重是0，因为继承的权重为0.</p><h1 id="_6-css注释" tabindex="-1"><a class="header-anchor" href="#_6-css注释" aria-hidden="true">#</a> 6. CSS注释</h1><p><strong>CSS注释规则：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/*  需要注释的内容  */  进行注释的，即在需要注释的内容前使用 &quot;/*&quot; 标记开始注释，在内容的结尾使用 &quot;*/&quot;结束。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">p</span> <span class="token punctuation">{</span>
 <span class="token comment">/* 所有的字体是14像素大小*/</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>                 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_7-今日总结" tabindex="-1"><a class="header-anchor" href="#_7-今日总结" aria-hidden="true">#</a> 7. 今日总结</h1><p>​</p>`,168),i=[l];function p(d,c){return t(),n("div",null,i)}const u=a(e,[["render",p],["__file","01-CSS笔记.html.vue"]]);export{u as default};
