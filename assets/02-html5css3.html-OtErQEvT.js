import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as p,c as l,a as n,d as s,b as e,f as t}from"./app-tt0ZouaX.js";const c={},r=t(`<p>​</p><h1 id="day02-移动web开发-h5c3" tabindex="-1"><a class="header-anchor" href="#day02-移动web开发-h5c3" aria-hidden="true">#</a> day02 - 移动web开发_H5C3</h1><h2 id="_1-1-2d转换-变换-transform" tabindex="-1"><a class="header-anchor" href="#_1-1-2d转换-变换-transform" aria-hidden="true">#</a> 1.1. 2D转换（变换）transform</h2><p>2d转换是改变标签在<strong>2维平面</strong>上的<strong>位置和形状</strong>的一种技术，先来学习2维坐标系</p><h3 id="_1-1-1-2维坐标系" tabindex="-1"><a class="header-anchor" href="#_1-1-1-2维坐标系" aria-hidden="true">#</a> 1.1.1. 2维坐标系</h3><p><strong>2维坐标系</strong>其实就是指布局的时候的坐标系 如图</p><h3 id="_1-1-2-2d移动-translate" tabindex="-1"><a class="header-anchor" href="#_1-1-2-2d移动-translate" aria-hidden="true">#</a> 1.1.2. 2d移动 translate</h3><p>2d移动是2d转换里面的一种功能，可以改变元素在页面中的位置，类似 <strong>定位</strong></p><p>使用2d移动的步骤：</p><ol><li>给元素添加 <strong>转换属性</strong> <code>transform</code></li><li>属性值为 <code>translate(x,y)</code> 如 <code>transform:translate(50px,50px)</code>;</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>  <span class="token selector">div</span><span class="token punctuation">{</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>50px<span class="token punctuation">,</span>50px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-1-2-1-小结" tabindex="-1"><a class="header-anchor" href="#_1-1-2-1-小结" aria-hidden="true">#</a> 1.1.2.1. 小结</h4><ol><li><strong>translate</strong>中的百分比单位是相对于自身元素的 <code>translate:(50%,50%);</code></li><li><strong>translate</strong>类似定位，不会影响到其他元素的位置</li><li>对行内标签没有效果</li></ol><h3 id="_1-1-3-2d旋转-rotate" tabindex="-1"><a class="header-anchor" href="#_1-1-3-2d旋转-rotate" aria-hidden="true">#</a> 1.1.3. 2d旋转 rotate</h3><p>2d旋转指的是让元素在2维平面内顺时针旋转或者逆时针旋转</p><p>使用步骤：</p><ol><li>给元素添加转换属性 <code>transform</code></li><li>属性值为 <code>rotate(角度)</code> 如 <code>transform:rotate(30deg)</code> 顺时针方向旋转<strong>30度</strong></li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span><span class="token punctuation">{</span>
      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在浏览器中手动修改 <strong>rotate</strong></p><p>观察过后，2d旋转有以下特点</p><ol><li>角度为正时 顺时针 负时 为逆时针</li><li>默认旋转的中心点是元素的中心点</li></ol><h3 id="_1-1-4-转换中心-transform-origin-了解" tabindex="-1"><a class="header-anchor" href="#_1-1-4-转换中心-transform-origin-了解" aria-hidden="true">#</a> 1.1.4. 转换中心 transform-origin 了解</h3><p>该属性可以修改元素旋转的时候的中心点</p><ol><li>transform-origin:<strong>50% 50%;</strong> 默认值 元素的中心位置 百分比是相对于自身的宽度和高度</li><li>transform-origin:<strong>top left;</strong> 左上角 和 transform-origin：0 0;相同</li><li>transform-origin:<strong>50px 50px;</strong> 距离左上角 50px 50px 的位置</li><li>transform-origin：<strong>0</strong>; 只写一个值的时候 第二个值默认为 50%;</li></ol><h3 id="_1-1-5-2d缩放-scale" tabindex="-1"><a class="header-anchor" href="#_1-1-5-2d缩放-scale" aria-hidden="true">#</a> 1.1.5. 2d缩放 scale</h3><p>缩放，顾名思义，可以放大和缩小。 只要给元素添加上了这个属性就能控制它放大还是缩小</p><p>步骤：</p><ol><li>给元素添加转换属性 <code>transform</code></li><li>转换的属性值为 <code>scale(宽的倍数,高的倍数)</code> 如 宽变为两倍，高变为3倍 <code>transform:scale(2,3)</code></li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span><span class="token punctuation">{</span>
    <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">scale</span><span class="token punctuation">(</span>2<span class="token punctuation">,</span>3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-1-5-1-小结" tabindex="-1"><a class="header-anchor" href="#_1-1-5-1-小结" aria-hidden="true">#</a> 1.1.5.1. 小结</h4><ol><li>transform:scale(1,1) 放大一倍 相对于没有放大</li><li>transform:scale(2,2) 宽和高都放大了2倍</li><li>transform:scale(2) 只写一个参数 第二个参数则和第一个参数一样 相当于 scale(2,2)</li><li>transform:scale(0.5,0.5) 缩小</li><li>transform:scale(-2,-2) 反向放大2倍 很少用负数 容易让人产生误解</li></ol><h2 id="_2-1-动画-animation" tabindex="-1"><a class="header-anchor" href="#_2-1-动画-animation" aria-hidden="true">#</a> 2.1. 动画 animation</h2><p>初学者容易对 <strong>动画</strong> 和 <strong>过渡</strong> 傻傻分不清楚</p><p>过渡 只能看到一次变化过程 如 <strong>宽度 1000px 变化到 100px</strong></p><p><strong>动画 可以设置变化的次数 甚至是无数次</strong></p><h3 id="_2-1-1-步骤" tabindex="-1"><a class="header-anchor" href="#_2-1-1-步骤" aria-hidden="true">#</a> 2.1.1. 步骤</h3><ol><li>在css中定义动画函数</li><li>给目标元素调用动画函数</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>    <span class="token comment">/* 1 声明动画函数 */</span>

    <span class="token atrule"><span class="token rule">@keyframes</span> ani_div</span> <span class="token punctuation">{</span>
      <span class="token selector">0%</span><span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token selector">50%</span><span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token selector">100%</span><span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token selector">div</span> <span class="token punctuation">{</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>
      <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>
      <span class="token comment">/* 2 调用动画 */</span>
      <span class="token property">animation-name</span><span class="token punctuation">:</span> ani_div<span class="token punctuation">;</span>
      <span class="token comment">/* 持续时间 */</span>
      <span class="token property">animation-duration</span><span class="token punctuation">:</span> 2s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-2-语法1" tabindex="-1"><a class="header-anchor" href="#_2-1-2-语法1" aria-hidden="true">#</a> 2.1.2. 语法1</h3><ol><li><p>动画名</p><p>设置要使用的动画名 <code>animation-name:xxx;</code></p></li><li><p>持续时间</p><p>设置动画播放的持续时间 <code>animation-duration:3s</code></p></li><li><p>速度曲线</p><p>和设置过渡的速度曲线一样 <code>animation-timing-function:linear;</code></p><ul><li>linear： 匀速</li><li>ease： 慢-快-慢 默认值</li><li>ease-in： 慢-快。</li><li>ease-out： 快-慢。</li><li>ease-in-out： 慢-快-慢。</li></ul></li><li><p>延迟时间</p><p><code>animation-delay: 0s;</code></p></li><li><p>循环次数</p><p>设置动画播放的循环次数 <code>animation-iteration-count: 2;</code> <strong>infinite</strong> 为无限循环</p></li><li><p>循环方向</p><p><code>animation-direction</code></p><p>如在动画中定义了 <strong>0%：红色</strong> <strong>100%：黑色</strong> 那么 当属性值为</p><ol><li><strong>normal</strong> 默认值 <strong>红 -&gt; 黑</strong></li><li><strong>reverse</strong> 反向运行 <strong>黑 -&gt; 红</strong></li><li><strong>alternate</strong> 正-反-正... <strong>红 -&gt; 黑 -&gt; 红...</strong></li><li><strong>alternate-reverse</strong> 反-正-反.. <strong>黑 -&gt; 红 -&gt; 黑 ...</strong></li><li>以上与循环次数有关</li></ol></li><li><p>动画等待或者结束的状态</p><p><code>animation-fill-mode</code> 设置动画在等待或者结束的时候的状态</p><ul><li><strong>forwards</strong>：动画结束后，元素样式停留在 100% 的样式</li><li><strong>backwards</strong>： 在延迟等待的时间内，元素样式停留在 0% 的样式</li><li><strong>both</strong>： 同时设置了 forwards和backwards两个属性值</li></ul></li><li><p>暂停和播放</p><p><code>animation-play-state</code> 控制 <strong>播放</strong> 还是 <strong>暂停</strong></p><p><code>running</code> 播放 <code>paused</code> 暂停</p></li></ol><h3 id="_2-1-3-复合写法" tabindex="-1"><a class="header-anchor" href="#_2-1-3-复合写法" aria-hidden="true">#</a> 2.1.3. 复合写法</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation</span><span class="token punctuation">:</span> name duration timing-function delay iteration-count direction fill-mode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-1-4-多个动画写法" tabindex="-1"><a class="header-anchor" href="#_2-1-4-多个动画写法" aria-hidden="true">#</a> 2.1.4. 多个动画写法</h3><p>用逗号分隔</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation</span><span class="token punctuation">:</span>
name duration timing-function delay iteration-count direction fill-mode，
<span class="token property">animation</span><span class="token punctuation">:</span> name duration timing-function delay iteration-count direction fill-mode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-5-动画结束事件animationend" tabindex="-1"><a class="header-anchor" href="#_2-1-5-动画结束事件animationend" aria-hidden="true">#</a> 2.1.5. 动画结束事件animationend</h3><p>元素在动画结束之后，会自动触发的事件 <strong>animationend</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;animationend&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;div的动画结束之后，触发&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-2-1-动画库animate-css" tabindex="-1"><a class="header-anchor" href="#_2-2-1-动画库animate-css" aria-hidden="true">#</a> 2.2.1 动画库animate.css</h2><p>封装了常见的有意思的小动画 <strong>发疯似的建议看官网来学习使用</strong></p>`,50),d={href:"https://daneden.github.io/animate.css/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.awesomes.cn/repo/daneden/animate-css",target:"_blank",rel:"noopener noreferrer"},m=t(`<h3 id="_2-3-1-使用步骤" tabindex="-1"><a class="header-anchor" href="#_2-3-1-使用步骤" aria-hidden="true">#</a> 2.3.1. 使用步骤</h3><ol><li><p>引入css文件</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>animate.min.css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>给元素添加对应的class</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>animated infinite bounce<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>快来看看我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>简单解读：</p><p><code>animated</code> 必须添加的class</p><p><code>infinite</code> 无限播放</p><p><code>bounce</code> 弹跳动画的效果，可以查官网自己选择喜欢的</p></li></ol><h3 id="_2-3-2-css3兼容处理" tabindex="-1"><a class="header-anchor" href="#_2-3-2-css3兼容处理" aria-hidden="true">#</a> 2.3.2. css3兼容处理</h3><p>css3涉及到较多的新属性，某些低版本（如ie8以及以下）的浏览器对css3的支持程度不够，因此需要做以下处理</p><p>添加对应的浏览器的前缀 常见前缀如下</p><ul><li>谷歌 -webkit</li><li>火狐 -moz</li><li>IE -ms</li></ul><p>如对 <code>border-radius</code> 进行兼容性处理</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>      <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 30px 10px<span class="token punctuation">;</span>
      <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> 30px 10px<span class="token punctuation">;</span>
      <span class="token property">-ms-border-radius</span><span class="token punctuation">:</span> 30px 10px<span class="token punctuation">;</span>
	  // border-radius 一定要放在最后
      <span class="token property">border-radius</span><span class="token punctuation">:</span> 30px 10px<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果发现添加前缀也解决不了兼容性问题，那么就不要使用该css3属性</p>`,9);function k(v,g){const a=o("ExternalLinkIcon");return p(),l("div",null,[r,n("p",null,[n("a",d,[s("官网"),e(a)])]),n("p",null,[n("a",u,[s("中文"),e(a)])]),m])}const f=i(c,[["render",k],["__file","02-html5css3.html.vue"]]);export{f as default};
