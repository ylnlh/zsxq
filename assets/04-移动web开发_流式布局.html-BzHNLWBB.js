import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as d,o as p,c as l,a as e,d as i,b as s,f as a}from"./app-tt0ZouaX.js";const t={},o=a(`<p>​</p><h1 id="移动web开发流式布局" tabindex="-1"><a class="header-anchor" href="#移动web开发流式布局" aria-hidden="true">#</a> 移动web开发流式布局</h1><h3 id="_1-0-移动端基础" tabindex="-1"><a class="header-anchor" href="#_1-0-移动端基础" aria-hidden="true">#</a> 1.0 移动端基础</h3><h4 id="_1-1浏览器现状" tabindex="-1"><a class="header-anchor" href="#_1-1浏览器现状" aria-hidden="true">#</a> 1.1浏览器现状</h4><p>PC端常见浏览器：360浏览器、谷歌浏览器、火狐浏览器、QQ浏览器、百度浏览器、搜狗浏览器、IE浏览器。</p><p>移动端常见浏览器：UC浏览器，QQ浏览器，欧朋浏览器，百度手机浏览器，360安全浏览器，谷歌浏览器，搜狗手机浏览器，猎豹浏览器，以及其他杂牌浏览器。</p><p>国内的UC和QQ，百度等手机浏览器都是根据Webkit修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于Android修改开发的一样。</p><p><strong>总结：兼容移动端主流浏览器，处理Webkit内核浏览器即可。</strong></p><h4 id="_1-2-手机屏幕的现状" tabindex="-1"><a class="header-anchor" href="#_1-2-手机屏幕的现状" aria-hidden="true">#</a> 1.2 手机屏幕的现状</h4><ul><li>移动端设备屏幕尺寸非常多，碎片化严重。</li><li>Android设备有多种分辨率：480x800, 480x854, 540x960, 720x1280，1080x1920等，还有传说中的2K，4k屏。</li><li>近年来iPhone的碎片化也加剧了，其设备的主要分辨率有：640x960, 640x1136, 750x1334, 1242x2208等。</li><li>作为开发者无需关注这些分辨率，因为我们常用的尺寸单位是 px 。</li></ul><h4 id="_1-3常见移动端屏幕尺寸" tabindex="-1"><a class="header-anchor" href="#_1-3常见移动端屏幕尺寸" aria-hidden="true">#</a> 1.3常见移动端屏幕尺寸</h4><h4 id="_1-4移动端调试方法" tabindex="-1"><a class="header-anchor" href="#_1-4移动端调试方法" aria-hidden="true">#</a> 1.4移动端调试方法</h4><ul><li>Chrome DevTools（谷歌浏览器）的模拟手机调试</li><li>搭建本地web服务器，手机和服务器一个局域网内，通过手机访问服务器</li><li>使用外网服务器，直接IP或域名访问</li></ul><h3 id="_2-0-视口" tabindex="-1"><a class="header-anchor" href="#_2-0-视口" aria-hidden="true">#</a> 2.0 视口</h3><p>视口（viewport）就是浏览器显示页面内容的屏幕区域。 视口可以分为布局视口、视觉视口和理想视口</p><h4 id="_2-1-布局视口-layout-viewport" tabindex="-1"><a class="header-anchor" href="#_2-1-布局视口-layout-viewport" aria-hidden="true">#</a> 2.1 布局视口 layout viewport</h4><p>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</p><p>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</p><p>####2.2视觉视口 visual viewport</p><p>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</p><p>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</p><h4 id="_2-3理想视口-ideal-viewport" tabindex="-1"><a class="header-anchor" href="#_2-3理想视口-ideal-viewport" aria-hidden="true">#</a> 2.3理想视口 ideal viewport</h4><p>为了使网站在移动端有最理想的浏览和阅读宽度而设定</p><p>理想视口，对设备来讲，是最理想的视口尺寸</p><p>需要手动添写meta视口标签通知浏览器操作</p><p>meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽</p><p><strong>总结：我们开发最终会用理想视口，而理想视口就是将布局视口的宽度修改为视觉视口</strong></p><h4 id="_2-4meta标签" tabindex="-1"><a class="header-anchor" href="#_2-4meta标签" aria-hidden="true">#</a> 2.4meta标签</h4><p>最标准的viewport设置</p><ul><li>视口宽度和设备保持一致</li><li>视口的默认缩放比例1.0</li><li>不允许用户自行缩放</li><li>最大允许的缩放比例1.0</li><li>最小允许的缩放比例1.0</li></ul><h3 id="_3-0二倍图" tabindex="-1"><a class="header-anchor" href="#_3-0二倍图" aria-hidden="true">#</a> 3.0二倍图</h3><p>####3.1物理像素&amp;物理像素比</p><p>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6 是 750* 1334</p><p>我们开发时候的1px 不是一定等于1个物理像素的</p><p>一个px的能显示的物理像素点的个数，称为物理像素比或屏幕像素比</p><p>如果把1张100*100的图片放到手机里面会按照物理像素比给我们缩放</p><p>lRetina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。</p><p>对于一张 50px * 50px 的图片,在手机或 Retina 屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊</p><p>在标准的viewport设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题</p><p>通常使用二倍图， 因为iPhone 6 的影响背景图片 注意缩放问题</p><h4 id="_3-2背景缩放background-size" tabindex="-1"><a class="header-anchor" href="#_3-2背景缩放background-size" aria-hidden="true">#</a> 3.2背景缩放background-size</h4><p>background-size 属性规定背景图像的尺寸</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>background-size: 背景图片宽度 背景图片高度;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>单位： 长度|百分比|cover|contain;</p><p>cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</p><p>contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</p><h3 id="_4-0-移动开发选择和技术解决方案" tabindex="-1"><a class="header-anchor" href="#_4-0-移动开发选择和技术解决方案" aria-hidden="true">#</a> 4.0 移动开发选择和技术解决方案</h3><p>####4.1移动端主流方案</p><p>1.单独制作移动端页面（主流）</p><p>通常情况下，网址域名前面加 m(mobile) 可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。</p><p>也就是说，PC端和移动端为两套网站，pc端是pc断的样式，移动端在写一套，专门针对移动端适配的一套网站</p><p>2.响应式页面兼容移动端（其次）</p><p>响应式网站：即pc和移动端共用一套网站，只不过在不同屏幕下，样式会自动适配</p><h4 id="_4-2-移动端技术解决方案" tabindex="-1"><a class="header-anchor" href="#_4-2-移动端技术解决方案" aria-hidden="true">#</a> 4.2 移动端技术解决方案</h4><p>1.移动端浏览器兼容问题</p><p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。</p><p>我们可以放心使用 H5 标签和 CSS3 样式。</p><p>同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</p><p>2.移动端公共样式</p><p>移动端 CSS 初始化推荐使用 normalize.css/</p><p>Normalize.css：保护了有价值的默认值</p><p>Normalize.css：修复了浏览器的bug</p><p>Normalize.css：是模块化的</p><p>Normalize.css：拥有详细的文档</p>`,64),h={href:"http://necolas.github.io/normalize.css/",target:"_blank",rel:"noopener noreferrer"},c=a(`<h4 id="_4-3-移动端大量使用-css3盒子模型box-sizin" tabindex="-1"><a class="header-anchor" href="#_4-3-移动端大量使用-css3盒子模型box-sizin" aria-hidden="true">#</a> 4.3 移动端大量使用 CSS3盒子模型box-sizin</h4><p>传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding</p><p>CSS3盒子模型： 盒子的宽度= CSS中设置的宽度width 里面包含了 border 和 padding</p><p>也就是说，我们的CSS3中的盒子模型， padding 和 border 不会撑大盒子了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/*CSS3盒子模型*/
box-sizing: border-box;
/*传统盒子模型*/
box-sizing: content-box;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>移动端可以全部CSS3 盒子模型</p><p>PC端如果完全需要兼容，我们就用传统模式，如果不考虑兼容性，我们就选择 CSS3 盒子模型</p><h4 id="_4-4移动端特殊样式" tabindex="-1"><a class="header-anchor" href="#_4-4移动端特殊样式" aria-hidden="true">#</a> 4.4移动端特殊样式</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    /*CSS3盒子模型*/
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    /*点击高亮我们需要清除清除  设置为transparent 完成透明*/
    -webkit-tap-highlight-color: transparent;
    /*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/
    -webkit-appearance: none;
    /*禁用长按页面时的弹出菜单*/
    img,a { -webkit-touch-callout: none; }

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-0移动端常见布局" tabindex="-1"><a class="header-anchor" href="#_5-0移动端常见布局" aria-hidden="true">#</a> 5.0移动端常见布局</h3><p>移动端单独制作</p><ul><li>流式布局（百分比布局）</li><li>flex 弹性布局（强烈推荐）</li><li>less+rem+媒体查询布局</li><li>混合布局</li></ul><p>响应式</p><ul><li>媒体查询</li><li>bootstarp</li></ul><p>流式布局：</p><p>流式布局，就是百分比布局，也称非固定像素布局。</p><p>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</p><p>流式布局方式是移动web开发使用的比较常见的布局方式。</p>`,18);function b(u,_){const r=d("ExternalLinkIcon");return p(),l("div",null,[o,e("p",null,[i("官网地址： "),e("a",h,[i("http://necolas.github.io/normalize.css/"),s(r)])]),c])}const m=n(t,[["render",b],["__file","04-移动web开发_流式布局.html.vue"]]);export{m as default};
