import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as t}from"./app-tt0ZouaX.js";const e={},p=t(`<h1 id="css高级技巧" tabindex="-1"><a class="header-anchor" href="#css高级技巧" aria-hidden="true">#</a> CSS高级技巧</h1><p><strong>目标</strong></p><ul><li>理解 <ul><li>能说出元素显示隐藏最常见的写法</li><li>能说出精灵图产生的目的</li><li>能说出去除图片底侧空白缝隙的方法</li></ul></li><li>应用 <ul><li>能写出最常见的鼠标样式</li><li>能使用精灵图技术</li><li>能用滑动门做导航栏案例</li></ul></li></ul><h2 id="_1-元素的显示与隐藏" tabindex="-1"><a class="header-anchor" href="#_1-元素的显示与隐藏" aria-hidden="true">#</a> 1. 元素的显示与隐藏</h2><ul><li><p>目的</p><p>让一个元素在页面中消失或者显示出来</p></li><li><p>场景</p><p>类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！</p></li></ul><h3 id="_1-1-display-显示-重点" tabindex="-1"><a class="header-anchor" href="#_1-1-display-显示-重点" aria-hidden="true">#</a> 1.1 display 显示（重点）</h3><ul><li><p>display 设置或检索对象是否及如何显示。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>display: none 隐藏对象

display：block 除了转换为块级元素之外，同时还有显示元素的意思。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>特点： 隐藏之后，不再保留位置。</p></li></ul><p>实际开发场景：</p><blockquote><p>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</p></blockquote><h3 id="_1-2-visibility-可见性-了解" tabindex="-1"><a class="header-anchor" href="#_1-2-visibility-可见性-了解" aria-hidden="true">#</a> 1.2 visibility 可见性 (了解)</h3><ul><li><p>设置或检索是否显示对象。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>visibility：visible ; 　对象可视

visibility：hidden; 　  对象隐藏
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>特点： 隐藏之后，继续保留原有位置。（停职留薪）</p></li></ul><h3 id="_1-3-overflow-溢出-重点" tabindex="-1"><a class="header-anchor" href="#_1-3-overflow-溢出-重点" aria-hidden="true">#</a> 1.3 overflow 溢出(重点)</h3><ul><li>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>visible</strong></td><td>不剪切内容也不添加滚动条</td></tr><tr><td><strong>hidden</strong></td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td><strong>scroll</strong></td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td><strong>auto</strong></td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table><p>实际开发场景：</p><ol><li>清除浮动</li><li>隐藏超出内容，隐藏掉, 不允许内容超过父盒子。</li></ol><h3 id="_1-4-显示与隐藏总结" tabindex="-1"><a class="header-anchor" href="#_1-4-显示与隐藏总结" aria-hidden="true">#</a> 1.4 显示与隐藏总结</h3><table><thead><tr><th>属性</th><th>区别</th><th>用途</th></tr></thead><tbody><tr><td><strong>display</strong></td><td>隐藏对象，不保留位置</td><td>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</td></tr><tr><td><strong>visibility</strong></td><td>隐藏对象，保留位置</td><td>使用较少</td></tr><tr><td><strong>overflow</strong></td><td>只是隐藏超出大小的部分</td><td>1. 可以清除浮动 2. 保证盒子里面的内容不会超出该盒子范围</td></tr></tbody></table><h2 id="_2-css用户界面样式" tabindex="-1"><a class="header-anchor" href="#_2-css用户界面样式" aria-hidden="true">#</a> 2. CSS用户界面样式</h2><ul><li>所谓的界面样式， 就是更改一些用户操作样式，以便提高更好的用户体验。 <ul><li>更改用户的鼠标样式 (滚动条因为兼容性非常差，我们不研究)</li><li>表单轮廓等。</li><li>防止表单域拖拽</li></ul></li></ul><h3 id="_2-1-鼠标样式cursor" tabindex="-1"><a class="header-anchor" href="#_2-1-鼠标样式cursor" aria-hidden="true">#</a> 2.1 鼠标样式cursor</h3><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>default</strong></td><td>小白 默认</td></tr><tr><td><strong>pointer</strong></td><td>小手</td></tr><tr><td><strong>move</strong></td><td>移动</td></tr><tr><td><strong>text</strong></td><td>文本</td></tr><tr><td><strong>not-allowed</strong></td><td>禁止</td></tr><tr><td>鼠标放我身上查看效果哦：</td><td></td></tr></tbody></table><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>default</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>我是小白<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>pointer</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>我是小手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>move</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>我是移动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>text</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>我是文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>not-allowed</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>我是文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-轮廓线-outline" tabindex="-1"><a class="header-anchor" href="#_2-2-轮廓线-outline" aria-hidden="true">#</a> 2.2 轮廓线 outline</h3><p>是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token property">outline</span> <span class="token punctuation">:</span> outline-color ||outline-style || outline-width 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是我们都不关心可以设置多少，我们平时都是去掉的。 li</p><p>最直接的写法是 ： outline: 0; 或者 outline: none;</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">outline</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-3-防止拖拽文本域resize" tabindex="-1"><a class="header-anchor" href="#_2-3-防止拖拽文本域resize" aria-hidden="true">#</a> 2.3 防止拖拽文本域resize</h3><p>实际开发中，我们文本域右下角是不可以拖拽：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span>  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">resize</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-4-用户界面样式总结" tabindex="-1"><a class="header-anchor" href="#_2-4-用户界面样式总结" aria-hidden="true">#</a> 2.4 用户界面样式总结</h3><table><thead><tr><th>属性</th><th>用途</th><th>用途</th></tr></thead><tbody><tr><td><strong>鼠标样式</strong></td><td>更改鼠标样式cursor</td><td>样式很多，重点记住 pointer</td></tr><tr><td><strong>轮廓线</strong></td><td>表单默认outline</td><td>outline 轮廓线，我们一般直接去掉，border是边框，我们会经常用</td></tr><tr><td>防止拖拽</td><td>主要针对文本域resize</td><td>防止用户随意拖拽文本域，造成页面布局混乱，我们resize:none</td></tr></tbody></table><h2 id="_3-vertical-align-垂直对齐" tabindex="-1"><a class="header-anchor" href="#_3-vertical-align-垂直对齐" aria-hidden="true">#</a> 3. vertical-align 垂直对齐</h2><ul><li>有宽度的块级元素居中对齐，是margin: 0 auto;</li><li>让文字居中对齐，是 text-align: center;</li></ul><p>但是我们从来没有讲过有垂直居中的属性。</p><p>vertical-align 垂直对齐，它只针对于<strong>行内元素</strong>或者<strong>行内块元素</strong>，</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">vertical-align</span> <span class="token punctuation">:</span> baseline |top |middle |bottom 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置或检索对象内容的垂直对其方式。</p><ul><li><p>注意：</p><p>vertical-align 不影响块级元素中的内容对齐，它只针对于<strong>行内元素</strong>或者<strong>行内块元素</strong>，</p><p>特别是行内块元素， <strong>通常用来控制图片/表单与文字的对齐</strong>。</p></li></ul><h3 id="_3-1-图片、表单和文字对齐" tabindex="-1"><a class="header-anchor" href="#_3-1-图片、表单和文字对齐" aria-hidden="true">#</a> 3.1 图片、表单和文字对齐</h3><p>所以我们知道，我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。</p><h3 id="_3-2-去除图片底侧空白缝隙" tabindex="-1"><a class="header-anchor" href="#_3-2-去除图片底侧空白缝隙" aria-hidden="true">#</a> 3.2 去除图片底侧空白缝隙</h3><ul><li><p>原因：</p><p>图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。</p><p>就是图片底侧会有一个空白缝隙。</p></li><li><p>解决的方法就是：</p><ul><li><p>给img vertical-align:middle | top| bottom等等。 让图片不要和基线对齐。</p></li><li><p>给img 添加 display：block; 转换为块级元素就不会存在问题了。</p></li></ul></li></ul><h2 id="_4-溢出的文字省略号显示" tabindex="-1"><a class="header-anchor" href="#_4-溢出的文字省略号显示" aria-hidden="true">#</a> 4. 溢出的文字省略号显示</h2><h3 id="_4-1-white-space" tabindex="-1"><a class="header-anchor" href="#_4-1-white-space" aria-hidden="true">#</a> 4.1 white-space</h3><ul><li>white-space设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>white-space:normal ；默认处理方式

white-space:nowrap ；　强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-text-overflow-文字溢出" tabindex="-1"><a class="header-anchor" href="#_4-2-text-overflow-文字溢出" aria-hidden="true">#</a> 4.2 text-overflow 文字溢出</h3><ul><li>设置或检索是否使用一个省略标记（...）标示对象内文本的溢出</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>text-overflow : clip ；不显示省略标记（...），而是简单的裁切 

text-overflow：ellipsis ； 当对象内文本溢出时显示省略标记（...）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：</p><p>一定要首先强制一行内显示，再次和overflow属性 搭配使用</p><h3 id="_4-3-总结三步曲" tabindex="-1"><a class="header-anchor" href="#_4-3-总结三步曲" aria-hidden="true">#</a> 4.3 总结三步曲</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>  <span class="token comment">/*1. 先强制一行内显示文本*/</span>
      <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
  <span class="token comment">/*2. 超出的部分隐藏*/</span>
      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token comment">/*3. 文字用省略号替代超出的部分*/</span>
      <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-css精灵技术-sprite-重点" tabindex="-1"><a class="header-anchor" href="#_5-css精灵技术-sprite-重点" aria-hidden="true">#</a> 5. CSS精灵技术（sprite) 重点</h2><h3 id="_5-1-为什么需要精灵技术" tabindex="-1"><a class="header-anchor" href="#_5-1-为什么需要精灵技术" aria-hidden="true">#</a> 5.1 为什么需要精灵技术</h3><p>图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</p><p>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。</p><p><strong>pink老师告诉你我们为什么需要精灵技术：</strong></p><blockquote><p><strong>为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度。</strong></p></blockquote><p>出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。</p><h3 id="_5-2-精灵技术讲解" tabindex="-1"><a class="header-anchor" href="#_5-2-精灵技术讲解" aria-hidden="true">#</a> 5.2 精灵技术讲解</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图。</p><p>这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。</p><p>我们需要使用CSS的</p><ul><li>background-image、</li><li>background-repeat</li><li>background-position属性进行背景定位，</li><li>其中最关键的是使用background-position 属性精确地定位。</li></ul><h3 id="_5-3-精灵技术使用的核心总结" tabindex="-1"><a class="header-anchor" href="#_5-3-精灵技术使用的核心总结" aria-hidden="true">#</a> 5.3 精灵技术使用的核心总结</h3><p>首先我们知道，css精灵技术主要针对于背景图片，插入的图片img 是不需要这个技术的。</p><ol><li>精确测量，每个小背景图片的大小和 位置。</li><li>给盒子指定小背景图片时， 背景定位基本都是 负值。</li></ol><h3 id="_5-4-制作精灵图-了解" tabindex="-1"><a class="header-anchor" href="#_5-4-制作精灵图-了解" aria-hidden="true">#</a> 5.4 制作精灵图(了解)</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。</p><p>大部分情况下，精灵图都是网页美工做。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。
我们可以横向摆放也可以纵向摆放，但是每个图片之间留有适当的空隙
在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结束语： 小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。</p><h2 id="_6-滑动门" tabindex="-1"><a class="header-anchor" href="#_6-滑动门" aria-hidden="true">#</a> 6. 滑动门</h2><p>先来体会下现实中的滑动门,或者你可以叫做推拉门：</p><h3 id="滑动门出现的背景" tabindex="-1"><a class="header-anchor" href="#滑动门出现的背景" aria-hidden="true">#</a> 滑动门出现的背景</h3><p>制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？</p><p>为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。</p><p>http://weixin.qq.com/</p><h3 id="核心技术" tabindex="-1"><a class="header-anchor" href="#核心技术" aria-hidden="true">#</a> 核心技术</h3><p>核心技术就是利用CSS精灵（主要是背景位置）和 盒子padding撑开宽度, 以便能适应不同字数的导航栏。</p><p>一般的经典布局都是这样的：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>导航栏内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>css样式</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">*</span> <span class="token punctuation">{</span>
      <span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
      <span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token selector">body</span><span class="token punctuation">{</span>
      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>images/wx.jpg<span class="token punctuation">)</span></span> repeat-x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">.father</span> <span class="token punctuation">{</span>
      <span class="token property">padding-top</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">li</span> <span class="token punctuation">{</span>
      <span class="token property">padding-left</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 33px<span class="token punctuation">;</span>
      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
      <span class="token property">line-height</span><span class="token punctuation">:</span> 33px<span class="token punctuation">;</span>
      <span class="token property">margin</span><span class="token punctuation">:</span>0  10px<span class="token punctuation">;</span>
      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./images/to.png<span class="token punctuation">)</span></span> no-repeat left <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">a</span> <span class="token punctuation">{</span>
      <span class="token property">padding-right</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 33px<span class="token punctuation">;</span>
      <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
      <span class="token property">color</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span>
      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./images/to.png<span class="token punctuation">)</span></span> no-repeat right <span class="token punctuation">;</span>
      <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">li:hover,
     li:hover a</span> <span class="token punctuation">{</span>
      <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./images/ao.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ol><li>a 设置 背景左侧，padding撑开合适宽度。</li><li>span 设置背景右侧， padding撑开合适宽度 剩下由文字继续撑开宽度。</li><li>之所以a包含span就是因为 整个导航都是可以点击的。</li></ol><h2 id="_7-拓展" tabindex="-1"><a class="header-anchor" href="#_7-拓展" aria-hidden="true">#</a> 7. 拓展@</h2><h3 id="_7-1-margin负值之美" tabindex="-1"><a class="header-anchor" href="#_7-1-margin负值之美" aria-hidden="true">#</a> 7.1 margin负值之美</h3><h4 id="_1-负边距-定位-水平垂直居中" tabindex="-1"><a class="header-anchor" href="#_1-负边距-定位-水平垂直居中" aria-hidden="true">#</a> 1). 负边距+定位：水平垂直居中</h4><p>咱们前面讲过， 一个绝对定位的盒子， 利用 父级盒子的 50%， 然后 往左(上) 走 自己宽度的一半 ，可以实现盒子水平垂直居中。</p><h4 id="_2-压住盒子相邻边框" tabindex="-1"><a class="header-anchor" href="#_2-压住盒子相邻边框" aria-hidden="true">#</a> 2). 压住盒子相邻边框</h4><h3 id="_7-2-css三角形之美" tabindex="-1"><a class="header-anchor" href="#_7-2-css三角形之美" aria-hidden="true">#</a> 7.2 CSS三角形之美</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token selector">div</span> <span class="token punctuation">{</span>

 	<span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> 

    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span>0；
    <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
	<span class="token property">border-top</span><span class="token punctuation">:</span> 10px solid red<span class="token punctuation">;</span>

	<span class="token property">border-right</span><span class="token punctuation">:</span> 10px solid green<span class="token punctuation">;</span>

	<span class="token property">border-bottom</span><span class="token punctuation">:</span> 10px solid blue<span class="token punctuation">;</span>

	<span class="token property">border-left</span><span class="token punctuation">:</span> 10px solid #000<span class="token punctuation">;</span> 

 <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一张图， 你就知道 css 三角是怎么来的了, 做法如下：</p><ol><li>我们用css 边框可以模拟三角效果</li><li>宽度高度为0</li><li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li><li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0; line-height: 0;</li></ol><p>​</p>`,101),l=[p];function i(o,c){return a(),s("div",null,l)}const d=n(e,[["render",i],["__file","03-HTML常用标签.html.vue"]]);export{d as default};
