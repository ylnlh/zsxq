const e=JSON.parse('{"key":"v-d80ced88","path":"/pages/front-end/%E6%A1%86%E6%9E%B6/react/21-styled-components%E7%9A%84%E4%BD%BF%E7%94%A8.html","title":"21 styled-components的使用","lang":"zh-CN","frontmatter":{"description":"1.为什么要用这个 我们都知道，我们从最开始学css的时候，为了避免写的样式影响到另外的地方。所以我们这样来写的。 首先给一个元素写了一个唯一id | class，然后在这个里面写对应的样式，就可以避免影响到其它地方的代码。但是，如果项目是多人协作，那就可能存在命名冲突了，所以我们想要一种技术来让整个项目起的类名都是唯一的id。避免样式冲突等问题。所以...","head":[["meta",{"property":"og:url","content":"https://ylnlh.github.io/zsxq/pages/front-end/%E6%A1%86%E6%9E%B6/react/21-styled-components%E7%9A%84%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"21 styled-components的使用"}],["meta",{"property":"og:description","content":"1.为什么要用这个 我们都知道，我们从最开始学css的时候，为了避免写的样式影响到另外的地方。所以我们这样来写的。 首先给一个元素写了一个唯一id | class，然后在这个里面写对应的样式，就可以避免影响到其它地方的代码。但是，如果项目是多人协作，那就可能存在命名冲突了，所以我们想要一种技术来让整个项目起的类名都是唯一的id。避免样式冲突等问题。所以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T09:59:42.000Z"}],["meta",{"property":"article:author","content":"Mr.Yang"}],["meta",{"property":"article:modified_time","content":"2024-03-26T09:59:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"21 styled-components的使用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-26T09:59:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Yang\\",\\"url\\":\\"https://ylnlh.github.io/zsxq/\\"}]}"]]},"headers":[{"level":2,"title":"1.为什么要用这个","slug":"_1-为什么要用这个","link":"#_1-为什么要用这个","children":[]},{"level":2,"title":"2.简介","slug":"_2-简介","link":"#_2-简介","children":[]},{"level":2,"title":"3.安装","slug":"_3-安装","link":"#_3-安装","children":[]},{"level":2,"title":"4.基本使用","slug":"_4-基本使用","link":"#_4-基本使用","children":[]},{"level":2,"title":"5.基于props动态实现","slug":"_5-基于props动态实现","link":"#_5-基于props动态实现","children":[]},{"level":2,"title":"6.样式继承","slug":"_6-样式继承","link":"#_6-样式继承","children":[]},{"level":2,"title":"7.条件渲染","slug":"_7-条件渲染","link":"#_7-条件渲染","children":[]},{"level":2,"title":"8.普通样式","slug":"_8-普通样式","link":"#_8-普通样式","children":[]},{"level":2,"title":"9.attrs","slug":"_9-attrs","link":"#_9-attrs","children":[]},{"level":2,"title":"10.动画","slug":"_10-动画","link":"#_10-动画","children":[]},{"level":2,"title":"11.Coming from CSS","slug":"_11-coming-from-css","link":"#_11-coming-from-css","children":[{"level":3,"title":"11.1 styled-components 如何在组件中工作?","slug":"_11-1-styled-components-如何在组件中工作","link":"#_11-1-styled-components-如何在组件中工作","children":[]},{"level":3,"title":"styled-components 如何在组件中工作?","slug":"styled-components-如何在组件中工作","link":"#styled-components-如何在组件中工作","children":[]},{"level":3,"title":"11.2 使用伪元素、选择器、嵌套语法","slug":"_11-2-使用伪元素、选择器、嵌套语法","link":"#_11-2-使用伪元素、选择器、嵌套语法","children":[]}]},{"level":2,"title":"12.媒体查询","slug":"_12-媒体查询","link":"#_12-媒体查询","children":[]},{"level":2,"title":"13.as prop","slug":"_13-as-prop","link":"#_13-as-prop","children":[]},{"level":2,"title":"14.样式化任意组件","slug":"_14-样式化任意组件","link":"#_14-样式化任意组件","children":[{"level":3,"title":"14.1 样式化组件","slug":"_14-1-样式化组件","link":"#_14-1-样式化组件","children":[]},{"level":3,"title":"14.2 样式化第三方组件","slug":"_14-2-样式化第三方组件","link":"#_14-2-样式化第三方组件","children":[]}]},{"level":2,"title":"15.主题切换","slug":"_15-主题切换","link":"#_15-主题切换","children":[{"level":3,"title":"15.1 基本使用","slug":"_15-1-基本使用","link":"#_15-1-基本使用","children":[]},{"level":3,"title":"15.2 函数主题","slug":"_15-2-函数主题","link":"#_15-2-函数主题","children":[]},{"level":3,"title":"15.3 在 styled-components 外使用主题","slug":"_15-3-在-styled-components-外使用主题","link":"#_15-3-在-styled-components-外使用主题","children":[]},{"level":3,"title":"15.4 theme prop","slug":"_15-4-theme-prop","link":"#_15-4-theme-prop","children":[]}]},{"level":2,"title":"16.Refs","slug":"_16-refs","link":"#_16-refs","children":[]},{"level":2,"title":"17.样式对象","slug":"_17-样式对象","link":"#_17-样式对象","children":[]},{"level":2,"title":"18.CSS Prop实现内联样式","slug":"_18-css-prop实现内联样式","link":"#_18-css-prop实现内联样式","children":[]},{"level":2,"title":"19.mixin","slug":"_19-mixin","link":"#_19-mixin","children":[]},{"level":2,"title":"20.性能问题","slug":"_20-性能问题","link":"#_20-性能问题","children":[]},{"level":2,"title":"21.配合TypeScript","slug":"_21-配合typescript","link":"#_21-配合typescript","children":[]}],"git":{"createdTime":1711447182000,"updatedTime":1711447182000,"contributors":[{"name":"yangle","email":"yanglenlh@163.com","commits":1}]},"readingTime":{"minutes":19.29,"words":5786},"filePathRelative":"pages/front-end/框架/react/21-styled-components的使用.md","localizedDate":"2024年3月26日","autoDesc":true}');export{e as data};
