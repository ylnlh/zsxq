import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as i,a as s,d as n,b as t,f as e}from"./app-tt0ZouaX.js";const l={},u=e(`<h1 id="_24-umijs基础" tabindex="-1"><a class="header-anchor" href="#_24-umijs基础" aria-hidden="true">#</a> 24 UmiJS基础</h1><h2 id="_1-常用配置项" tabindex="-1"><a class="header-anchor" href="#_1-常用配置项" aria-hidden="true">#</a> 1.常用配置项</h2><h3 id="_1-1-title" tabindex="-1"><a class="header-anchor" href="#_1-1-title" aria-hidden="true">#</a> 1.1 title</h3><ul><li>类型：<code>string</code></li><li>默认值：<code>null</code></li></ul><p>配置全局页面 title，暂时只支持静态的 Title。</p><p>比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，你还可以针对路由配置标题，比如，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Home&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/users&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Users&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们访问 <code>/</code> 标题是 <code>Home</code>，访问 <code>/users</code> 标题是 <code>Users</code>，访问 <code>/foo</code> 标题是默认的 <code>hi</code>。</p><p>注意：</p><ul><li>默认不会在 HTML 里输出 <code>&lt;title&gt;</code> 标签，通过动态渲染得到</li><li>配 <code>exportStatic</code> 后会为每个 HTML 输出 <code>&lt;title&gt;</code> 标签</li><li>如果需要自行通过 react-helmet 等方式渲染 title，配 <code>title: false</code> 可禁用内置的 title 渲染机制</li></ul><h3 id="_1-2-theme" tabindex="-1"><a class="header-anchor" href="#_1-2-theme" aria-hidden="true">#</a> 1.2 theme</h3><ul><li>类型：<code>object</code></li><li>默认值：<code>{}</code></li></ul><p>配置 less 变量主题。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;@primary-color&#39;</span><span class="token operator">:</span> <span class="token string">&#39;#1DA57A&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-favicons" tabindex="-1"><a class="header-anchor" href="#_1-3-favicons" aria-hidden="true">#</a> 1.3 favicons</h3><ul><li>类型：<code>string[]</code></li><li>默认值：<code>null</code></li></ul><p>支持配置多个 favicon 文件。配置 favicons 路径，可以是绝对路径，也可以是基于项目根目录的相对路径。</p><p>比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">favicon</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&#39;/assets/favicon.ico&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果要使用本地的图片，图片请放到 <code>public</code> 目录</p></blockquote><p>HTML 中会生成，</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shortcut icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image/x-icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/assets/favicon.ico<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>放到<code>src</code>目录下会自动在html中生成</p></blockquote><h3 id="_1-4-proxy" tabindex="-1"><a class="header-anchor" href="#_1-4-proxy" aria-hidden="true">#</a> 1.4 proxy</h3><ul><li>类型：<code>object</code></li><li>默认值：<code>{}</code></li></ul><p>配置代理功能。</p><p>比如，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;target&#39;</span><span class="token operator">:</span> <span class="token string">&#39;http://jsonplaceholder.typicode.com/&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;changeOrigin&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;pathRewrite&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;^/api&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后访问 <code>/api/users</code> 就能访问到 http://jsonplaceholder.typicode.com/users 的数据。</p><p>注意：proxy 功能仅在 dev 时有效。</p><h3 id="_1-5-alias" tabindex="-1"><a class="header-anchor" href="#_1-5-alias" aria-hidden="true">#</a> 1.5 alias</h3><ul><li>类型：<code>Record&lt;string, string&gt;</code></li><li>默认值：<code>{}</code></li></ul><p>配置别名，对 import 语句的 source 做映射。</p><p>比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;/tmp/to/foo&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后代码里 <code>import &#39;foo&#39;</code> 实际上会 <code>import &#39;/tmp/to/foo&#39;</code>。</p><p>有几个 <code>Tip</code>。</p><p>1、alias 的值最好用绝对路径，尤其是指向依赖时，记得加 <code>require.resolve</code>，比如，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ⛔</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token comment">// ✅</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;@c&#39;</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;node:path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./src/components&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用了<code>ts</code>，还需要配置</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token property">&quot;@c/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/components/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这样会把默认的配置覆盖，由于知识限制，暂时还未找到比较好的方法去解决。</p></blockquote><p>2、如果不需要子路径也被映射，记得加 <code>$</code> 后缀，比如</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// import &#39;foo/bar&#39; 会被映射到 import &#39;/tmp/to/foo/bar&#39;</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;/tmp/to/foo&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token comment">// import &#39;foo/bar&#39; 还是 import &#39;foo/bar&#39;，不会被修改</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">foo$</span><span class="token operator">:</span> <span class="token string">&#39;/tmp/to/foo&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-lessloader" tabindex="-1"><a class="header-anchor" href="#_1-6-lessloader" aria-hidden="true">#</a> 1.6 lessLoader</h3><ul><li>类型：<code>Object</code></li><li>默认值：<code>{ modifyVars: userConfig.theme, javascriptEnabled: true }</code></li></ul>`,49),r={href:"https://github.com/webpack-contrib/less-loader#lessoptions",target:"_blank",rel:"noopener noreferrer"},d={href:"https://lesscss.org/usage/#less-options-math",target:"_blank",rel:"noopener noreferrer"},k=e(`<p><code>src/styles/index.less</code></p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token variable">@myBg<span class="token punctuation">:</span></span> #bfa<span class="token punctuation">;</span>

<span class="token selector">.myMixin(<span class="token variable">@mixinBg</span>)</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@mixinBg</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.umirc.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  lessLoader<span class="token operator">:</span> <span class="token punctuation">{</span>
    modifyVars<span class="token operator">:</span> <span class="token punctuation">{</span>
      hack<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">true;@import &#39;@/styles/index.less&#39;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以使用全局<code>less</code>定义的变量、混合...</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token comment">// background-color: @myBg;</span>
.<span class="token function">myMixin</span><span class="token punctuation">(</span>#bfa<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-html-模板" tabindex="-1"><a class="header-anchor" href="#_2-html-模板" aria-hidden="true">#</a> 2.HTML 模板</h2><h3 id="_2-1-修改默认模板" tabindex="-1"><a class="header-anchor" href="#_2-1-修改默认模板" aria-hidden="true">#</a> 2.1 修改默认模板</h3><p>默认模板如下，</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>&lt;%= title %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>&lt;%= mountElementId %&gt;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果自定义模板，请确保包含 <code>&lt;%= title %&gt;</code> 和 <code>&lt;%= mountElementId %&gt;</code>。</p><p>新建 <code>src/pages/document.ejs</code>，umi 约定如果这个文件存在，会作为默认模板，比如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Your App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),v={href:"https://v3.umijs.org/zh-CN/config#title",target:"_blank",rel:"noopener noreferrer"},m=e(`<h3 id="_2-2-配置模板" tabindex="-1"><a class="header-anchor" href="#_2-2-配置模板" aria-hidden="true">#</a> 2.2 配置模板</h3><p>模板里可通过 context 来获取到 umi 提供的变量，context 包含：</p><ul><li><code>route</code>，路由信息，需要打包出多个静态 HTML 时（即配置了 exportStatic 时）有效</li><li><code>config</code>，用户配置信息</li></ul><p>比如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image/x-icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>&lt;%= context.config.publicPath %&gt;favicon.png<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-样式" tabindex="-1"><a class="header-anchor" href="#_3-样式" aria-hidden="true">#</a> 3.样式</h2><p>本文介绍各种在 Umi 项目中使用样式的方式。</p><h3 id="_3-1-使用-css-样式" tabindex="-1"><a class="header-anchor" href="#_3-1-使用-css-样式" aria-hidden="true">#</a> 3.1 使用 CSS 样式</h3><p>你可以在 Umi 项目中使用 <code>.css</code> 文件声明各种样式，然后在 <code>.js</code> 文件中引入即可生效。</p><p>例如，在 <code>src/pages/index.css</code> 文件按照以下代码声明 <code>.title</code> 类的样式为红色：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.title</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <code>src/pages/index.js</code> 文件中引入即可生效。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// src/pages/index.js</span>
 
<span class="token keyword">import</span> <span class="token string">&#39;./index.css&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),b=s("code",null,".js",-1),g={href:"https://umijs.org/docs/guides/styling#%E4%BD%BF%E7%94%A8-css-modules",target:"_blank",rel:"noopener noreferrer"},h=e(`<h3 id="_3-2-使用-css-modules" tabindex="-1"><a class="header-anchor" href="#_3-2-使用-css-modules" aria-hidden="true">#</a> 3.2 使用 CSS Modules</h3><p>在 <code>js</code> 文件中引入样式时，如果赋予他一个变量名，就可以将样式以 CSS Module 的形式引入。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// src/pages/index.js</span>
 
<span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">&#39;./index.css&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    Hello World
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例中，<code>index.css</code> 文件中声明的样式不会对全局样式造成影响，只会对从 <code>styles</code> 变量中使用的样式生效。</p><h3 id="_3-3-使用-css-预处理器" tabindex="-1"><a class="header-anchor" href="#_3-3-使用-css-预处理器" aria-hidden="true">#</a> 3.3 使用 CSS 预处理器</h3><p>Umi 默认支持 LESS (推荐), SASS 和 SCSS 样式的导入，你可以直接按照引入 CSS 文件的方式引入并使用这些由 CSS 预处理器处理的样式。</p><blockquote><p>💡</p><p>在 Umi 中使用 Sass(Scss) 需要额外安装预处理依赖 如: <code>npm add -D sass</code></p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// src/pages/index.js</span>
 
<span class="token keyword">import</span> <span class="token string">&#39;./index.less&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./index.sass&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./index.scss&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样也支持 CSS Module 的用法：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// src/pages/index.js</span>
 
<span class="token keyword">import</span> lessStyles <span class="token keyword">from</span> <span class="token string">&#39;./index.less&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> sassStyles <span class="token keyword">from</span> <span class="token string">&#39;./index.sass&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> scssStyles <span class="token keyword">from</span> <span class="token string">&#39;./index.scss&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>lessStyles<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    Hello World
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>sassStyles<span class="token punctuation">.</span>blue<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">I am blue</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>scssStyles<span class="token punctuation">.</span>red<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">I am red</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-使用-tailwindcss" tabindex="-1"><a class="header-anchor" href="#_3-4-使用-tailwindcss" aria-hidden="true">#</a> 3.4 使用 Tailwindcss</h3>`,11),y={href:"https://tailwindcss.com/",target:"_blank",rel:"noopener noreferrer"},f=s("code",null,"umi",-1),x=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$umi</span> g tailwindcss
info  - Write package.json
<span class="token builtin class-name">set</span> config:tailwindcss on /Users/umi/playground/.umirc.ts
<span class="token builtin class-name">set</span> config:plugins on /Users/umi/playground/.umirc.ts
info  - Update .umirc.ts
info  - Write tailwind.config.js
info  - Write tailwind.css
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的<code>tailwind.css</code>文件会有警告，可以通过<code>vscode</code>的配置来解决</p><p><code>settings.json</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;css.lint.unknownAtRules&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ignore&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-使用-unocss" tabindex="-1"><a class="header-anchor" href="#_3-5-使用-unocss" aria-hidden="true">#</a> 3.5 使用 UnoCSS</h3>`,5),_={href:"https://github.com/unocss/unocss",target:"_blank",rel:"noopener noreferrer"},w=e(`<ol><li>安装 <code>plugin-unocss</code></li><li>安装 <code>unocss</code> 及 <code>@unocss/cli</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i unocss @unocss/cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>在 Umi 设置中启用插件，并声明会用到 <code>unocss</code> 的文件目录</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// .umirc.ts</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">require</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;@umijs/plugins/dist/unocss&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  unocss<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 检测 className 的文件范围，若项目不包含 src 目录，可使用 \`pages/**/*.tsx\`</span>
    watch<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;src/**/*.tsx&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),q={start:"4"},j=s("code",null,"unocss.config.ts",-1),S={href:"https://github.com/unocss/unocss#presets",target:"_blank",rel:"noopener noreferrer"},C=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// unocss.config.ts</span>
 
<span class="token keyword">import</span> <span class="token punctuation">{</span>defineConfig<span class="token punctuation">,</span> presetAttributify<span class="token punctuation">,</span> presetUno<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;unocss&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>strict <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> dev <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    envMode<span class="token operator">:</span> dev <span class="token operator">?</span> <span class="token string">&#39;dev&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span> presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">presetAttributify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>strict<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">presetUno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>启动项目进行开发，插件会监听设置文件中的 <code>unocss.watch</code> 字段，动态生成样式文件并自动套用</li></ol><h2 id="_4-使用图片" tabindex="-1"><a class="header-anchor" href="#_4-使用图片" aria-hidden="true">#</a> 4.使用图片</h2><h3 id="_4-1-js-里使用图片" tabindex="-1"><a class="header-anchor" href="#_4-1-js-里使用图片" aria-hidden="true">#</a> 4.1 JS 里使用图片</h3><p>通过 require 引用相对路径的图片。</p><p>比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./foo.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>支持别名，比如通过 <code>@</code> 指向 src 目录：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@/foo.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-2-js-里使用svg" tabindex="-1"><a class="header-anchor" href="#_4-2-js-里使用svg" aria-hidden="true">#</a> 4.2 JS 里使用svg</h3><p><strong>组件式引入</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ReactComponent <span class="token keyword">as</span> Logo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./logo.svg&#39;</span>
<span class="token keyword">function</span> <span class="token function">Analysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Logo width<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">90</span><span class="token punctuation">}</span> height<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">120</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>url式引入</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> logoSrc <span class="token keyword">from</span> <span class="token string">&#39;./logo.svg&#39;</span>
<span class="token keyword">function</span> <span class="token function">Analysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>logoSrc<span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token string">&quot;logo&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-css-里使用图片" tabindex="-1"><a class="header-anchor" href="#_4-3-css-里使用图片" aria-hidden="true">#</a> 4.3 CSS 里使用图片</h3><p>通过相对路径引用。</p><p>比如，</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.logo</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./foo.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CSS 里也支持别名，但需要在前面加 <code>~</code> 前缀，</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.logo</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>~@/foo.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ol><li>这是 webpack 的规则，如果切到其他打包工具，可能会有变化</li><li>less 中同样适用</li></ol><h3 id="_4-4-图片路径问题" tabindex="-1"><a class="header-anchor" href="#_4-4-图片路径问题" aria-hidden="true">#</a> 4.4 图片路径问题</h3><p>项目中使用图片有两种方式，</p><ol><li>先把图片传到 cdn，然后在 JS 和 CSS 中使用图片的绝对路径</li><li>把图片放在项目里，然后在 JS 和 CSS 中通过相对路径的方式使用</li></ol><h3 id="_4-5-base64-编译" tabindex="-1"><a class="header-anchor" href="#_4-5-base64-编译" aria-hidden="true">#</a> 4.5 Base64 编译</h3><p>通过相对路径引入图片的时候，如果图片小于 10K，会被编译为 Base64，否则会被构建为独立的图片文件。</p>`,27),M={href:"https://v3.umijs.org/zh-CN/config#inlinelimit",target:"_blank",rel:"noopener noreferrer"},U=e(`<h2 id="_5-编码规范" tabindex="-1"><a class="header-anchor" href="#_5-编码规范" aria-hidden="true">#</a> 5.编码规范</h2><p>我们通常会在项目中使用 ESLint、Stylelint 来协助我们把控编码质量，为了实现低成本、高性能、更稳定地接入上述工具，Umi 提供了开箱即用的 Lint 能力，包含以下特性：</p><ol><li><strong>推荐配置</strong>：提供 ESLint 及 Stylelint 推荐配置，可以直接继承使用</li><li><strong>统一的 CLI</strong>：提供 <code>umi lint</code> CLI，集成式调用 ESLint 和 Stylelint</li><li><strong>规则稳定</strong>：始终确保规则的稳定性，不会出现上游配置更新导致存量项目 lint 失败的情况</li></ol><p>其中，ESLint 配置具备如下特点：</p><ol><li><strong>仅质量相关</strong>：我们从数百条规则中筛选出数十条与编码质量相关的规则进行白名单开启，回归 Lint 本质，且不会与 Prettier 的规则冲突</li><li><strong>性能优先</strong>：部分 TypeScript 的规则实用型低但项目全量编译的成本却很高，我们对这些规则进行禁用以提升性能</li><li><strong>内置常用插件</strong>：包含 react、react-hooks、@typescript/eslint、jest，满足日常所需</li></ol><p>另外，Stylelint 配置还内置 CSS-in-JS 支持，可以检测出 JS 文件中的样式表语法错误。听起来很有吸引力？来看看如何接入吧。</p><h3 id="_5-1-使用方式" tabindex="-1"><a class="header-anchor" href="#_5-1-使用方式" aria-hidden="true">#</a> 5.1 使用方式</h3><h4 id="_5-1-1-安装" tabindex="-1"><a class="header-anchor" href="#_5-1-1-安装" aria-hidden="true">#</a> 5.1.1 安装</h4><p>为了节省安装体积，目前仅在 Umi Max 中内置了 Lint 模块，使用 <code>max lint</code> 来执行 lint 过程。<strong>如果你使用的是 Umi，需要先安装 <code>@umijs/lint</code></strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> i @umijs/lint <span class="token parameter variable">-D</span>
<span class="token comment"># or</span>
$ <span class="token function">pnpm</span> <span class="token function">add</span> @umijs/lint <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后安装 ESLint 及 Stylelint：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> i eslint stylelint <span class="token parameter variable">-D</span>
<span class="token comment"># or</span>
$ <span class="token function">pnpm</span> <span class="token function">add</span> eslint stylelint <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-1-2-启用配置" tabindex="-1"><a class="header-anchor" href="#_5-1-2-启用配置" aria-hidden="true">#</a> 5.1.2 启用配置</h4><p>在 <code>.eslintrc.js</code> 及 <code>.stylelintrc.js</code> 里继承 Umi 提供的配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .eslintrc.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// Umi 项目</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;umi/eslint&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 
  <span class="token comment">// Umi Max 项目</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;@umijs/max/eslint&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  
   <span class="token literal-property property">settings</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 解决警告：Warning: React version was set to &quot;detect&quot; in eslint-plugin-react settings, but the &quot;react&quot; package is not installed. Assuming latest React version for linting.</span>
    <span class="token literal-property property">react</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&#39;999.999.999&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
 
<span class="token comment">// .stylelintrc.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// Umi 项目</span>
  <span class="token comment">// pnpm add stylelint-config-recess-order -D </span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;umi/stylelint&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;stylelint-config-recess-order&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
 
  <span class="token comment">// Umi Max 项目</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;@umijs/max/stylelint&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;stylelint-config-recess-order&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写检查忽略文件 <code>.eslintignore</code> 及 <code>.stylelintignore</code> 里继承 Umi 提供的配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># .eslintrc.js</span>
/config
/dist
public
dist
.umi
mock
node_modules
 
<span class="token comment"># .stylelintrc.js</span>
node_modules
.umi
.umi-production
tailwind.*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在配置文件创建完毕后，我们其实已经可以通过 <code>eslint</code>、<code>stylelint</code> 命令来执行 lint 了，但我们仍然推荐使用 <code>umi lint</code> 命令，以获得更便捷的体验。</p><h4 id="_5-1-3-cli" tabindex="-1"><a class="header-anchor" href="#_5-1-3-cli" aria-hidden="true">#</a> 5.1.3 CLI</h4><p><code>umi lint</code> 命令的用法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ umi lint <span class="token punctuation">[</span>glob<span class="token punctuation">]</span> <span class="token punctuation">[</span>--fix<span class="token punctuation">]</span> <span class="token punctuation">[</span>--eslint-only<span class="token punctuation">]</span> <span class="token punctuation">[</span>--stylelint-only<span class="token punctuation">]</span> <span class="token punctuation">[</span>--cssinjs<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token punctuation">[</span>glob<span class="token punctuation">]</span>: 可选，指定要 lint 的文件，默认为 <span class="token variable"><span class="token variable">\`</span><span class="token punctuation">{</span>src,test<span class="token punctuation">}</span>/**/*.<span class="token punctuation">{</span>js,jsx,ts,tsx,css,less<span class="token punctuation">}</span><span class="token variable">\`</span></span>
  --quiet: 可选，禁用 <span class="token variable"><span class="token variable">\`</span>warn<span class="token variable">\`</span></span> 规则的报告，仅输出 <span class="token variable"><span class="token variable">\`</span>error<span class="token variable">\`</span></span>
  --fix: 可选，自动修复 lint 错误
  --eslint-only: 可选，仅执行 ESLint
  --stylelint-only: 可选，仅执行 Stylelint
  --cssinjs: 可选，为 Stylelint 启用 CSS-in-JS 支持
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常来说，直接执行 <code>umi lint</code> 应该就能满足大部分情况。</p><h3 id="_5-2-与-git-工作流结合" tabindex="-1"><a class="header-anchor" href="#_5-2-与-git-工作流结合" aria-hidden="true">#</a> 5.2 与 Git 工作流结合</h3><h3 id="_5-3-prettier" tabindex="-1"><a class="header-anchor" href="#_5-3-prettier" aria-hidden="true">#</a> 5.3 Prettier</h3>`,26),T=s("code",null,"umi lint",-1),L={href:"https://prettier.io/docs/en/install.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://prettier.io/",target:"_blank",rel:"noopener noreferrer"},N=s("code",null,"umi",-1),A=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$umi</span> g prettier
info  - Write package.json
info  - Write .prettierrc
info  - Write .prettierignore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我的<code>.prettierrc</code>配置</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;printWidth&quot;</span><span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span>
  <span class="token property">&quot;tabWidth&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token property">&quot;semi&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;singleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;trailingComma&quot;</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;proseWrap&quot;</span><span class="token operator">:</span> <span class="token string">&quot;never&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;arrowParens&quot;</span><span class="token operator">:</span> <span class="token string">&quot;avoid&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;htmlWhitespaceSensitivity&quot;</span><span class="token operator">:</span> <span class="token string">&quot;strict&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;endOfLine&quot;</span><span class="token operator">:</span> <span class="token string">&quot;auto&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;bracketSpacing&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;jsxSingleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;bracketSameLine&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;useTabs&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;overrides&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.prettierrc&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;options&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier-plugin-organize-imports&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;prettier-plugin-packagejson&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可参考 Prettier 文档将其配置到 lint-staged 中：https://prettier.io/docs/en/install.html#git-hooks</p><h2 id="_6-路由" tabindex="-1"><a class="header-anchor" href="#_6-路由" aria-hidden="true">#</a> 6.路由</h2>`,5),P={href:"https://en.wikipedia.org/wiki/Single-page_application",target:"_blank",rel:"noopener noreferrer"},O=e(`<h3 id="_6-1-配置路由" tabindex="-1"><a class="header-anchor" href="#_6-1-配置路由" aria-hidden="true">#</a> 6.1 配置路由</h3><p>在配置文件中通过 <code>routes</code> 进行配置，格式为路由信息的数组。</p><p>比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;index&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;user&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Umi 4 默认根据路由来进行 JavaScript 模块按需加载。如果需要在路由组件加载的过程中配置自定义加载组件，在项目 <code>src</code> 目录下创建 <code>loading.tsx</code> 或者 <code>loading.jsx</code> 或者 <code>loading.js</code> 文件，默认导出的组件会在组件加载的时候渲染。</p><blockquote><p>💡</p><p>你可以在 Chrome 的调试工具的网络 tab 中将网络设置成低速，然后切换路由查看动态加载中组件的展示。</p></blockquote><h4 id="_6-1-1-path" tabindex="-1"><a class="header-anchor" href="#_6-1-1-path" aria-hidden="true">#</a> 6.1.1 path</h4><ul><li>Type: <code>string</code></li></ul><p><code>path</code> 只支持两种占位符配置，第一种是动态参数 <code>:id</code> 的形式，第二种是 <code>*</code> 通配符，通配符只能出现路由字符串的最后。</p><p>✅ 以下是目前<em><strong>支持</strong></em>的路由路径配置形式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/groups
/groups/admin
/users/:id
/users/:id/messages
/files/*
/files/:id/*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>❌ 以下是目前<em><strong>不支持</strong></em>的路由路径配置形式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/users/:id?
/tweets/:id<span class="token punctuation">(</span><span class="token punctuation">\\</span>d+<span class="token punctuation">)</span>
/files/*/cat.jpg
/files-*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-1-2-component" tabindex="-1"><a class="header-anchor" href="#_6-1-2-component" aria-hidden="true">#</a> 6.1.2 component</h4><ul><li>Type: <code>string</code></li></ul><p>配置 location 和 path 匹配后用于渲染的 React 组件路径。可以是绝对路径，也可以是相对路径，如果是相对路径，会从 <code>src/pages</code> 开始找起。</p><p>如果指向 <code>src</code> 目录的文件，可以用 <code>@</code>，也可以用 <code>../</code>。比如 <code>component: &#39;@/layouts/basic&#39;</code>，或者 <code>component: &#39;../layouts/basic&#39;</code>，推荐用前者。</p><h4 id="_6-1-3-routes" tabindex="-1"><a class="header-anchor" href="#_6-1-3-routes" aria-hidden="true">#</a> 6.1.3 routes</h4><p>配置子路由，通常在需要为多个路径增加 layout 组件时使用。</p><p>比如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  routes<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&#39;login&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
      component<span class="token operator">:</span> <span class="token string">&#39;@/layouts/index&#39;</span><span class="token punctuation">,</span>
      routes<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/list&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&#39;list&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/admin&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <code>src/layouts/index</code> 中通过 <code>&lt;Outlet/&gt;</code> 渲染子路由，</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>Outlet<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi&#39;</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> 
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Outlet</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text"> 
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，访问 <code>/list</code> 和 <code>/admin</code> 就会带上 <code>src/layouts/index</code> 这个 layout 组件。</p><h4 id="_6-1-4-redirect" tabindex="-1"><a class="header-anchor" href="#_6-1-4-redirect" aria-hidden="true">#</a> 6.1.4 redirect</h4><ul><li>Type: <code>string</code></li></ul><p>配置路由跳转。</p><p>比如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  routes<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">&#39;/list&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/list&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&#39;list&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问 <code>/</code> 会跳转到 <code>/list</code>，并由 <code>src/pages/list</code> 文件进行渲染。</p><h4 id="_6-1-5-wrappers" tabindex="-1"><a class="header-anchor" href="#_6-1-5-wrappers" aria-hidden="true">#</a> 6.1.5 wrappers</h4><ul><li>Type: <code>string[]</code></li></ul><p>配置路由组件的包装组件，通过包装组件可以为当前的路由组件组合进更多的功能。 比如，可以用于路由级别的权限校验：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  routes<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span>
      wrappers<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;@/wrappers/auth&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&#39;login&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <code>src/wrappers/auth</code> 中，</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Navigate<span class="token punctuation">,</span> Outlet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi&#39;</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> isLogin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Outlet</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Navigate</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/login<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，访问 <code>/user</code>，就通过 <code>auth</code> 组件做权限校验，如果通过，渲染 <code>src/pages/user</code>，否则跳转到 <code>/login</code>。</p><blockquote><p>🚨</p><p><code>wrappers</code> 中的每个组件会给当前的路由组件增加一层嵌套路由，如果你希望路由结构不发生变化，推荐使用高阶组件。先在高阶组件中实现 wrapper 中的逻辑，然后使用该高阶组件装饰对应的路由组件。</p></blockquote><p>举例：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// src/hocs/withAuth.jsx</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Navigate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi&#39;</span>
 
<span class="token keyword">const</span> <span class="token function-variable function">withAuth</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> isLogin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Navigate</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/login<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// src/pages/user.jsx</span>
 
<span class="token keyword">const</span> <span class="token function-variable function">TheOldPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withAuth</span><span class="token punctuation">(</span>TheOldPage<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-1-6-title" tabindex="-1"><a class="header-anchor" href="#_6-1-6-title" aria-hidden="true">#</a> 6.1.6 title</h4><ul><li>Type: <code>string</code></li></ul><p>配置路由的标题。</p><h3 id="_6-2-页面跳转" tabindex="-1"><a class="header-anchor" href="#_6-2-页面跳转" aria-hidden="true">#</a> 6.2 页面跳转</h3>`,45),B={href:"https://umijs.org/docs/api/api#history",target:"_blank",rel:"noopener noreferrer"},I=s("code",null,"history",-1),W=e(`<p>和 history 相关的操作，用于获取当前路由信息、执行路由跳转、监听路由变更。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 建议组件或 hooks 里用 useLocation 取</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useLocation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> location <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
     </span><span class="token punctuation">{</span> location<span class="token punctuation">.</span>pathname <span class="token punctuation">}</span><span class="token plain-text">
     </span><span class="token punctuation">{</span> location<span class="token punctuation">.</span>search <span class="token punctuation">}</span><span class="token plain-text">
     </span><span class="token punctuation">{</span> location<span class="token punctuation">.</span>hash <span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在 React 组件和 Hooks 之外获取当前路由信息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// location 对象，包含 pathname、search 和 hash</span>
window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>
window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">;</span>
window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令式路由跳转。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> history <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi&#39;</span><span class="token punctuation">;</span>
 
<span class="token comment">// 跳转到指定路由</span>
history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// 带参数跳转到指定路由</span>
history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/list?a=b&amp;c=d#anchor&#39;</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    pathname<span class="token operator">:</span> <span class="token string">&#39;/list&#39;</span><span class="token punctuation">,</span>
    search<span class="token operator">:</span> <span class="token string">&#39;?a=b&amp;c=d&#39;</span><span class="token punctuation">,</span>
    hash<span class="token operator">:</span> <span class="token string">&#39;anchor&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    some<span class="token operator">:</span> <span class="token string">&#39;state-data&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// 跳转当前路径，并刷新 state</span>
history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span>
 
<span class="token comment">// 跳转到上一个路由</span>
history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>🚨</p><p>注意：history.push 和 history.replace 需要使用 <code>state</code> 需将 <code>state</code> 作为这两个 API 的第二个参数传递</p></blockquote><p>路由监听。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> history <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">const</span> unlisten <span class="token operator">=</span> history<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> location<span class="token punctuation">,</span> action <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">unlisten</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),H={href:"https://umijs.org/docs/api/api#usenavigate",target:"_blank",rel:"noopener noreferrer"},J=s("code",null,"useNavigate",-1),D=e(`<p><code>useNavigate</code> 钩子函数返回一个可以控制跳转的函数；比如可以用在提交完表单后跳转到其他页面。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">useNavigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> NavigateFunction<span class="token punctuation">;</span>
 
<span class="token keyword">interface</span> <span class="token class-name">NavigateFunction</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>
    to<span class="token operator">:</span> To<span class="token punctuation">,</span>
    options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> replace<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> state<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token punctuation">(</span>delta<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-错误页配置" tabindex="-1"><a class="header-anchor" href="#_6-3-错误页配置" aria-hidden="true">#</a> 6.3 错误页配置</h3><p><code>src/404.tsx</code></p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">404</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.umirc.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>routes<span class="token operator">:</span> <span class="token punctuation">[</span>
	<span class="token operator">...</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span> <span class="token string">&#39;@/404.tsx&#39;</span><span class="token punctuation">,</span>
    title<span class="token operator">:</span> <span class="token string">&#39;错误-404&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><ul><li>跳转路径</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useNavigate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">let</span> navigate <span class="token operator">=</span> <span class="token function">useNavigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">&quot;../success&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> replace<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>返回上一页</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useNavigate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">let</span> navigate <span class="token operator">=</span> <span class="token function">useNavigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">navigate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-路由组件参数" tabindex="-1"><a class="header-anchor" href="#_6-4-路由组件参数" aria-hidden="true">#</a> 6.4 路由组件参数</h3>`,13),$={href:"https://reactrouter.com/docs/en/v6/api",target:"_blank",rel:"noopener noreferrer"},G=s("h2",{id:"_7-mock",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_7-mock","aria-hidden":"true"},"#"),n(" 7.Mock")],-1),R=s("p",null,"Umi 提供了开箱即用的 Mock 功能，能够用方便简单的方式来完成 Mock 数据的设置。",-1),V=s("blockquote",null,[s("p",null,"💡"),s("p",null,"什么是 Mock 数据：在前后端约定好 API 接口以后，前端可以使用 Mock 数据来在本地模拟出 API 应该要返回的数据，这样一来前后端开发就可以同时进行，不会因为后端 API 还在开发而导致前端的工作被阻塞。")],-1),K=s("h3",{id:"_7-1-目录约定",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_7-1-目录约定","aria-hidden":"true"},"#"),n(" 7.1 目录约定")],-1),z=s("code",null,"/mock",-1),F={href:"https://umijs.org/docs/guides/mock#mock-%E6%96%87%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},Q=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span>
├── mock
    ├── todos.ts
    ├── items.ts
    └── users.ts
└── src
    └── pages
        └── index.tsx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Y=s("code",null,"/mock",-1),X=s("code",null,"todos.ts",-1),Z=s("code",null,"items.ts",-1),nn=s("code",null,"users.ts",-1),sn={href:"https://umijs.org/docs/guides/mock#mock-%E6%96%87%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},an=e(`<h3 id="_7-2-mock-文件" tabindex="-1"><a class="header-anchor" href="#_7-2-mock-文件" aria-hidden="true">#</a> 7.2 Mock 文件</h3><p>Mock 文件默认导出一个对象，而对象的每个 Key 对应了一个 Mock 接口，值则是这个接口所对应的返回数据，例如这样的 Mock 文件：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// ./mock/users.ts</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
 
  <span class="token comment">// 返回值可以是数组形式</span>
  <span class="token string-property property">&#39;GET /api/users&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
 
  <span class="token comment">// 返回值也可以是对象形式</span>
  <span class="token string-property property">&#39;GET /api/users/1&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就声明了两个 Mock 接口，透过 <code>GET /api/users</code> 可以拿到一个带有两个用户数据的数组，透过 <code>GET /api/users/1</code> 可以拿到某个用户的模拟数据。</p><h4 id="_7-2-1-请求方法" tabindex="-1"><a class="header-anchor" href="#_7-2-1-请求方法" aria-hidden="true">#</a> 7.2.1 请求方法</h4><p>当 Http 的请求方法是 GET 时，可以省略方法部分，只需要路径即可，例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// ./mock/users.ts</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
 
  <span class="token string-property property">&#39;/api/users&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
 
  <span class="token string-property property">&#39;/api/users/1&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以用不同的请求方法，例如 <code>POST</code>，<code>PUT</code>，<code>DELETE</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// ./mock/users.ts</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
 
  <span class="token string-property property">&#39;POST /api/users&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> result<span class="token operator">:</span> <span class="token string">&#39;true&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
 
  <span class="token string-property property">&#39;PUT /api/users/1&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;new-foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-2-3-自定义函数" tabindex="-1"><a class="header-anchor" href="#_7-2-3-自定义函数" aria-hidden="true">#</a> 7.2.3 自定义函数</h4><p>除了直接静态声明返回值，也可以用函数的方式来声明如何计算返回值，例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
 
  <span class="token string-property property">&#39;POST /api/users/create&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 添加跨域请求头</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),tn=s("code",null,"req",-1),en=s("code",null,"res",-1),pn={href:"https://expressjs.com/en/api.html",target:"_blank",rel:"noopener noreferrer"},on=e(`<h4 id="_7-2-4-definemock" tabindex="-1"><a class="header-anchor" href="#_7-2-4-definemock" aria-hidden="true">#</a> 7.2.4 defineMock</h4><p>另外，也可以使用 <code>defineMock</code> 类型帮助函数来提供编写 mock 对象的代码提示，如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineMock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;umi&quot;</span><span class="token punctuation">;</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineMock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;/api/users&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;/api/users/1&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;GET /api/users/2&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>defineMock</code> 仅仅提供类型提示，入参与出参完全一致。</p><h3 id="_7-3-关闭-mock" tabindex="-1"><a class="header-anchor" href="#_7-3-关闭-mock" aria-hidden="true">#</a> 7.3 关闭 Mock</h3><p>Umi 默认开启 Mock 功能，如果不需要的话可以从配置文件关闭：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// .umirc.ts</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  mock<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或是用环境变量的方式关闭：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MOCK=none umi dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_7-4-引入-mock-js" tabindex="-1"><a class="header-anchor" href="#_7-4-引入-mock-js" aria-hidden="true">#</a> 7.4 引入 Mock.js</h3>`,10),cn={href:"http://mockjs.com/",target:"_blank",rel:"noopener noreferrer"},ln=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> mockjs <span class="token keyword">from</span> <span class="token string">&#39;mockjs&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment">// 使用 mockjs 等三方库</span>
  <span class="token string-property property">&#39;GET /api/tags&#39;</span><span class="token operator">:</span> mockjs<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;list|100&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;@city&#39;</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;value|1-100&#39;</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;type|0-2&#39;</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function un(rn,dn){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[n("设置 less-loader 的 Options。具体参考参考 "),s("a",r,[n("less-loader 的 Options"),t(a)]),n("。")]),s("blockquote",null,[s("p",null,[n("默认是用 less@4 版本，如果需要兼容 less@3 请配置使用"),s("a",d,[n("less-options-math"),t(a)]),n("。")])]),k,s("p",null,[n("在 umi 里配置 title 请查看 "),s("a",v,[n("配置标题"),t(a)]),n("。")]),m,s("p",null,[n("按照此种引入方式的样式会在整个 Umi 项目中生效，即无论你从哪个 "),b,n(" 文件引入，他声明的样式可以在任何页面和组件中使用。如果你想要避免这种情况，可以使用 "),s("a",g,[n("CSS Modules"),t(a)]),n(" 的功能来限制样式的作用域。")]),h,s("p",null,[n("为项目开启 "),s("a",y,[n("Tailwind CSS"),t(a)]),n(" 配置，命令执行后，"),f,n(" 会生成 Tailwind CSS 和安装相应的的依赖。")]),x,s("p",null,[n("与 Tailwindcss 相同，Umi 也提供了内置的 "),s("a",_,[n("UnoCSS"),t(a)]),n(" 插件，可以按照相同方式开启。")]),w,s("ol",q,[s("li",null,[n("在项目目录下加入 "),j,n(" 配置文件，并加入项目需要的 "),s("a",S,[n("UnoCSS Presets"),t(a)])])]),C,s("p",null,[n("10K 这个阈值可以通过 "),s("a",M,[n("inlineLimit 配置"),t(a)]),n("修改。")]),U,s("p",null,[n("在启用 "),T,n(" 的基础上，我们也建议与 "),s("a",L,[n("Prettier"),t(a)]),n(" 一同使用，以确保团队的代码风格是基本一致的。")]),s("p",null,[n("为项目生成 "),s("a",E,[n("prettier"),t(a)]),n(" 配置，命令执行后，"),N,n(" 会生成推荐的 prettier 配置和安装相应的依赖。")]),A,s("p",null,[n("在 Umi 应用是"),s("a",P,[n("单页应用"),t(a)]),n("，页面地址的跳转都是在浏览器端完成的，不会重新请求服务端获取 html，html 只在应用初始化时加载一次。所有页面由不同的组件构成，页面的切换其实就是不同组件的切换，你只需要在配置中把不同的路由路径和对应的组件关联上。")]),O,s("p",null,[n("命令式跳转请使用 "),s("a",B,[I,t(a)]),n(" API")]),W,s("p",null,[n("组件内还可以使用 "),s("a",H,[J,t(a)]),n(" hook")]),D,s("p",null,[n("Umi4 使用 "),s("a",$,[n("react-router@6"),t(a)]),n(" 作为路由组件，路由参数的获取使其 hooks。")]),G,R,V,K,s("p",null,[n("Umi 约定 "),z,n(" 目录下的所有文件为 "),s("a",F,[n("Mock 文件"),t(a)]),n("，例如这样的目录结构：")]),Q,s("p",null,[n("则 "),Y,n(" 目录中的 "),X,n(", "),Z,n(" 和 "),nn,n(" 就会被 Umi 视为 "),s("a",sn,[n("Mock 文件"),t(a)]),n(" 来处理。")]),an,s("p",null,[n("关于 "),tn,n(" 和 "),en,n(" 的 API 可参考 "),s("a",pn,[n("Express@4 官方文档"),t(a)]),n(" 来进一步了解。")]),on,s("p",null,[n("在 Mock 中我们经常使用 "),s("a",cn,[n("Mock.js"),t(a)]),n(" 来帮我们方便的生成随机的模拟数据，如果你使用了 Umi 的 Mock 功能，建议你搭配这个库来提升模拟数据的真实性：")]),ln])}const mn=p(l,[["render",un],["__file","24-UmiJS基础.html.vue"]]);export{mn as default};
