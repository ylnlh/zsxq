import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as i,c as r,a as n,d as s,b as e,t as p,f as t}from"./app-hz3rNBT8.js";const d={},u=t(`<p>​</p><h4 id="小程序基础-第四天" tabindex="-1"><a class="header-anchor" href="#小程序基础-第四天" aria-hidden="true">#</a> 小程序基础 第四天</h4><hr><h5 id="一、小程序导航-声明式导航" tabindex="-1"><a class="header-anchor" href="#一、小程序导航-声明式导航" aria-hidden="true">#</a> 一、小程序导航 -- 声明式导航</h5><h6 id="_001-导航到非-tabbar-页面" tabindex="-1"><a class="header-anchor" href="#_001-导航到非-tabbar-页面" aria-hidden="true">#</a> 001 - 导航到非 <code>tabBar</code> 页面</h6><blockquote><p>非 <code>tabBar</code> 页面指的是没有被当作 <code>tabBar</code> 进行切换的页面。</p></blockquote><ul><li>案例代码：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>navigator url<span class="token operator">=</span><span class="token string">&quot;/pages/about/about&quot;</span><span class="token operator">&gt;</span>跳转到 about 页面<span class="token operator">&lt;</span><span class="token operator">/</span>navigator<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>注意事项</li><li><code>url</code> 属性设置需要跳转的路径</li><li>页面路径应该以 / 开头，</li><li>路径必须提前在 <code>app.json</code> 的 <code>pages</code> 节点下声明</li></ul><h6 id="_002-导航到-tabbar-页面" tabindex="-1"><a class="header-anchor" href="#_002-导航到-tabbar-页面" aria-hidden="true">#</a> 002 - 导航到 <code>tabBar</code> 页面</h6><blockquote><p>navigator组件单纯使用 <code>url</code> 属性，无法导航到 <code>tabBar</code> 页面，必须需要结合 <code>open-type</code> 属性进行导航。</p></blockquote><ul><li>案例代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>navigator url<span class="token operator">=</span><span class="token string">&quot;/pages/person/person&quot;</span> open<span class="token operator">-</span>type<span class="token operator">=</span><span class="token string">&quot;switchTab&quot;</span><span class="token operator">&gt;</span>跳转到 tabBar 页面<span class="token operator">&lt;</span><span class="token operator">/</span>navigator<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_003-后退导航" tabindex="-1"><a class="header-anchor" href="#_003-后退导航" aria-hidden="true">#</a> 003 - 后退导航</h6><p>​</p><blockquote><p>小程序如果要后退到上一页面或多级页面，需要把 <code>open-type</code> 设置为 <code>navigateBack</code>，同时使用 <code>delta</code> 属性指定后退的层数</p></blockquote><ul><li>案例代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>navigator open<span class="token operator">-</span>type<span class="token operator">=</span><span class="token string">&#39;navigateBack&#39;</span> delta<span class="token operator">=</span><span class="token string">&#39;1&#39;</span><span class="token operator">&gt;</span> 返回上一页 <span class="token operator">&lt;</span><span class="token operator">/</span>navigator<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>navigator open<span class="token operator">-</span>type<span class="token operator">=</span><span class="token string">&#39;navigateBack&#39;</span> delta<span class="token operator">=</span><span class="token string">&#39;2&#39;</span><span class="token operator">&gt;</span> 返回上上一页 <span class="token operator">&lt;</span><span class="token operator">/</span>navigator<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="二、小程序导航-编程式导航" tabindex="-1"><a class="header-anchor" href="#二、小程序导航-编程式导航" aria-hidden="true">#</a> 二、小程序导航 -- 编程式导航</h5><h6 id="_001-导航到非-tabbar-页面-1" tabindex="-1"><a class="header-anchor" href="#_001-导航到非-tabbar-页面-1" aria-hidden="true">#</a> 001 - 导航到非 <code>tabBar</code> 页面</h6><blockquote><p>通过 <code>wx.navigateTo(Object object)</code> 方法，可以跳转到应用内的某个页面。</p><p>但是不能跳到 <code>tabbar</code> 页面。</p></blockquote>`,22),k=n("p",null,"参数文档",-1),v={href:"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,[n("p",null,"代码案例")],-1),b=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 跳转到非导航页面</span>
<span class="token function-variable function">handle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  wx<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/pages/about/about&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello about&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_002-导航到-tabbar-页面-1" tabindex="-1"><a class="header-anchor" href="#_002-导航到-tabbar-页面-1" aria-hidden="true">#</a> 002 - 导航到 <code>tabBar</code> 页面</h6><blockquote><p>通过 <code>wx.switchTab(Object object)</code> 方法，可以跳转到 <code>tabBar</code> 页面，</p><p><strong>并关闭其他所有非 <code>tabBar</code> 页面</strong></p></blockquote>`,3),h=n("li",null,"参数文档",-1),g={href:"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html",target:"_blank",rel:"noopener noreferrer"},f=n("li",null,"案例代码",-1),_=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 跳转到 tabBar 页面</span>
<span class="token function-variable function">tabBarHandle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  wx<span class="token punctuation">.</span><span class="token function">switchTab</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/pages/person/person&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello Person&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_003-后退导航-1" tabindex="-1"><a class="header-anchor" href="#_003-后退导航-1" aria-hidden="true">#</a> 003 - 后退导航</h6><blockquote><p>通过 <code>wx.navigateBack(Object object) </code>方法，关闭当前页面，返回上一页面或多级页面。</p></blockquote>`,3),w={href:"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html",target:"_blank",rel:"noopener noreferrer"},x=n("li",null,"案例代码",-1),q=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">handle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  wx<span class="token punctuation">.</span><span class="token function">navigateBack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">delta</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token function-variable function">twoHandle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  wx<span class="token punctuation">.</span><span class="token function">navigateBack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">delta</span><span class="token operator">:</span> <span class="token number">2</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="三、小程序导航-导航传参" tabindex="-1"><a class="header-anchor" href="#三、小程序导航-导航传参" aria-hidden="true">#</a> 三、小程序导航 -- 导航传参</h5><h6 id="_001-声明式导航传参" tabindex="-1"><a class="header-anchor" href="#_001-声明式导航传参" aria-hidden="true">#</a> 001 - 声明式导航传参</h6><blockquote><p><code>navigator</code> 组件的 <code>url</code> 属性用来指定导航到的页面路径，同时路径后面还可以携带参数，参数与路径之间使用 <code>?</code> 分隔，参数键与参数值用 <code>=</code> 相连，不同参数用 <code>&amp;</code> 分隔。</p></blockquote><ul><li>案例代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>navigator url<span class="token operator">=</span><span class="token string">&quot;/pages/about/about?age=18&amp;name=shuji&quot;</span><span class="token operator">&gt;</span>跳转到 about 页面<span class="token operator">&lt;</span><span class="token operator">/</span>navigator<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_002-编程式导航传参" tabindex="-1"><a class="header-anchor" href="#_002-编程式导航传参" aria-hidden="true">#</a> 002 - 编程式导航传参</h6><blockquote><p><code>wx.navigateTo(Object object)</code> 方法的 <code>objec</code>t 参数中，<code>url</code> 属性用来指定需要跳转的应用内非 <code>tabBar</code> 的页面的路径, 路径后可以带参数。参数与路径之间使用 <code>?</code> 分隔，参数键与参数值用 <code>=</code> 相连，不同参数用 <code>&amp;</code> 分隔。</p></blockquote><ul><li>案例代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 跳转到 tabBar 页面</span>
<span class="token function-variable function">tabBarHandle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  wx<span class="token punctuation">.</span><span class="token function">switchTab</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/pages/person/person?age=18&amp;name=shuji&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello Person&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_003-接受传递的参数" tabindex="-1"><a class="header-anchor" href="#_003-接受传递的参数" aria-hidden="true">#</a> 003 - 接受传递的参数</h6><blockquote><p>不论是声明式导航还是编程式导航，最终导航到的页面可以在 <code>onLoad</code> 生命周期函数中接收传递过来的参数。</p></blockquote><ul><li>案例代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function-variable function">onLoad</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 打印传递出来的参数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_004-导航栏自定义编译模式快速传参" tabindex="-1"><a class="header-anchor" href="#_004-导航栏自定义编译模式快速传参" aria-hidden="true">#</a> 004 - 导航栏自定义编译模式快速传参</h6><ul><li>小程序每次修改代码并编译后，会默认从首页进入，但是在开发阶段，我们经常会针对特定的页面进行开发，为了方便编译后直接进入对应的页面，可以配置自定义编译模式，步骤如下： <ul><li>单击工具栏上的“普通编译”下拉菜单</li><li>单击下拉菜单中的“添加编译模式”选项</li><li>在弹出的“自定义编译条件窗口”，按需添加模式名称、启用页面、启动参数、进入场景等。</li></ul></li></ul><hr><h5 id="四、网络数据请求" tabindex="-1"><a class="header-anchor" href="#四、网络数据请求" aria-hidden="true">#</a> 四、网络数据请求</h5><h6 id="_001-小程序后台配置" tabindex="-1"><a class="header-anchor" href="#_001-小程序后台配置" aria-hidden="true">#</a> 001 - 小程序后台配置</h6><ul><li>每个微信小程序需要事先设置一个通讯域名，小程序只可以跟指定的域名进行网络通信。</li><li>服务器域名请在 「小程序后台-开发-开发设置-服务器域名」 中进行配置，配置时需要注意：</li><li>域名只支持 <code>https</code> (<code>request</code>、<code>uploadFile</code>、<code>downloadFile</code>) 和 <code>wss</code> (<code>connectSocket</code>) 协议</li><li>域名不能使用 <code>IP</code> 地址或 <code>localhost</code></li><li>域名必须经过 <code>ICP</code> 备案</li><li>服务器域名一个月内可申请5次修改</li></ul>`,21),y={href:"https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html",target:"_blank",rel:"noopener noreferrer"},j=n("h6",{id:"_002-跳过域名校验",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_002-跳过域名校验","aria-hidden":"true"},"#"),s(" 002 - 跳过域名校验")],-1),B=n("ul",null,[n("li",null,"在微信开发者工具中，可以临时开启 「开发环境不校验请求域名、TLS 版本及 HTTPS 证书」 选项，跳过服务器域名的校验。此时，在微信开发者工具中及手机开启调试模式时，不会进行服务器域名的校验。")],-1),C=n("p",null,[n("strong",null,"注意：在服务器域名配置成功后，建议开发者关闭此选项进行开发，并在各平台下进行测试，以确认服务器域名配置正确。")],-1),D={href:"https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html",target:"_blank",rel:"noopener noreferrer"},P=t(`<h6 id="_003-小程序发送-get-与-post-请求" tabindex="-1"><a class="header-anchor" href="#_003-小程序发送-get-与-post-请求" aria-hidden="true">#</a> 003 - 小程序发送 get 与 Post 请求</h6><blockquote><p>小程序发送请求使用 <code>wx.request()</code> 方法，</p></blockquote><ul><li>Get 案例代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">getData</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;xxxx&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Post 代码案例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">postData</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://www.liulongbin.top:8082/api/post&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;shuji&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意： method 如果不进行配置，默认参数是 get 请求方式</strong></p>`,7),T={href:"https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html",target:"_blank",rel:"noopener noreferrer"},N=n("h6",{id:"_004-小程序中没有跨域限制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_004-小程序中没有跨域限制","aria-hidden":"true"},"#"),s(" 004 - 小程序中没有跨域限制")],-1),S=n("ul",null,[n("li",null,"在普通网站开发中，由于浏览器的同源策略限制，存在数据的跨域请求问题，从而衍生出了 JSONP 和 CORS 两种主流的跨域问题解决方案。"),n("li",null,[n("strong",null,"注意：小程序的内部运行机制与网页不同，小程序中的代码并不运行在浏览器中，因此小程序开发中，不存在数据的跨域请求限制问题")])],-1),E=n("hr",null,null,-1),O=n("h5",{id:"五、小程序组件-创建与引用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#五、小程序组件-创建与引用","aria-hidden":"true"},"#"),s(" 五、小程序组件 -- 创建与引用")],-1),H={href:"https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/",target:"_blank",rel:"noopener noreferrer"},L=t(`<h6 id="_001-组件的创建" tabindex="-1"><a class="header-anchor" href="#_001-组件的创建" aria-hidden="true">#</a> 001 - 组件的创建</h6><ul><li>在项目的根目录中，鼠标右键，创建 components 文件夹 --&gt; test</li><li>在新建的 components -&gt; test 文件夹上，鼠标右键，点击“新建 Component”</li><li>为新建的组件命名之后，会自动生成组件对应的 4 个文件，后缀名分别为 <code>.js</code>，<code>.json</code>， <code>.wxml</code> 和 <code>.wxss</code></li></ul><p><strong>注意：应当尽量将不同的组件，存放到单独的文件夹中，从而保证清晰的目录结构</strong></p><h6 id="_002-组件的引用" tabindex="-1"><a class="header-anchor" href="#_002-组件的引用" aria-hidden="true">#</a> 002 - 组件的引用</h6><ul><li>在需要引用组件的页面中，找到页面的 <code>.json</code> 配置文件，新增 <code>usingComponents</code> 节点</li><li>在 <code>usingComponents</code> 中，通过键值对的形式，注册组件；键为注册的组件名称，值为组件的<strong>相对路径</strong></li><li>在页面的 <code>.wxml</code> 文件中，把注册的组件名称，以<strong>标签形式在页面上使用</strong>，即可把组件展示到页面上</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;usingComponents&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;first-com&quot;</span><span class="token operator">:</span> <span class="token string">&quot;../../component/com01/com01&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注册组件名称时，建议把组件名称使用中横线进行连接，例如 vant-button 或 custom-button</strong></p><hr><h5 id="六、小程序组件-组件的样式" tabindex="-1"><a class="header-anchor" href="#六、小程序组件-组件的样式" aria-hidden="true">#</a> 六、小程序组件 -- 组件的样式</h5>`,9),V={href:"https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html",target:"_blank",rel:"noopener noreferrer"},I=t('<ul><li>组件对应 <code>wxss</code> 文件的样式，只对组件 <code>wxml</code> 内的节点生效。编写组件样式时，需要注意以下几点：</li><li>组件和引用组件的页面不能使用id选择器(#a)、属性选择器([a])和标签名选择器，请改用 <code>class</code> 选择器。</li><li>组件和引用组件的页面中使用后代选择器（.a .b）在一些极端情况下会有非预期的表现，如遇，请避免使用。</li><li>子元素选择器(.a&gt;.b)，只能用于 view 组件与其子节点之间，用于其他组件可能导致非预期的情况。</li><li>继承样式，如 <code>font</code> 、 <code>color</code> ，会从组件外继承到组件内。</li><li>除继承样式外， <code>app.wxss</code> 中的样式、组件所在页面的样式对自定义组件无效。</li></ul><p><strong>注意：以上语法不推荐死记硬背，建议使用 class 选择器</strong></p><hr><h5 id="七、小程序组件-数据与方法" tabindex="-1"><a class="header-anchor" href="#七、小程序组件-数据与方法" aria-hidden="true">#</a> 七、小程序组件 -- 数据与方法</h5>',4),F={href:"https://developers.weixin.qq.com/miniprogram/dev/reference/api/Component.html",target:"_blank",rel:"noopener noreferrer"},J=n("h6",{id:"_001-使用-data-定义组件的私有数据",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_001-使用-data-定义组件的私有数据","aria-hidden":"true"},"#"),s(" 001 - 使用 data 定义组件的私有数据")],-1),A=t("<li><p>小程序组件中的 <code>data</code>与小程序页面中的 <code>data</code> 用法一致，区别是：</p></li><li><p>页面的 <code>data</code> 定义在 <code>Page()</code> 函数中</p></li><li><p>组件的 <code>data</code> 定义在 <code>Component()</code> 函数中</p></li><li><p>在组件的 <code>.js</code> 文件中：</p></li><li><p>如果要访问 <code>data</code> 中的数据，直接使用 <code>this.data.数据名称</code> 即可</p></li><li><p>如果要为 <code>data</code> 中的数据重新赋值，调用 <code>this.setData({ 数据名称: 新值 })</code> 即可</p></li><li><p>在组件的 .wxml 文件中</p></li>",7),G=n("h6",{id:"_002-使用-methods-定义组件的事件处理函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_002-使用-methods-定义组件的事件处理函数","aria-hidden":"true"},"#"),s(" 002 - 使用 methods 定义组件的事件处理函数")],-1),M={href:"https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/events.html",target:"_blank",rel:"noopener noreferrer"},R=t(`<ul><li>和页面不同，组件的事件处理函数，必须定义在 methods 节点中</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">handle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;组件的方法要定义在 methods 中&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>num <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>num<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="八、小程序组件-properties" tabindex="-1"><a class="header-anchor" href="#八、小程序组件-properties" aria-hidden="true">#</a> 八、小程序组件 -- properties</h5><h6 id="_001-properties-简介" tabindex="-1"><a class="header-anchor" href="#_001-properties-简介" aria-hidden="true">#</a> 001 - properties 简介</h6><blockquote><p>组件的对外属性，用来接收外界传递到组件中的数据。 类似于 <code>Vue</code> 中的 <code>props</code></p></blockquote><ul><li><p>组件的 <code>properties</code> 和 <code>data</code> 的用法类似，它们都是可读可写的，只不过：</p><ul><li><code>data</code> 更倾向于存储组件的私有数据</li><li><code>properties</code> 更倾向于存储外界传递到组件中的数据</li></ul></li></ul><h6 id="_002-properties-语法结构" tabindex="-1"><a class="header-anchor" href="#_002-properties-语法结构" aria-hidden="true">#</a> 002 - properties 语法结构</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span>				<span class="token comment">// 属性名</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>	<span class="token comment">// 属性的数据类型</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>		<span class="token comment">// 默认值</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：type 的可选值为 Number，String、Boolean、Object、Array、null(表示不限制类型)</strong></p><h6 id="_003-向组件传递-properties-的值" tabindex="-1"><a class="header-anchor" href="#_003-向组件传递-properties-的值" aria-hidden="true">#</a> 003 - 向组件传递 properties 的值</h6><blockquote><p>使用数据绑定的形式，向子组件的属性传递动态数据</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>second<span class="token operator">-</span>com prop<span class="token operator">-</span>price<span class="token operator">=</span><span class="token string">&quot;{{ priceData }}&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>second<span class="token operator">-</span>com<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：</strong></p>`,14),W=n("li",null,"在定义 properties 时，属性名采用驼峰写法（propertyName）；",-1),X=n("li",null,"在 wxml 中，指定属性值时，则对应使用连字符写法（property-name=“attr value”），",-1),z=t(`<h6 id="_004-案例代码" tabindex="-1"><a class="header-anchor" href="#_004-案例代码" aria-hidden="true">#</a> 004 - 案例代码</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 组件 com02.js</span>

<span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">propPrice</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 引用组件的页面 --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>second-com</span> <span class="token attr-name">prop-price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ priceData }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>second-com</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 组件 com02.html --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>{{ propPrice }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_005-组件内修改-properties" tabindex="-1"><a class="header-anchor" href="#_005-组件内修改-properties" aria-hidden="true">#</a> 005 - 组件内修改 properties</h6><blockquote><p>properties 的值是可读可写的，可以通过 <code>setData</code> 修改 <code>properties</code> 中任何属性的值，</p></blockquote><ul><li>案例代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">handle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">propPrice</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span>propPrice <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span>propPrice<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="九、小程序组件-数据监听器" tabindex="-1"><a class="header-anchor" href="#九、小程序组件-数据监听器" aria-hidden="true">#</a> 九、小程序组件 -- 数据监听器</h5><h6 id="_001-基本使用方法" tabindex="-1"><a class="header-anchor" href="#_001-基本使用方法" aria-hidden="true">#</a> 001 - 基本使用方法</h6>`,11),K=n("p",null,"数据监听器可以用于监听和响应任何属性和数据字段的变化，从而执行特定的操作",-1),Q={href:"https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/observer.html",target:"_blank",rel:"noopener noreferrer"},U=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">observers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;propPrice, num&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newPropPrice<span class="token punctuation">,</span> newNum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newPropPrice<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newNum<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_002-监听子数据字段语法" tabindex="-1"><a class="header-anchor" href="#_002-监听子数据字段语法" aria-hidden="true">#</a> 002 - 监听子数据字段语法</h6><ul><li>案例代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 监控某个子数据的代码</span>
<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">observers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;some.subfield&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">subfield</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 使用 setData 设置 this.data.some.subfield 时触发</span>
      <span class="token comment">// （除此以外，使用 setData 设置 this.data.some 也会触发）</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;arr[12]&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arr12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 使用 setData 设置 this.data.arr[12] 时触发</span>
      <span class="token comment">// （除此以外，使用 setData 设置 this.data.arr 也会触发）</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用通配符 ** 监听所有子数据字段的变化</span>
<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">observers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;some.field.**&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">field</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 使用 setData 设置 this.data.some.field 本身或其下任何子数据字段时触发</span>
      <span class="token comment">// （除此以外，使用 setData 设置 this.data.some 也会触发）</span>
      field <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>some<span class="token punctuation">.</span>field
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="十、组件的生命周期" tabindex="-1"><a class="header-anchor" href="#十、组件的生命周期" aria-hidden="true">#</a> 十、组件的生命周期</h5><blockquote><p>组件的生命周期，指的是组件自身的一些函数，这些函数在特殊的时间点或遇到一些特殊的框架事件时被自动触发。</p></blockquote><ul><li>最重要的生命周期是 <code>created</code>, <code>attached</code>, <code>detached</code> ，包含一个组件实例生命流程的最主要时间点。 <ul><li>组件实例刚刚被创建好时， <code>created</code> 生命周期被触发。此时还不能调用 <code>setData</code> 。 通常情况下，这个生命周期只应该用于给组件 this 添加一些自定义属性字段。</li><li>在组件完全初始化完毕、进入页面节点树后， <code>attached</code> 生命周期被触发。此时， <code>this.data</code> 已被初始化完毕。这个生命周期很有用，绝大多数初始化工作可以在这个时机进行。</li><li>在组件离开页面节点树后， <code>detached</code> 生命周期被触发。退出一个页面时，如果组件还在页面节点树中，则 <code>detached</code> 会被触发。</li></ul></li></ul>`,9),Y={href:"https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/lifetimes.html",target:"_blank",rel:"noopener noreferrer"},Z=t(`<hr><h5 id="十一、小程序插槽的使用" tabindex="-1"><a class="header-anchor" href="#十一、小程序插槽的使用" aria-hidden="true">#</a> 十一、小程序插槽的使用</h5><h6 id="_001-默认插槽" tabindex="-1"><a class="header-anchor" href="#_001-默认插槽" aria-hidden="true">#</a> 001 - 默认插槽</h6><blockquote><p>在组件的 <code>wxml</code> 中可以包含 <code>slot</code> 节点，用于承载组件使用者提供的 <code>wxml</code> 结构。</p></blockquote><ul><li><p>默认情况下，一个组件的 <code>wxml</code> 中只能有一个 <code>slot</code>。需要使用多 <code>slot</code> 时，可以在组件 <code>js</code> 中声明启用。</p></li><li><p><strong>注意：小程序中目前只有默认插槽和多个插槽，暂不支持作用域插槽。</strong></p></li><li><p>案例代码</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 组件模板</span>

<span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>我是组件<span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>slot<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引用组件的页面模板</span>

<span class="token operator">&lt;</span>second<span class="token operator">-</span>com<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>你好，我是引用组件<span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>second<span class="token operator">-</span>com<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_002-多个插槽" tabindex="-1"><a class="header-anchor" href="#_002-多个插槽" aria-hidden="true">#</a> 002 - 多个插槽</h6><ol><li>在组件中，需要使用多 <code>slot</code> 时，可以在组件 <code>js</code> 中声明启用。</li></ol><ul><li>案例代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>

  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">multipleSlots</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
    
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在组件的 wxml 中使用多个 slot 标签，以不同的 name 来区分不同的插槽</li></ol><ul><li>案例代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引用组件的页面模板</span>

<span class="token operator">&lt;</span>second<span class="token operator">-</span>com prop<span class="token operator">-</span>price<span class="token operator">=</span><span class="token string">&quot;{{ priceData }}&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>view slot<span class="token operator">=</span><span class="token string">&quot;name&quot;</span><span class="token operator">&gt;</span>你好，这是 name 插槽 <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>view slot<span class="token operator">=</span><span class="token string">&quot;age&quot;</span><span class="token operator">&gt;</span>你好，这是 age 插槽<span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>second<span class="token operator">-</span>com<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用多个插槽</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 组件插槽</span>

<span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>我是组件<span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">&quot;name&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">&quot;age&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="十二、-组件间的通信" tabindex="-1"><a class="header-anchor" href="#十二、-组件间的通信" aria-hidden="true">#</a> 十二、 组件间的通信</h5><h6 id="_001-组件之间的三种基本通信方式" tabindex="-1"><a class="header-anchor" href="#_001-组件之间的三种基本通信方式" aria-hidden="true">#</a> 001 - 组件之间的三种基本通信方式</h6><ul><li><code>WXML</code> 数据绑定：用于父组件向子组件的指定属性传递数据，仅能设置 <code>JSON</code> 兼容数据</li><li>事件：用于子组件向父组件传递数据，可以传递任意数据。</li><li>父组件通过 <code>this.selectComponent</code> 方法获取子组件实例对象，便可以直接访问组件的任意数据和方法。</li></ul><h6 id="_002-this-selectcomponent-使用" tabindex="-1"><a class="header-anchor" href="#_002-this-selectcomponent-使用" aria-hidden="true">#</a> 002 - <code>this.selectComponent</code> 使用</h6><blockquote><p>父组件的 <code>.js</code> 文件中，可以调用 <code>this.selectComponent(string)</code> 函数并指定 <code>id</code> 或 <code>class</code> 选择器， 获取子组件对象调用 ，可以返回指定组件的实例对象</p></blockquote><ul><li>案例代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用组件的页面模板</span>

<span class="token operator">&lt;</span>second<span class="token operator">-</span>com <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;second&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;second&quot;</span> prop<span class="token operator">-</span>price<span class="token operator">=</span><span class="token string">&quot;{{ priceData }}&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>view slot<span class="token operator">=</span><span class="token string">&quot;name&quot;</span><span class="token operator">&gt;</span>你好，这是 name 插槽 <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>view slot<span class="token operator">=</span><span class="token string">&quot;age&quot;</span><span class="token operator">&gt;</span>你好，这是 age 插槽<span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>second<span class="token operator">-</span>com<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用组件的 .js 文件，使用方法触发</span>

<span class="token function-variable function">changeData</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// console.log(this.selectComponent(&#39;#second&#39;))</span>
    
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectComponent</span><span class="token punctuation">(</span><span class="token string">&#39;.second&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意事项</li><li><strong>不能传递标签选择器（component-a），不然返回的是 <code>null</code></strong></li></ul><h6 id="_003-通过事件监听实现子向父传值" tabindex="-1"><a class="header-anchor" href="#_003-通过事件监听实现子向父传值" aria-hidden="true">#</a> 003 - 通过事件监听实现子向父传值</h6><blockquote><p>事件系统是组件间通信的主要方式之一。自定义组件可以触发任意的事件，引用组件的页面可以监听这些事件。</p></blockquote><ul><li>实现步骤</li><li>在父组件的 <code>js</code> 中，定义一个函数，这个函数即将通过自定义事件的形式，传递给子组件</li><li>在父组件的 <code>wxml</code> 中，通过自定义事件的形式，将步骤一中定义的函数引用，传递给子组件</li><li>在子组件的 <code>js</code> 中，通过调用 <code>this.triggerEvent(&#39;自定义事件名称&#39;, { /* 参数对象 */ })</code> ，将数据发送到父组件</li><li>在父组件的 <code>js</code> 中，通过 <code>e.detail</code> 获取到子组件传递过来的数据</li><li>案例代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用组件的页面模板自定义 myEvent 事件,接收 getCount 方法</span>

<span class="token operator">&lt;</span>second<span class="token operator">-</span>com bind<span class="token operator">:</span>myEvent<span class="token operator">=</span><span class="token string">&quot;getCount&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;second&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;second&quot;</span> prop<span class="token operator">-</span>price<span class="token operator">=</span><span class="token string">&quot;{{ priceData }}&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>view slot<span class="token operator">=</span><span class="token string">&quot;name&quot;</span><span class="token operator">&gt;</span>你好，这是 name 插槽 <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>view slot<span class="token operator">=</span><span class="token string">&quot;age&quot;</span><span class="token operator">&gt;</span>你好，这是 age 插槽<span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>secondcom<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用组件页面 js，生命 getCount 方法</span>

<span class="token function-variable function">getCount</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 组件页面</span>

<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">triggerEvent</span><span class="token punctuation">(</span><span class="token string">&#39;myEvent&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>num
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32);function $(o,nn){const a=c("ExternalLinkIcon");return i(),r("div",null,[u,n("ul",null,[n("li",null,[k,n("ul",null,[n("li",null,[n("a",v,[s("wx.navigateTo 详细文档"),e(a)])])])]),m]),b,n("ul",null,[h,n("li",null,[n("a",g,[s("wx.switchTab 详细文档"),e(a)])]),f]),_,n("ul",null,[n("li",null,[s("参数文档 "),n("ul",null,[n("li",null,[n("a",w,[s("wx.navigateBack 详细文档"),e(a)])])])]),x]),q,n("p",null,[n("strong",null,[s("注意： "),n("a",y,[s("网络配置详情"),e(a)])])]),j,B,C,n("p",null,[n("strong",null,[s("注意： "),n("a",D,[s("网络配置详情"),e(a)])])]),P,n("p",null,[n("strong",null,[n("a",T,[s("wx.request 详细文档说明"),e(a)])])]),N,S,E,O,n("blockquote",null,[n("p",null,[n("a",H,[s("组件创建详细文档"),e(a)])])]),L,n("blockquote",null,[n("p",null,[n("a",V,[s("小程序组件样式 详细文档"),e(a)])])]),I,n("blockquote",null,[n("p",null,[n("a",F,[s("组件详细的参数含义和使用"),e(a)])])]),J,n("ul",null,[A,n("li",null,[n("p",null,"如果要渲染 data 中的数据，直接使用 "+p(o.数据名称)+" 即可",1)])]),G,n("blockquote",null,[n("p",null,[n("a",M,[s("组件间通信与事件 详细文档"),e(a)])])]),R,n("ul",null,[W,X,n("li",null,'应用于数据绑定时，采用驼峰写法（attr="'+p(o.propertyName)+'"）。',1)]),z,n("blockquote",null,[K,n("p",null,[n("a",Q,[s("数据监听详细文档"),e(a)])])]),U,n("p",null,[n("strong",null,[s("其他： "),n("a",Y,[s("组件生命周期详解"),e(a)])])]),Z])}const en=l(d,[["render",$],["__file","04-小程序基础.html.vue"]]);export{en as default};
